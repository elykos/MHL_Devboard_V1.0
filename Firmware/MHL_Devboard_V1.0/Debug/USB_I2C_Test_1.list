
USB_I2C_Test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000820c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800843c  0800843c  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800843c  0800843c  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800843c  0800843c  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08008444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  20000188  080085cc  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20001378  080085cc  00021378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f398  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003baa  00000000  00000000  0003f548  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  000430f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  00044468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001acd2  00000000  00000000  00045640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013348  00000000  00000000  00060312  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000827a6  00000000  00000000  0007365a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5e00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004594  00000000  00000000  000f5e7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000188 	.word	0x20000188
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080082b4 	.word	0x080082b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000018c 	.word	0x2000018c
 8000104:	080082b4 	.word	0x080082b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f007 f877 	bl	8007328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f003 fefe 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f90d 	bl	8000482 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8e1 	bl	8000438 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200003c8 	.word	0x200003c8

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	200003c8 	.word	0x200003c8

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	231f      	movs	r3, #31
 80002fc:	401a      	ands	r2, r3
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <NVIC_EnableIRQ+0x28>)
 8000300:	2101      	movs	r1, #1
 8000302:	4091      	lsls	r1, r2
 8000304:	000a      	movs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b7f      	cmp	r3, #127	; 0x7f
 8000328:	d932      	bls.n	8000390 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <NVIC_SetPriority+0xd4>)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	0019      	movs	r1, r3
 8000332:	230f      	movs	r3, #15
 8000334:	400b      	ands	r3, r1
 8000336:	3b08      	subs	r3, #8
 8000338:	089b      	lsrs	r3, r3, #2
 800033a:	3306      	adds	r3, #6
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	3304      	adds	r3, #4
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1dfa      	adds	r2, r7, #7
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	0011      	movs	r1, r2
 800034a:	2203      	movs	r2, #3
 800034c:	400a      	ands	r2, r1
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	21ff      	movs	r1, #255	; 0xff
 8000352:	4091      	lsls	r1, r2
 8000354:	000a      	movs	r2, r1
 8000356:	43d2      	mvns	r2, r2
 8000358:	401a      	ands	r2, r3
 800035a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	019b      	lsls	r3, r3, #6
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	401a      	ands	r2, r3
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0018      	movs	r0, r3
 800036a:	2303      	movs	r3, #3
 800036c:	4003      	ands	r3, r0
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001c      	movs	r4, r3
 800037a:	230f      	movs	r3, #15
 800037c:	4023      	ands	r3, r4
 800037e:	3b08      	subs	r3, #8
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	3306      	adds	r3, #6
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	18c3      	adds	r3, r0, r3
 800038a:	3304      	adds	r3, #4
 800038c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800038e:	e027      	b.n	80003e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <NVIC_SetPriority+0xd8>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	33c0      	adds	r3, #192	; 0xc0
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	589b      	ldr	r3, [r3, r2]
 80003a0:	1dfa      	adds	r2, r7, #7
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	0011      	movs	r1, r2
 80003a6:	2203      	movs	r2, #3
 80003a8:	400a      	ands	r2, r1
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	4091      	lsls	r1, r2
 80003b0:	000a      	movs	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	019b      	lsls	r3, r3, #6
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	401a      	ands	r2, r3
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	4003      	ands	r3, r0
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <NVIC_SetPriority+0xd8>)
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	33c0      	adds	r3, #192	; 0xc0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	501a      	str	r2, [r3, r0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <SysTick_Config+0x40>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d901      	bls.n	8000406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000402:	2301      	movs	r3, #1
 8000404:	e010      	b.n	8000428 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <SysTick_Config+0x44>)
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	3a01      	subs	r2, #1
 800040c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	2103      	movs	r1, #3
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff7d 	bl	8000314 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <SysTick_Config+0x44>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <SysTick_Config+0x44>)
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000426:	2300      	movs	r3, #0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	00ffffff 	.word	0x00ffffff
 8000434:	e000e010 	.word	0xe000e010

08000438 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	210f      	movs	r1, #15
 8000444:	187b      	adds	r3, r7, r1
 8000446:	1c02      	adds	r2, r0, #0
 8000448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	187b      	adds	r3, r7, r1
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b25b      	sxtb	r3, r3
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <NVIC_SetPriority>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	0002      	movs	r2, r0
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b25b      	sxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff37 	bl	80002e8 <NVIC_EnableIRQ>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ffaf 	bl	80003f0 <SysTick_Config>
 8000492:	0003      	movs	r3, r0
}
 8000494:	0018      	movs	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004b2:	e155      	b.n	8000760 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2101      	movs	r1, #1
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	4091      	lsls	r1, r2
 80004be:	000a      	movs	r2, r1
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d100      	bne.n	80004cc <HAL_GPIO_Init+0x30>
 80004ca:	e146      	b.n	800075a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d003      	beq.n	80004dc <HAL_GPIO_Init+0x40>
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b12      	cmp	r3, #18
 80004da:	d123      	bne.n	8000524 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	08da      	lsrs	r2, r3, #3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3208      	adds	r2, #8
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	58d3      	ldr	r3, [r2, r3]
 80004e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2207      	movs	r2, #7
 80004ee:	4013      	ands	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	220f      	movs	r2, #15
 80004f4:	409a      	lsls	r2, r3
 80004f6:	0013      	movs	r3, r2
 80004f8:	43da      	mvns	r2, r3
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	691a      	ldr	r2, [r3, #16]
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	2107      	movs	r1, #7
 8000508:	400b      	ands	r3, r1
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	409a      	lsls	r2, r3
 800050e:	0013      	movs	r3, r2
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4313      	orrs	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	08da      	lsrs	r2, r3, #3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3208      	adds	r2, #8
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	6939      	ldr	r1, [r7, #16]
 8000522:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2203      	movs	r2, #3
 8000530:	409a      	lsls	r2, r3
 8000532:	0013      	movs	r3, r2
 8000534:	43da      	mvns	r2, r3
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	4013      	ands	r3, r2
 800053a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2203      	movs	r2, #3
 8000542:	401a      	ands	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	4313      	orrs	r3, r2
 8000550:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00b      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d007      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800056c:	2b11      	cmp	r3, #17
 800056e:	d003      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b12      	cmp	r3, #18
 8000576:	d130      	bne.n	80005da <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	2203      	movs	r2, #3
 8000584:	409a      	lsls	r2, r3
 8000586:	0013      	movs	r3, r2
 8000588:	43da      	mvns	r2, r3
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	409a      	lsls	r2, r3
 800059a:	0013      	movs	r3, r2
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005ae:	2201      	movs	r2, #1
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	409a      	lsls	r2, r3
 80005b4:	0013      	movs	r3, r2
 80005b6:	43da      	mvns	r2, r3
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	4013      	ands	r3, r2
 80005bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	091b      	lsrs	r3, r3, #4
 80005c4:	2201      	movs	r2, #1
 80005c6:	401a      	ands	r2, r3
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0013      	movs	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2203      	movs	r2, #3
 80005e6:	409a      	lsls	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	43da      	mvns	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4013      	ands	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0013      	movs	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	4313      	orrs	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	055b      	lsls	r3, r3, #21
 8000612:	4013      	ands	r3, r2
 8000614:	d100      	bne.n	8000618 <HAL_GPIO_Init+0x17c>
 8000616:	e0a0      	b.n	800075a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000618:	4b57      	ldr	r3, [pc, #348]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 800061a:	699a      	ldr	r2, [r3, #24]
 800061c:	4b56      	ldr	r3, [pc, #344]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 800061e:	2101      	movs	r1, #1
 8000620:	430a      	orrs	r2, r1
 8000622:	619a      	str	r2, [r3, #24]
 8000624:	4b54      	ldr	r3, [pc, #336]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	2201      	movs	r2, #1
 800062a:	4013      	ands	r3, r2
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000630:	4a52      	ldr	r2, [pc, #328]	; (800077c <HAL_GPIO_Init+0x2e0>)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	3302      	adds	r3, #2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	589b      	ldr	r3, [r3, r2]
 800063c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2203      	movs	r2, #3
 8000642:	4013      	ands	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	220f      	movs	r2, #15
 8000648:	409a      	lsls	r2, r3
 800064a:	0013      	movs	r3, r2
 800064c:	43da      	mvns	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4013      	ands	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	429a      	cmp	r2, r3
 800065c:	d019      	beq.n	8000692 <HAL_GPIO_Init+0x1f6>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a47      	ldr	r2, [pc, #284]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d013      	beq.n	800068e <HAL_GPIO_Init+0x1f2>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a46      	ldr	r2, [pc, #280]	; (8000784 <HAL_GPIO_Init+0x2e8>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d00d      	beq.n	800068a <HAL_GPIO_Init+0x1ee>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a45      	ldr	r2, [pc, #276]	; (8000788 <HAL_GPIO_Init+0x2ec>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d007      	beq.n	8000686 <HAL_GPIO_Init+0x1ea>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a44      	ldr	r2, [pc, #272]	; (800078c <HAL_GPIO_Init+0x2f0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d101      	bne.n	8000682 <HAL_GPIO_Init+0x1e6>
 800067e:	2304      	movs	r3, #4
 8000680:	e008      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 8000682:	2305      	movs	r3, #5
 8000684:	e006      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 8000686:	2303      	movs	r3, #3
 8000688:	e004      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 800068a:	2302      	movs	r3, #2
 800068c:	e002      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 8000692:	2300      	movs	r3, #0
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	2103      	movs	r1, #3
 8000698:	400a      	ands	r2, r1
 800069a:	0092      	lsls	r2, r2, #2
 800069c:	4093      	lsls	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006a4:	4935      	ldr	r1, [pc, #212]	; (800077c <HAL_GPIO_Init+0x2e0>)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	3302      	adds	r3, #2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	43da      	mvns	r2, r3
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	4013      	ands	r3, r2
 80006c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685a      	ldr	r2, [r3, #4]
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	025b      	lsls	r3, r3, #9
 80006ca:	4013      	ands	r3, r2
 80006cc:	d003      	beq.n	80006d6 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	43da      	mvns	r2, r3
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	029b      	lsls	r3, r3, #10
 80006f4:	4013      	ands	r3, r2
 80006f6:	d003      	beq.n	8000700 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	43da      	mvns	r2, r3
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	4013      	ands	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	035b      	lsls	r3, r3, #13
 800071e:	4013      	ands	r3, r2
 8000720:	d003      	beq.n	800072a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4313      	orrs	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	43da      	mvns	r2, r3
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	4013      	ands	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	039b      	lsls	r3, r3, #14
 8000748:	4013      	ands	r3, r2
 800074a:	d003      	beq.n	8000754 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	40da      	lsrs	r2, r3
 8000768:	1e13      	subs	r3, r2, #0
 800076a:	d000      	beq.n	800076e <HAL_GPIO_Init+0x2d2>
 800076c:	e6a2      	b.n	80004b4 <HAL_GPIO_Init+0x18>
  } 
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b006      	add	sp, #24
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000
 8000780:	48000400 	.word	0x48000400
 8000784:	48000800 	.word	0x48000800
 8000788:	48000c00 	.word	0x48000c00
 800078c:	48001000 	.word	0x48001000
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	0008      	movs	r0, r1
 800079e:	0011      	movs	r1, r2
 80007a0:	1cbb      	adds	r3, r7, #2
 80007a2:	1c02      	adds	r2, r0, #0
 80007a4:	801a      	strh	r2, [r3, #0]
 80007a6:	1c7b      	adds	r3, r7, #1
 80007a8:	1c0a      	adds	r2, r1, #0
 80007aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007ac:	1c7b      	adds	r3, r7, #1
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d004      	beq.n	80007be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007b4:	1cbb      	adds	r3, r7, #2
 80007b6:	881a      	ldrh	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007bc:	e003      	b.n	80007c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007be:	1cbb      	adds	r3, r7, #2
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	0002      	movs	r2, r0
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	1dba      	adds	r2, r7, #6
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	4013      	ands	r3, r2
 80007e6:	d008      	beq.n	80007fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80007ea:	1dba      	adds	r2, r7, #6
 80007ec:	8812      	ldrh	r2, [r2, #0]
 80007ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	0018      	movs	r0, r3
 80007f6:	f006 fcc9 	bl	800718c <HAL_GPIO_EXTI_Callback>
  }
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40010400 	.word	0x40010400

08000808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e082      	b.n	8000920 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2241      	movs	r2, #65	; 0x41
 800081e:	5c9b      	ldrb	r3, [r3, r2]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d107      	bne.n	8000836 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2240      	movs	r2, #64	; 0x40
 800082a:	2100      	movs	r1, #0
 800082c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	0018      	movs	r0, r3
 8000832:	f006 fd9d 	bl	8007370 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2241      	movs	r2, #65	; 0x41
 800083a:	2124      	movs	r1, #36	; 0x24
 800083c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2101      	movs	r1, #1
 800084a:	438a      	bics	r2, r1
 800084c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4934      	ldr	r1, [pc, #208]	; (8000928 <HAL_I2C_Init+0x120>)
 8000858:	400a      	ands	r2, r1
 800085a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4931      	ldr	r1, [pc, #196]	; (800092c <HAL_I2C_Init+0x124>)
 8000868:	400a      	ands	r2, r1
 800086a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d108      	bne.n	8000886 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0209      	lsls	r1, r1, #8
 8000880:	430a      	orrs	r2, r1
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	e007      	b.n	8000896 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2184      	movs	r1, #132	; 0x84
 8000890:	0209      	lsls	r1, r1, #8
 8000892:	430a      	orrs	r2, r1
 8000894:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d104      	bne.n	80008a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	491f      	ldr	r1, [pc, #124]	; (8000930 <HAL_I2C_Init+0x128>)
 80008b4:	430a      	orrs	r2, r1
 80008b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	491a      	ldr	r1, [pc, #104]	; (800092c <HAL_I2C_Init+0x124>)
 80008c4:	400a      	ands	r2, r1
 80008c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	691a      	ldr	r2, [r3, #16]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	431a      	orrs	r2, r3
 80008d2:	0011      	movs	r1, r2
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	021a      	lsls	r2, r3, #8
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	430a      	orrs	r2, r1
 80008e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	69d9      	ldr	r1, [r3, #28]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6a1a      	ldr	r2, [r3, #32]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2241      	movs	r2, #65	; 0x41
 800090c:	2120      	movs	r1, #32
 800090e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2242      	movs	r2, #66	; 0x42
 800091a:	2100      	movs	r1, #0
 800091c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800091e:	2300      	movs	r3, #0
}
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	f0ffffff 	.word	0xf0ffffff
 800092c:	ffff7fff 	.word	0xffff7fff
 8000930:	02008000 	.word	0x02008000

08000934 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af02      	add	r7, sp, #8
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	0008      	movs	r0, r1
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	0019      	movs	r1, r3
 8000942:	230a      	movs	r3, #10
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	1c02      	adds	r2, r0, #0
 8000948:	801a      	strh	r2, [r3, #0]
 800094a:	2308      	movs	r3, #8
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	1c0a      	adds	r2, r1, #0
 8000950:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2241      	movs	r2, #65	; 0x41
 800095a:	5c9b      	ldrb	r3, [r3, r2]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b20      	cmp	r3, #32
 8000960:	d000      	beq.n	8000964 <HAL_I2C_Master_Transmit+0x30>
 8000962:	e0f3      	b.n	8000b4c <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	5c9b      	ldrb	r3, [r3, r2]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d101      	bne.n	8000972 <HAL_I2C_Master_Transmit+0x3e>
 800096e:	2302      	movs	r3, #2
 8000970:	e0ed      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21a>
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2240      	movs	r2, #64	; 0x40
 8000976:	2101      	movs	r1, #1
 8000978:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800097a:	f7ff fc8d 	bl	8000298 <HAL_GetTick>
 800097e:	0003      	movs	r3, r0
 8000980:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	0219      	lsls	r1, r3, #8
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2319      	movs	r3, #25
 800098e:	2201      	movs	r2, #1
 8000990:	f000 fb02 	bl	8000f98 <I2C_WaitOnFlagUntilTimeout>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 8000998:	2303      	movs	r3, #3
 800099a:	e0d8      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2241      	movs	r2, #65	; 0x41
 80009a0:	2121      	movs	r1, #33	; 0x21
 80009a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2242      	movs	r2, #66	; 0x42
 80009a8:	2110      	movs	r1, #16
 80009aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2200      	movs	r2, #0
 80009b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2208      	movs	r2, #8
 80009bc:	18ba      	adds	r2, r7, r2
 80009be:	8812      	ldrh	r2, [r2, #0]
 80009c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	2bff      	cmp	r3, #255	; 0xff
 80009d0:	d912      	bls.n	80009f8 <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	22ff      	movs	r2, #255	; 0xff
 80009d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	045c      	lsls	r4, r3, #17
 80009e2:	230a      	movs	r3, #10
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	8819      	ldrh	r1, [r3, #0]
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	0023      	movs	r3, r4
 80009f2:	f000 fc41 	bl	8001278 <I2C_TransferConfig>
 80009f6:	e07a      	b.n	8000aee <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	049c      	lsls	r4, r3, #18
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	8819      	ldrh	r1, [r3, #0]
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	019b      	lsls	r3, r3, #6
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	0023      	movs	r3, r4
 8000a1c:	f000 fc2c 	bl	8001278 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000a20:	e065      	b.n	8000aee <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 faee 	bl	800100a <I2C_WaitOnTXISFlagUntilTimeout>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d007      	beq.n	8000a42 <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d101      	bne.n	8000a3e <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e087      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e085      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	1c59      	adds	r1, r3, #1
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	6251      	str	r1, [r2, #36]	; 0x24
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a66:	3b01      	subs	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d13b      	bne.n	8000aee <HAL_I2C_Master_Transmit+0x1ba>
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d036      	beq.n	8000aee <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	0013      	movs	r3, r2
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	f000 fa83 	bl	8000f98 <I2C_WaitOnFlagUntilTimeout>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 8000a96:	2303      	movs	r3, #3
 8000a98:	e059      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	2bff      	cmp	r3, #255	; 0xff
 8000aa2:	d911      	bls.n	8000ac8 <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	22ff      	movs	r2, #255	; 0xff
 8000aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	045c      	lsls	r4, r3, #17
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	8819      	ldrh	r1, [r3, #0]
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	2300      	movs	r3, #0
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	0023      	movs	r3, r4
 8000ac2:	f000 fbd9 	bl	8001278 <I2C_TransferConfig>
 8000ac6:	e012      	b.n	8000aee <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	049c      	lsls	r4, r3, #18
 8000adc:	230a      	movs	r3, #10
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	8819      	ldrh	r1, [r3, #0]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	0023      	movs	r3, r4
 8000aea:	f000 fbc5 	bl	8001278 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d194      	bne.n	8000a22 <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fac2 	bl	8001088 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d007      	beq.n	8000b18 <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d101      	bne.n	8000b14 <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e01c      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e01a      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	490b      	ldr	r1, [pc, #44]	; (8000b58 <HAL_I2C_Master_Transmit+0x224>)
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2241      	movs	r2, #65	; 0x41
 8000b34:	2120      	movs	r1, #32
 8000b36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2242      	movs	r2, #66	; 0x42
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2240      	movs	r2, #64	; 0x40
 8000b44:	2100      	movs	r1, #0
 8000b46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e000      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8000b4c:	2302      	movs	r3, #2
  }
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b007      	add	sp, #28
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	fe00e800 	.word	0xfe00e800

08000b5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	0008      	movs	r0, r1
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	0019      	movs	r1, r3
 8000b6a:	230a      	movs	r3, #10
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	1c02      	adds	r2, r0, #0
 8000b70:	801a      	strh	r2, [r3, #0]
 8000b72:	2308      	movs	r3, #8
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	1c0a      	adds	r2, r1, #0
 8000b78:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2241      	movs	r2, #65	; 0x41
 8000b82:	5c9b      	ldrb	r3, [r3, r2]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b20      	cmp	r3, #32
 8000b88:	d000      	beq.n	8000b8c <HAL_I2C_Master_Receive+0x30>
 8000b8a:	e0f4      	b.n	8000d76 <HAL_I2C_Master_Receive+0x21a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2240      	movs	r2, #64	; 0x40
 8000b90:	5c9b      	ldrb	r3, [r3, r2]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d101      	bne.n	8000b9a <HAL_I2C_Master_Receive+0x3e>
 8000b96:	2302      	movs	r3, #2
 8000b98:	e0ee      	b.n	8000d78 <HAL_I2C_Master_Receive+0x21c>
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ba2:	f7ff fb79 	bl	8000298 <HAL_GetTick>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	0219      	lsls	r1, r3, #8
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2319      	movs	r3, #25
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f000 f9ee 	bl	8000f98 <I2C_WaitOnFlagUntilTimeout>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_I2C_Master_Receive+0x68>
    {
      return HAL_TIMEOUT;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e0d9      	b.n	8000d78 <HAL_I2C_Master_Receive+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2241      	movs	r2, #65	; 0x41
 8000bc8:	2122      	movs	r1, #34	; 0x22
 8000bca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2242      	movs	r2, #66	; 0x42
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2208      	movs	r2, #8
 8000be4:	18ba      	adds	r2, r7, r2
 8000be6:	8812      	ldrh	r2, [r2, #0]
 8000be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2bff      	cmp	r3, #255	; 0xff
 8000bf8:	d912      	bls.n	8000c20 <HAL_I2C_Master_Receive+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	22ff      	movs	r2, #255	; 0xff
 8000bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	045c      	lsls	r4, r3, #17
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	8819      	ldrh	r1, [r3, #0]
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	2390      	movs	r3, #144	; 0x90
 8000c14:	019b      	lsls	r3, r3, #6
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	0023      	movs	r3, r4
 8000c1a:	f000 fb2d 	bl	8001278 <I2C_TransferConfig>
 8000c1e:	e07b      	b.n	8000d18 <HAL_I2C_Master_Receive+0x1bc>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	049c      	lsls	r4, r3, #18
 8000c34:	230a      	movs	r3, #10
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	8819      	ldrh	r1, [r3, #0]
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	2390      	movs	r3, #144	; 0x90
 8000c3e:	019b      	lsls	r3, r3, #6
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	0023      	movs	r3, r4
 8000c44:	f000 fb18 	bl	8001278 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000c48:	e066      	b.n	8000d18 <HAL_I2C_Master_Receive+0x1bc>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 fa55 	bl	8001100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d007      	beq.n	8000c6a <HAL_I2C_Master_Receive+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d101      	bne.n	8000c66 <HAL_I2C_Master_Receive+0x10a>
        {
          return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e088      	b.n	8000d78 <HAL_I2C_Master_Receive+0x21c>
        }
        else
        {
          return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e086      	b.n	8000d78 <HAL_I2C_Master_Receive+0x21c>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	1c59      	adds	r1, r3, #1
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	6251      	str	r1, [r2, #36]	; 0x24
 8000c7a:	b2c2      	uxtb	r2, r0
 8000c7c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c82:	3b01      	subs	r3, #1
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3b01      	subs	r3, #1
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d13b      	bne.n	8000d18 <HAL_I2C_Master_Receive+0x1bc>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d036      	beq.n	8000d18 <HAL_I2C_Master_Receive+0x1bc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	f000 f96e 	bl	8000f98 <I2C_WaitOnFlagUntilTimeout>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_I2C_Master_Receive+0x168>
        {
          return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e059      	b.n	8000d78 <HAL_I2C_Master_Receive+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	2bff      	cmp	r3, #255	; 0xff
 8000ccc:	d911      	bls.n	8000cf2 <HAL_I2C_Master_Receive+0x196>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	22ff      	movs	r2, #255	; 0xff
 8000cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	045c      	lsls	r4, r3, #17
 8000cde:	230a      	movs	r3, #10
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	8819      	ldrh	r1, [r3, #0]
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	0023      	movs	r3, r4
 8000cec:	f000 fac4 	bl	8001278 <I2C_TransferConfig>
 8000cf0:	e012      	b.n	8000d18 <HAL_I2C_Master_Receive+0x1bc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	049c      	lsls	r4, r3, #18
 8000d06:	230a      	movs	r3, #10
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	8819      	ldrh	r1, [r3, #0]
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	0023      	movs	r3, r4
 8000d14:	f000 fab0 	bl	8001278 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d193      	bne.n	8000c4a <HAL_I2C_Master_Receive+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 f9ad 	bl	8001088 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d007      	beq.n	8000d42 <HAL_I2C_Master_Receive+0x1e6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d101      	bne.n	8000d3e <HAL_I2C_Master_Receive+0x1e2>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e01c      	b.n	8000d78 <HAL_I2C_Master_Receive+0x21c>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e01a      	b.n	8000d78 <HAL_I2C_Master_Receive+0x21c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2220      	movs	r2, #32
 8000d48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	490a      	ldr	r1, [pc, #40]	; (8000d80 <HAL_I2C_Master_Receive+0x224>)
 8000d56:	400a      	ands	r2, r1
 8000d58:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2241      	movs	r2, #65	; 0x41
 8000d5e:	2120      	movs	r1, #32
 8000d60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2242      	movs	r2, #66	; 0x42
 8000d66:	2100      	movs	r1, #0
 8000d68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2240      	movs	r2, #64	; 0x40
 8000d6e:	2100      	movs	r1, #0
 8000d70:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_I2C_Master_Receive+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8000d76:	2302      	movs	r3, #2
  }
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b007      	add	sp, #28
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	fe00e800 	.word	0xfe00e800

08000d84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	230a      	movs	r3, #10
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	1c0a      	adds	r2, r1, #0
 8000d96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2241      	movs	r2, #65	; 0x41
 8000da4:	5c9b      	ldrb	r3, [r3, r2]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b20      	cmp	r3, #32
 8000daa:	d000      	beq.n	8000dae <HAL_I2C_IsDeviceReady+0x2a>
 8000dac:	e0cb      	b.n	8000f46 <HAL_I2C_IsDeviceReady+0x1c2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	699a      	ldr	r2, [r3, #24]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	401a      	ands	r2, r3
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d101      	bne.n	8000dc6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e0c0      	b.n	8000f48 <HAL_I2C_IsDeviceReady+0x1c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	5c9b      	ldrb	r3, [r3, r2]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d101      	bne.n	8000dd4 <HAL_I2C_IsDeviceReady+0x50>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e0b9      	b.n	8000f48 <HAL_I2C_IsDeviceReady+0x1c4>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2240      	movs	r2, #64	; 0x40
 8000dd8:	2101      	movs	r1, #1
 8000dda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2241      	movs	r2, #65	; 0x41
 8000de0:	2124      	movs	r1, #36	; 0x24
 8000de2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2200      	movs	r2, #0
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d107      	bne.n	8000e02 <HAL_I2C_IsDeviceReady+0x7e>
 8000df2:	230a      	movs	r3, #10
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	059b      	lsls	r3, r3, #22
 8000dfa:	0d9b      	lsrs	r3, r3, #22
 8000dfc:	4a54      	ldr	r2, [pc, #336]	; (8000f50 <HAL_I2C_IsDeviceReady+0x1cc>)
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	e007      	b.n	8000e12 <HAL_I2C_IsDeviceReady+0x8e>
 8000e02:	230a      	movs	r3, #10
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	059b      	lsls	r3, r3, #22
 8000e0a:	0d9b      	lsrs	r3, r3, #22
 8000e0c:	22a0      	movs	r2, #160	; 0xa0
 8000e0e:	0192      	lsls	r2, r2, #6
 8000e10:	431a      	orrs	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8000e18:	f7ff fa3e 	bl	8000298 <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	617b      	str	r3, [r7, #20]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000e20:	e017      	b.n	8000e52 <HAL_I2C_IsDeviceReady+0xce>
      {
        if (Timeout != HAL_MAX_DELAY)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	d014      	beq.n	8000e52 <HAL_I2C_IsDeviceReady+0xce>
        {
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <HAL_I2C_IsDeviceReady+0xba>
 8000e2e:	f7ff fa33 	bl	8000298 <HAL_GetTick>
 8000e32:	0002      	movs	r2, r0
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d209      	bcs.n	8000e52 <HAL_I2C_IsDeviceReady+0xce>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2241      	movs	r2, #65	; 0x41
 8000e42:	2120      	movs	r1, #32
 8000e44:	5499      	strb	r1, [r3, r2]
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2240      	movs	r2, #64	; 0x40
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	5499      	strb	r1, [r3, r2]
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e07a      	b.n	8000f48 <HAL_I2C_IsDeviceReady+0x1c4>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b20      	cmp	r3, #32
 8000e5e:	d00c      	beq.n	8000e7a <HAL_I2C_IsDeviceReady+0xf6>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	2210      	movs	r2, #16
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b10      	cmp	r3, #16
 8000e6c:	d005      	beq.n	8000e7a <HAL_I2C_IsDeviceReady+0xf6>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2241      	movs	r2, #65	; 0x41
 8000e72:	5c9b      	ldrb	r3, [r3, r2]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2ba0      	cmp	r3, #160	; 0xa0
 8000e78:	d1d3      	bne.n	8000e22 <HAL_I2C_IsDeviceReady+0x9e>
          }
        }
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	2210      	movs	r2, #16
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b10      	cmp	r3, #16
 8000e86:	d01a      	beq.n	8000ebe <HAL_I2C_IsDeviceReady+0x13a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	0013      	movs	r3, r2
 8000e92:	2200      	movs	r2, #0
 8000e94:	2120      	movs	r1, #32
 8000e96:	f000 f87f 	bl	8000f98 <I2C_WaitOnFlagUntilTimeout>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_I2C_IsDeviceReady+0x11e>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e052      	b.n	8000f48 <HAL_I2C_IsDeviceReady+0x1c4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2241      	movs	r2, #65	; 0x41
 8000eae:	2120      	movs	r1, #32
 8000eb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e044      	b.n	8000f48 <HAL_I2C_IsDeviceReady+0x1c4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2120      	movs	r1, #32
 8000ecc:	f000 f864 	bl	8000f98 <I2C_WaitOnFlagUntilTimeout>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e037      	b.n	8000f48 <HAL_I2C_IsDeviceReady+0x1c4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2210      	movs	r2, #16
 8000ede:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	613a      	str	r2, [r7, #16]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d119      	bne.n	8000f28 <HAL_I2C_IsDeviceReady+0x1a4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	01c9      	lsls	r1, r1, #7
 8000f02:	430a      	orrs	r2, r1
 8000f04:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	0013      	movs	r3, r2
 8000f10:	2200      	movs	r2, #0
 8000f12:	2120      	movs	r1, #32
 8000f14:	f000 f840 	bl	8000f98 <I2C_WaitOnFlagUntilTimeout>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_I2C_IsDeviceReady+0x19c>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e013      	b.n	8000f48 <HAL_I2C_IsDeviceReady+0x1c4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2220      	movs	r2, #32
 8000f26:	61da      	str	r2, [r3, #28]
      }
    }
    while (I2C_Trials < Trials);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d900      	bls.n	8000f32 <HAL_I2C_IsDeviceReady+0x1ae>
 8000f30:	e75b      	b.n	8000dea <HAL_I2C_IsDeviceReady+0x66>

    hi2c->State = HAL_I2C_STATE_READY;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2241      	movs	r2, #65	; 0x41
 8000f36:	2120      	movs	r1, #32
 8000f38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	2100      	movs	r1, #0
 8000f40:	5499      	strb	r1, [r3, r2]

    return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e000      	b.n	8000f48 <HAL_I2C_IsDeviceReady+0x1c4>
  }
  else
  {
    return HAL_BUSY;
 8000f46:	2302      	movs	r3, #2
  }
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b006      	add	sp, #24
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	02002000 	.word	0x02002000

08000f54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d103      	bne.n	8000f72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d007      	beq.n	8000f90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	619a      	str	r2, [r3, #24]
  }
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fa8:	e01b      	b.n	8000fe2 <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	d018      	beq.n	8000fe2 <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d007      	beq.n	8000fc6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000fb6:	f7ff f96f 	bl	8000298 <HAL_GetTick>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d20d      	bcs.n	8000fe2 <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2241      	movs	r2, #65	; 0x41
 8000fca:	2120      	movs	r1, #32
 8000fcc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2242      	movs	r2, #66	; 0x42
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2240      	movs	r2, #64	; 0x40
 8000fda:	2100      	movs	r1, #0
 8000fdc:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e00f      	b.n	8001002 <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	4013      	ands	r3, r2
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	425a      	negs	r2, r3
 8000ff2:	4153      	adcs	r3, r2
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d0d4      	beq.n	8000faa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}

0800100a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001016:	e02b      	b.n	8001070 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	0018      	movs	r0, r3
 8001020:	f000 f8cc 	bl	80011bc <I2C_IsAcknowledgeFailed>
 8001024:	1e03      	subs	r3, r0, #0
 8001026:	d001      	beq.n	800102c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e029      	b.n	8001080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	3301      	adds	r3, #1
 8001030:	d01e      	beq.n	8001070 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d007      	beq.n	8001048 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001038:	f7ff f92e 	bl	8000298 <HAL_GetTick>
 800103c:	0002      	movs	r2, r0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	429a      	cmp	r2, r3
 8001046:	d213      	bcs.n	8001070 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	2220      	movs	r2, #32
 800104e:	431a      	orrs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2241      	movs	r2, #65	; 0x41
 8001058:	2120      	movs	r1, #32
 800105a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2242      	movs	r2, #66	; 0x42
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	2100      	movs	r1, #0
 800106a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e007      	b.n	8001080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	2202      	movs	r2, #2
 8001078:	4013      	ands	r3, r2
 800107a:	2b02      	cmp	r3, #2
 800107c:	d1cc      	bne.n	8001018 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bd80      	pop	{r7, pc}

08001088 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001094:	e028      	b.n	80010e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	0018      	movs	r0, r3
 800109e:	f000 f88d 	bl	80011bc <I2C_IsAcknowledgeFailed>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e026      	b.n	80010f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80010b0:	f7ff f8f2 	bl	8000298 <HAL_GetTick>
 80010b4:	0002      	movs	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d213      	bcs.n	80010e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c4:	2220      	movs	r2, #32
 80010c6:	431a      	orrs	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2241      	movs	r2, #65	; 0x41
 80010d0:	2120      	movs	r1, #32
 80010d2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2242      	movs	r2, #66	; 0x42
 80010d8:	2100      	movs	r1, #0
 80010da:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	2100      	movs	r1, #0
 80010e2:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e007      	b.n	80010f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	2220      	movs	r2, #32
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	d1cf      	bne.n	8001096 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b004      	add	sp, #16
 80010fe:	bd80      	pop	{r7, pc}

08001100 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800110c:	e048      	b.n	80011a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	0018      	movs	r0, r3
 8001116:	f000 f851 	bl	80011bc <I2C_IsAcknowledgeFailed>
 800111a:	1e03      	subs	r3, r0, #0
 800111c:	d001      	beq.n	8001122 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e046      	b.n	80011b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	2220      	movs	r2, #32
 800112a:	4013      	ands	r3, r2
 800112c:	2b20      	cmp	r3, #32
 800112e:	d11c      	bne.n	800116a <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2220      	movs	r2, #32
 8001136:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	491d      	ldr	r1, [pc, #116]	; (80011b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8001144:	400a      	ands	r2, r1
 8001146:	605a      	str	r2, [r3, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2241      	movs	r2, #65	; 0x41
 8001152:	2120      	movs	r1, #32
 8001154:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2242      	movs	r2, #66	; 0x42
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2240      	movs	r2, #64	; 0x40
 8001162:	2100      	movs	r1, #0
 8001164:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e022      	b.n	80011b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8001170:	f7ff f892 	bl	8000298 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	429a      	cmp	r2, r3
 800117e:	d20f      	bcs.n	80011a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001184:	2220      	movs	r2, #32
 8001186:	431a      	orrs	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2241      	movs	r2, #65	; 0x41
 8001190:	2120      	movs	r1, #32
 8001192:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2240      	movs	r2, #64	; 0x40
 8001198:	2100      	movs	r1, #0
 800119a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e007      	b.n	80011b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	2204      	movs	r2, #4
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d1af      	bne.n	800110e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b004      	add	sp, #16
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	fe00e800 	.word	0xfe00e800

080011bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2210      	movs	r2, #16
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d148      	bne.n	8001268 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011d6:	e01b      	b.n	8001210 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3301      	adds	r3, #1
 80011dc:	d018      	beq.n	8001210 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <I2C_IsAcknowledgeFailed+0x38>
 80011e4:	f7ff f858 	bl	8000298 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d20d      	bcs.n	8001210 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2241      	movs	r2, #65	; 0x41
 80011f8:	2120      	movs	r1, #32
 80011fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2242      	movs	r2, #66	; 0x42
 8001200:	2100      	movs	r1, #0
 8001202:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e02c      	b.n	800126a <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2220      	movs	r2, #32
 8001218:	4013      	ands	r3, r2
 800121a:	2b20      	cmp	r3, #32
 800121c:	d1dc      	bne.n	80011d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2210      	movs	r2, #16
 8001224:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2220      	movs	r2, #32
 800122c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff fe8f 	bl	8000f54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <I2C_IsAcknowledgeFailed+0xb8>)
 8001242:	400a      	ands	r2, r1
 8001244:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2204      	movs	r2, #4
 800124a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2241      	movs	r2, #65	; 0x41
 8001250:	2120      	movs	r1, #32
 8001252:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2242      	movs	r2, #66	; 0x42
 8001258:	2100      	movs	r1, #0
 800125a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	fe00e800 	.word	0xfe00e800

08001278 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	0008      	movs	r0, r1
 8001282:	0011      	movs	r1, r2
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	240a      	movs	r4, #10
 8001288:	193b      	adds	r3, r7, r4
 800128a:	1c02      	adds	r2, r0, #0
 800128c:	801a      	strh	r2, [r3, #0]
 800128e:	2009      	movs	r0, #9
 8001290:	183b      	adds	r3, r7, r0
 8001292:	1c0a      	adds	r2, r1, #0
 8001294:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <I2C_TransferConfig+0x68>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	059b      	lsls	r3, r3, #22
 80012b0:	0d9a      	lsrs	r2, r3, #22
 80012b2:	183b      	adds	r3, r7, r0
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	0419      	lsls	r1, r3, #16
 80012b8:	23ff      	movs	r3, #255	; 0xff
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	400b      	ands	r3, r1
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	4313      	orrs	r3, r2
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	605a      	str	r2, [r3, #4]
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b007      	add	sp, #28
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	fc009800 	.word	0xfc009800

080012e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2241      	movs	r2, #65	; 0x41
 80012f2:	5c9b      	ldrb	r3, [r3, r2]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d138      	bne.n	800136c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2240      	movs	r2, #64	; 0x40
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001304:	2302      	movs	r3, #2
 8001306:	e032      	b.n	800136e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	2101      	movs	r1, #1
 800130e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2241      	movs	r2, #65	; 0x41
 8001314:	2124      	movs	r1, #36	; 0x24
 8001316:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2101      	movs	r1, #1
 8001324:	438a      	bics	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4911      	ldr	r1, [pc, #68]	; (8001378 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001334:	400a      	ands	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6819      	ldr	r1, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2101      	movs	r1, #1
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2241      	movs	r2, #65	; 0x41
 800135c:	2120      	movs	r1, #32
 800135e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2240      	movs	r2, #64	; 0x40
 8001364:	2100      	movs	r1, #0
 8001366:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	e000      	b.n	800136e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800136c:	2302      	movs	r3, #2
  }
}
 800136e:	0018      	movs	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	b002      	add	sp, #8
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	ffffefff 	.word	0xffffefff

0800137c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2241      	movs	r2, #65	; 0x41
 800138e:	5c9b      	ldrb	r3, [r3, r2]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b20      	cmp	r3, #32
 8001394:	d139      	bne.n	800140a <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	5c9b      	ldrb	r3, [r3, r2]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e033      	b.n	800140c <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2240      	movs	r2, #64	; 0x40
 80013a8:	2101      	movs	r1, #1
 80013aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2241      	movs	r2, #65	; 0x41
 80013b0:	2124      	movs	r1, #36	; 0x24
 80013b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2101      	movs	r1, #1
 80013c0:	438a      	bics	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2241      	movs	r2, #65	; 0x41
 80013fa:	2120      	movs	r1, #32
 80013fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2240      	movs	r2, #64	; 0x40
 8001402:	2100      	movs	r1, #0
 8001404:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 800140a:	2302      	movs	r3, #2
  }
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}
 8001414:	fffff0ff 	.word	0xfffff0ff

08001418 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e0de      	b.n	80015f0 <HAL_PCD_Init+0x1d8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	23ea      	movs	r3, #234	; 0xea
 8001436:	33ff      	adds	r3, #255	; 0xff
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d108      	bne.n	8001452 <HAL_PCD_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	23f4      	movs	r3, #244	; 0xf4
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2100      	movs	r1, #0
 8001448:	54d1      	strb	r1, [r2, r3]
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0018      	movs	r0, r3
 800144e:	f006 fa43 	bl	80078d8 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	23ea      	movs	r3, #234	; 0xea
 8001456:	33ff      	adds	r3, #255	; 0xff
 8001458:	2103      	movs	r1, #3
 800145a:	54d1      	strb	r1, [r2, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	e043      	b.n	80014ea <HAL_PCD_Init+0xd2>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	2029      	movs	r0, #41	; 0x29
 8001468:	0013      	movs	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	18cb      	adds	r3, r1, r3
 8001472:	181b      	adds	r3, r3, r0
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	b2dc      	uxtb	r4, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	2028      	movs	r0, #40	; 0x28
 8001482:	0013      	movs	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	1a9b      	subs	r3, r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	18cb      	adds	r3, r1, r3
 800148c:	181b      	adds	r3, r3, r0
 800148e:	1c22      	adds	r2, r4, #0
 8001490:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	202b      	movs	r0, #43	; 0x2b
 8001498:	0013      	movs	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	18cb      	adds	r3, r1, r3
 80014a2:	181b      	adds	r3, r3, r0
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	0013      	movs	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	18cb      	adds	r3, r1, r3
 80014b6:	3334      	adds	r3, #52	; 0x34
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	0013      	movs	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	18cb      	adds	r3, r1, r3
 80014ca:	3338      	adds	r3, #56	; 0x38
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	0013      	movs	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	18cb      	adds	r3, r1, r3
 80014de:	333c      	adds	r3, #60	; 0x3c
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3b6      	bcc.n	8001462 <HAL_PCD_Init+0x4a>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	e04e      	b.n	8001598 <HAL_PCD_Init+0x180>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	230a      	movs	r3, #10
 8001500:	33ff      	adds	r3, #255	; 0xff
 8001502:	0019      	movs	r1, r3
 8001504:	0013      	movs	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	18c3      	adds	r3, r0, r3
 800150e:	185b      	adds	r3, r3, r1
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	b2dc      	uxtb	r4, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	2384      	movs	r3, #132	; 0x84
 800151e:	0059      	lsls	r1, r3, #1
 8001520:	0013      	movs	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	18c3      	adds	r3, r0, r3
 800152a:	185b      	adds	r3, r3, r1
 800152c:	1c22      	adds	r2, r4, #0
 800152e:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	230c      	movs	r3, #12
 8001536:	33ff      	adds	r3, #255	; 0xff
 8001538:	0019      	movs	r1, r3
 800153a:	0013      	movs	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	18c3      	adds	r3, r0, r3
 8001544:	185b      	adds	r3, r3, r1
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	238a      	movs	r3, #138	; 0x8a
 8001550:	0059      	lsls	r1, r3, #1
 8001552:	0013      	movs	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	18c3      	adds	r3, r0, r3
 800155c:	185b      	adds	r3, r3, r1
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	238c      	movs	r3, #140	; 0x8c
 8001568:	0059      	lsls	r1, r3, #1
 800156a:	0013      	movs	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	18c3      	adds	r3, r0, r3
 8001574:	185b      	adds	r3, r3, r1
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	238e      	movs	r3, #142	; 0x8e
 8001580:	0059      	lsls	r1, r3, #1
 8001582:	0013      	movs	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	1a9b      	subs	r3, r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	18c3      	adds	r3, r0, r3
 800158c:	185b      	adds	r3, r3, r1
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3ab      	bcc.n	80014fa <HAL_PCD_Init+0xe2>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2240      	movs	r2, #64	; 0x40
 80015a8:	2101      	movs	r1, #1
 80015aa:	5299      	strh	r1, [r3, r2]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	2100      	movs	r1, #0
 80015b4:	5299      	strh	r1, [r3, r2]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2244      	movs	r2, #68	; 0x44
 80015bc:	2100      	movs	r1, #0
 80015be:	5299      	strh	r1, [r3, r2]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2250      	movs	r2, #80	; 0x50
 80015c6:	2100      	movs	r1, #0
 80015c8:	5299      	strh	r1, [r3, r2]
  
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80015ca:	23bf      	movs	r3, #191	; 0xbf
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	b291      	uxth	r1, r2
 80015d8:	2240      	movs	r2, #64	; 0x40
 80015da:	5299      	strh	r1, [r3, r2]
  
  hpcd->USB_Address = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2224      	movs	r2, #36	; 0x24
 80015e0:	2100      	movs	r1, #0
 80015e2:	5499      	strb	r1, [r3, r2]
  hpcd->State= HAL_PCD_STATE_READY;
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	23ea      	movs	r3, #234	; 0xea
 80015e8:	33ff      	adds	r3, #255	; 0xff
 80015ea:	2101      	movs	r1, #1
 80015ec:	54d1      	strb	r1, [r2, r3]

 return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b005      	add	sp, #20
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2258      	movs	r2, #88	; 0x58
 8001606:	5a9b      	ldrh	r3, [r3, r2]
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4905      	ldr	r1, [pc, #20]	; (8001624 <HAL_PCD_Start+0x2c>)
 8001610:	430a      	orrs	r2, r1
 8001612:	b291      	uxth	r1, r2
 8001614:	2258      	movs	r2, #88	; 0x58
 8001616:	5299      	strh	r1, [r3, r2]
  
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	ffff8000 	.word	0xffff8000

08001628 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2244      	movs	r2, #68	; 0x44
 800163a:	5a9b      	ldrh	r3, [r3, r2]
 800163c:	b29b      	uxth	r3, r3
 800163e:	001a      	movs	r2, r3
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	401a      	ands	r2, r3
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	429a      	cmp	r2, r3
 800164c:	d103      	bne.n	8001656 <HAL_PCD_IRQHandler+0x2e>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	0018      	movs	r0, r3
 8001652:	f001 fc51 	bl	8002ef8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2244      	movs	r2, #68	; 0x44
 800165c:	5a9b      	ldrh	r3, [r3, r2]
 800165e:	b29b      	uxth	r3, r3
 8001660:	001a      	movs	r2, r3
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	401a      	ands	r2, r3
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	429a      	cmp	r2, r3
 800166e:	d114      	bne.n	800169a <HAL_PCD_IRQHandler+0x72>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2244      	movs	r2, #68	; 0x44
 8001676:	5a9b      	ldrh	r3, [r3, r2]
 8001678:	b29a      	uxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4977      	ldr	r1, [pc, #476]	; (800185c <HAL_PCD_IRQHandler+0x234>)
 8001680:	400a      	ands	r2, r1
 8001682:	b291      	uxth	r1, r2
 8001684:	2244      	movs	r2, #68	; 0x44
 8001686:	5299      	strh	r1, [r3, r2]
    HAL_PCD_ResetCallback(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	0018      	movs	r0, r3
 800168c:	f006 f9ad 	bl	80079ea <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2100      	movs	r1, #0
 8001694:	0018      	movs	r0, r3
 8001696:	f000 f8ef 	bl	8001878 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2244      	movs	r2, #68	; 0x44
 80016a0:	5a9b      	ldrh	r3, [r3, r2]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	001a      	movs	r2, r3
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	01db      	lsls	r3, r3, #7
 80016aa:	401a      	ands	r2, r3
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d10b      	bne.n	80016cc <HAL_PCD_IRQHandler+0xa4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2244      	movs	r2, #68	; 0x44
 80016ba:	5a9b      	ldrh	r3, [r3, r2]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4967      	ldr	r1, [pc, #412]	; (8001860 <HAL_PCD_IRQHandler+0x238>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	b291      	uxth	r1, r2
 80016c8:	2244      	movs	r2, #68	; 0x44
 80016ca:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2244      	movs	r2, #68	; 0x44
 80016d2:	5a9b      	ldrh	r3, [r3, r2]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	001a      	movs	r2, r3
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	019b      	lsls	r3, r3, #6
 80016dc:	401a      	ands	r2, r3
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	019b      	lsls	r3, r3, #6
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d10b      	bne.n	80016fe <HAL_PCD_IRQHandler+0xd6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2244      	movs	r2, #68	; 0x44
 80016ec:	5a9b      	ldrh	r3, [r3, r2]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	495b      	ldr	r1, [pc, #364]	; (8001864 <HAL_PCD_IRQHandler+0x23c>)
 80016f6:	400a      	ands	r2, r1
 80016f8:	b291      	uxth	r1, r2
 80016fa:	2244      	movs	r2, #68	; 0x44
 80016fc:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2244      	movs	r2, #68	; 0x44
 8001704:	5a9b      	ldrh	r3, [r3, r2]
 8001706:	b29b      	uxth	r3, r3
 8001708:	001a      	movs	r2, r3
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	015b      	lsls	r3, r3, #5
 800170e:	401a      	ands	r2, r3
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	429a      	cmp	r2, r3
 8001716:	d124      	bne.n	8001762 <HAL_PCD_IRQHandler+0x13a>
  {
    
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	5a9b      	ldrh	r3, [r3, r2]
 8001720:	b29a      	uxth	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2104      	movs	r1, #4
 8001728:	438a      	bics	r2, r1
 800172a:	b291      	uxth	r1, r2
 800172c:	2240      	movs	r2, #64	; 0x40
 800172e:	5299      	strh	r1, [r3, r2]

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8001730:	23bd      	movs	r3, #189	; 0xbd
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	b291      	uxth	r1, r2
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	5299      	strh	r1, [r3, r2]
    
    HAL_PCD_ResumeCallback(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	0018      	movs	r0, r3
 8001746:	f006 f991 	bl	8007a6c <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2244      	movs	r2, #68	; 0x44
 8001750:	5a9b      	ldrh	r3, [r3, r2]
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4943      	ldr	r1, [pc, #268]	; (8001868 <HAL_PCD_IRQHandler+0x240>)
 800175a:	400a      	ands	r2, r1
 800175c:	b291      	uxth	r1, r2
 800175e:	2244      	movs	r2, #68	; 0x44
 8001760:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2244      	movs	r2, #68	; 0x44
 8001768:	5a9b      	ldrh	r3, [r3, r2]
 800176a:	b29b      	uxth	r3, r3
 800176c:	001a      	movs	r2, r3
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	401a      	ands	r2, r3
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	429a      	cmp	r2, r3
 800177a:	d134      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x1be>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2244      	movs	r2, #68	; 0x44
 8001782:	5a9b      	ldrh	r3, [r3, r2]
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4938      	ldr	r1, [pc, #224]	; (800186c <HAL_PCD_IRQHandler+0x244>)
 800178c:	400a      	ands	r2, r1
 800178e:	b291      	uxth	r1, r2
 8001790:	2244      	movs	r2, #68	; 0x44
 8001792:	5299      	strh	r1, [r3, r2]
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	5a9b      	ldrh	r3, [r3, r2]
 800179c:	b29a      	uxth	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2108      	movs	r1, #8
 80017a4:	430a      	orrs	r2, r1
 80017a6:	b291      	uxth	r1, r2
 80017a8:	2240      	movs	r2, #64	; 0x40
 80017aa:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2240      	movs	r2, #64	; 0x40
 80017b2:	5a9b      	ldrh	r3, [r3, r2]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2104      	movs	r1, #4
 80017bc:	430a      	orrs	r2, r1
 80017be:	b291      	uxth	r1, r2
 80017c0:	2240      	movs	r2, #64	; 0x40
 80017c2:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2244      	movs	r2, #68	; 0x44
 80017ca:	5a9b      	ldrh	r3, [r3, r2]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	001a      	movs	r2, r3
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	015b      	lsls	r3, r3, #5
 80017d4:	401a      	ands	r2, r3
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	015b      	lsls	r3, r3, #5
 80017da:	429a      	cmp	r2, r3
 80017dc:	d003      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x1be>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f006 f927 	bl	8007a34 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2244      	movs	r2, #68	; 0x44
 80017ec:	5a9b      	ldrh	r3, [r3, r2]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	001a      	movs	r2, r3
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	401a      	ands	r2, r3
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d10f      	bne.n	8001820 <HAL_PCD_IRQHandler+0x1f8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2244      	movs	r2, #68	; 0x44
 8001806:	5a9b      	ldrh	r3, [r3, r2]
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4918      	ldr	r1, [pc, #96]	; (8001870 <HAL_PCD_IRQHandler+0x248>)
 8001810:	400a      	ands	r2, r1
 8001812:	b291      	uxth	r1, r2
 8001814:	2244      	movs	r2, #68	; 0x44
 8001816:	5299      	strh	r1, [r3, r2]
    HAL_PCD_SOFCallback(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	0018      	movs	r0, r3
 800181c:	f006 f8d6 	bl	80079cc <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2244      	movs	r2, #68	; 0x44
 8001826:	5a9b      	ldrh	r3, [r3, r2]
 8001828:	b29b      	uxth	r3, r3
 800182a:	001a      	movs	r2, r3
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	401a      	ands	r2, r3
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	429a      	cmp	r2, r3
 8001838:	d10b      	bne.n	8001852 <HAL_PCD_IRQHandler+0x22a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2244      	movs	r2, #68	; 0x44
 8001840:	5a9b      	ldrh	r3, [r3, r2]
 8001842:	b29a      	uxth	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	490a      	ldr	r1, [pc, #40]	; (8001874 <HAL_PCD_IRQHandler+0x24c>)
 800184a:	400a      	ands	r2, r1
 800184c:	b291      	uxth	r1, r2
 800184e:	2244      	movs	r2, #68	; 0x44
 8001850:	5299      	strh	r1, [r3, r2]
  }
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b004      	add	sp, #16
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	fffffbff 	.word	0xfffffbff
 8001860:	ffffbfff 	.word	0xffffbfff
 8001864:	ffffdfff 	.word	0xffffdfff
 8001868:	ffffefff 	.word	0xffffefff
 800186c:	fffff7ff 	.word	0xfffff7ff
 8001870:	fffffdff 	.word	0xfffffdff
 8001874:	fffffeff 	.word	0xfffffeff

08001878 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	000a      	movs	r2, r1
 8001882:	1cfb      	adds	r3, r7, #3
 8001884:	701a      	strb	r2, [r3, #0]
   __HAL_LOCK(hpcd); 
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	23f4      	movs	r3, #244	; 0xf4
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_PCD_SetAddress+0x1e>
 8001892:	2302      	movs	r3, #2
 8001894:	e019      	b.n	80018ca <HAL_PCD_SetAddress+0x52>
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	23f4      	movs	r3, #244	; 0xf4
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2101      	movs	r1, #1
 800189e:	54d1      	strb	r1, [r2, r3]

   if(address == 0U) 
 80018a0:	1cfb      	adds	r3, r7, #3
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <HAL_PCD_SetAddress+0x3c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	224c      	movs	r2, #76	; 0x4c
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	5299      	strh	r1, [r3, r2]
 80018b2:	e004      	b.n	80018be <HAL_PCD_SetAddress+0x46>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1cfa      	adds	r2, r7, #3
 80018b8:	2124      	movs	r1, #36	; 0x24
 80018ba:	7812      	ldrb	r2, [r2, #0]
 80018bc:	545a      	strb	r2, [r3, r1]
   }

  __HAL_UNLOCK(hpcd);   
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	23f4      	movs	r3, #244	; 0xf4
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2100      	movs	r1, #0
 80018c6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	000c      	movs	r4, r1
 80018de:	0010      	movs	r0, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	1cfb      	adds	r3, r7, #3
 80018e4:	1c22      	adds	r2, r4, #0
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	003b      	movs	r3, r7
 80018ea:	1c02      	adds	r2, r0, #0
 80018ec:	801a      	strh	r2, [r3, #0]
 80018ee:	1cbb      	adds	r3, r7, #2
 80018f0:	1c0a      	adds	r2, r1, #0
 80018f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018f4:	2311      	movs	r3, #17
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80018fc:	1cfb      	adds	r3, r7, #3
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b25b      	sxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	da0c      	bge.n	8001920 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001906:	1cfb      	adds	r3, r7, #3
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	227f      	movs	r2, #127	; 0x7f
 800190c:	401a      	ands	r2, r3
 800190e:	0013      	movs	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	3328      	adds	r3, #40	; 0x28
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	18d3      	adds	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e00c      	b.n	800193a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001920:	1cfb      	adds	r3, r7, #3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	227f      	movs	r2, #127	; 0x7f
 8001926:	401a      	ands	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	3309      	adds	r3, #9
 8001932:	33ff      	adds	r3, #255	; 0xff
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	18d3      	adds	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 800193a:	1cfb      	adds	r3, r7, #3
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	227f      	movs	r2, #127	; 0x7f
 8001940:	4013      	ands	r3, r2
 8001942:	b2da      	uxtb	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001948:	1cfb      	adds	r3, r7, #3
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b25b      	sxtb	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	09db      	lsrs	r3, r3, #7
 8001952:	b2db      	uxtb	r3, r3
 8001954:	001a      	movs	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800195a:	003b      	movs	r3, r7
 800195c:	881a      	ldrh	r2, [r3, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	1cba      	adds	r2, r7, #2
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	23f4      	movs	r3, #244	; 0xf4
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_PCD_EP_Open+0xa6>
 8001976:	2302      	movs	r3, #2
 8001978:	e332      	b.n	8001fe0 <HAL_PCD_EP_Open+0x70c>
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	23f4      	movs	r3, #244	; 0xf4
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2101      	movs	r1, #1
 8001982:	54d1      	strb	r1, [r2, r3]

  /* initialize Endpoint */
  switch (ep->type)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	78db      	ldrb	r3, [r3, #3]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d050      	beq.n	8001a2e <HAL_PCD_EP_Open+0x15a>
 800198c:	dc02      	bgt.n	8001994 <HAL_PCD_EP_Open+0xc0>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_PCD_EP_Open+0xca>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
    break;
  default:
    break;
 8001992:	e064      	b.n	8001a5e <HAL_PCD_EP_Open+0x18a>
  switch (ep->type)
 8001994:	2b02      	cmp	r3, #2
 8001996:	d01a      	beq.n	80019ce <HAL_PCD_EP_Open+0xfa>
 8001998:	2b03      	cmp	r3, #3
 800199a:	d030      	beq.n	80019fe <HAL_PCD_EP_Open+0x12a>
    break;
 800199c:	e05f      	b.n	8001a5e <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	001a      	movs	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	18d3      	adds	r3, r2, r3
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4abf      	ldr	r2, [pc, #764]	; (8001cb0 <HAL_PCD_EP_Open+0x3dc>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0019      	movs	r1, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	18cb      	adds	r3, r1, r3
 80019c4:	49bb      	ldr	r1, [pc, #748]	; (8001cb4 <HAL_PCD_EP_Open+0x3e0>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	b292      	uxth	r2, r2
 80019ca:	801a      	strh	r2, [r3, #0]
    break;
 80019cc:	e047      	b.n	8001a5e <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	001a      	movs	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	18d3      	adds	r3, r2, r3
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4ab3      	ldr	r2, [pc, #716]	; (8001cb0 <HAL_PCD_EP_Open+0x3dc>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	0019      	movs	r1, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	18cb      	adds	r3, r1, r3
 80019f4:	49b0      	ldr	r1, [pc, #704]	; (8001cb8 <HAL_PCD_EP_Open+0x3e4>)
 80019f6:	430a      	orrs	r2, r1
 80019f8:	b292      	uxth	r2, r2
 80019fa:	801a      	strh	r2, [r3, #0]
    break;
 80019fc:	e02f      	b.n	8001a5e <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	001a      	movs	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	18d3      	adds	r3, r2, r3
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4aa7      	ldr	r2, [pc, #668]	; (8001cb0 <HAL_PCD_EP_Open+0x3dc>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	18cb      	adds	r3, r1, r3
 8001a24:	49a5      	ldr	r1, [pc, #660]	; (8001cbc <HAL_PCD_EP_Open+0x3e8>)
 8001a26:	430a      	orrs	r2, r1
 8001a28:	b292      	uxth	r2, r2
 8001a2a:	801a      	strh	r2, [r3, #0]
    break;
 8001a2c:	e017      	b.n	8001a5e <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	001a      	movs	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	18d3      	adds	r3, r2, r3
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4a9b      	ldr	r2, [pc, #620]	; (8001cb0 <HAL_PCD_EP_Open+0x3dc>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	18cb      	adds	r3, r1, r3
 8001a54:	499a      	ldr	r1, [pc, #616]	; (8001cc0 <HAL_PCD_EP_Open+0x3ec>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	b292      	uxth	r2, r2
 8001a5a:	801a      	strh	r2, [r3, #0]
    break;
 8001a5c:	46c0      	nop			; (mov r8, r8)
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	001a      	movs	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	18d3      	adds	r3, r2, r3
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4a94      	ldr	r2, [pc, #592]	; (8001cc4 <HAL_PCD_EP_Open+0x3f0>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0019      	movs	r1, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	18cb      	adds	r3, r1, r3
 8001a8e:	498a      	ldr	r1, [pc, #552]	; (8001cb8 <HAL_PCD_EP_Open+0x3e4>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	b292      	uxth	r2, r2
 8001a94:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	7a9b      	ldrb	r3, [r3, #10]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d000      	beq.n	8001aa0 <HAL_PCD_EP_Open+0x1cc>
 8001a9e:	e121      	b.n	8001ce4 <HAL_PCD_EP_Open+0x410>
  {
    if (ep->is_in)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d059      	beq.n	8001b5c <HAL_PCD_EP_Open+0x288>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	889b      	ldrh	r3, [r3, #4]
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	b299      	uxth	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2250      	movs	r2, #80	; 0x50
 8001ab6:	5a9b      	ldrh	r3, [r3, r2]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	001a      	movs	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	18d3      	adds	r3, r2, r3
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	18d3      	adds	r3, r2, r3
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	00d2      	lsls	r2, r2, #3
 8001ad0:	4694      	mov	ip, r2
 8001ad2:	4463      	add	r3, ip
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	1c0b      	adds	r3, r1, #0
 8001ad8:	18db      	adds	r3, r3, r3
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	18d3      	adds	r3, r2, r3
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	001a      	movs	r2, r3
 8001af2:	2340      	movs	r3, #64	; 0x40
 8001af4:	4013      	ands	r3, r2
 8001af6:	d016      	beq.n	8001b26 <HAL_PCD_EP_Open+0x252>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	001a      	movs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	18d3      	adds	r3, r2, r3
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_PCD_EP_Open+0x3f0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0019      	movs	r1, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	18cb      	adds	r3, r1, r3
 8001b1e:	496a      	ldr	r1, [pc, #424]	; (8001cc8 <HAL_PCD_EP_Open+0x3f4>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	b292      	uxth	r2, r2
 8001b24:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	18d3      	adds	r3, r2, r3
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4a64      	ldr	r2, [pc, #400]	; (8001ccc <HAL_PCD_EP_Open+0x3f8>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	b29c      	uxth	r4, r3
 8001b3e:	2320      	movs	r3, #32
 8001b40:	4063      	eors	r3, r4
 8001b42:	b29c      	uxth	r4, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	001a      	movs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	18d3      	adds	r3, r2, r3
 8001b52:	4a59      	ldr	r2, [pc, #356]	; (8001cb8 <HAL_PCD_EP_Open+0x3e4>)
 8001b54:	4322      	orrs	r2, r4
 8001b56:	b292      	uxth	r2, r2
 8001b58:	801a      	strh	r2, [r3, #0]
 8001b5a:	e239      	b.n	8001fd0 <HAL_PCD_EP_Open+0x6fc>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	889b      	ldrh	r3, [r3, #4]
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	b299      	uxth	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2250      	movs	r2, #80	; 0x50
 8001b6a:	5a9b      	ldrh	r3, [r3, r2]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	001a      	movs	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	18d3      	adds	r3, r2, r3
 8001b78:	001a      	movs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	18d3      	adds	r3, r2, r3
 8001b80:	4a53      	ldr	r2, [pc, #332]	; (8001cd0 <HAL_PCD_EP_Open+0x3fc>)
 8001b82:	4694      	mov	ip, r2
 8001b84:	4463      	add	r3, ip
 8001b86:	001a      	movs	r2, r3
 8001b88:	1c0b      	adds	r3, r1, #0
 8001b8a:	18db      	adds	r3, r3, r3
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2250      	movs	r2, #80	; 0x50
 8001b96:	5a9b      	ldrh	r3, [r3, r2]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	18d3      	adds	r3, r2, r3
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	18d3      	adds	r3, r2, r3
 8001bac:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <HAL_PCD_EP_Open+0x400>)
 8001bae:	4694      	mov	ip, r2
 8001bb0:	4463      	add	r3, ip
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8001bba:	d91b      	bls.n	8001bf4 <HAL_PCD_EP_Open+0x320>
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	095a      	lsrs	r2, r3, #5
 8001bc2:	2312      	movs	r3, #18
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	801a      	strh	r2, [r3, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	221f      	movs	r2, #31
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d105      	bne.n	8001bde <HAL_PCD_EP_Open+0x30a>
 8001bd2:	2112      	movs	r1, #18
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	881a      	ldrh	r2, [r3, #0]
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	801a      	strh	r2, [r3, #0]
 8001bde:	2312      	movs	r3, #18
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	029b      	lsls	r3, r3, #10
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4a3b      	ldr	r2, [pc, #236]	; (8001cd8 <HAL_PCD_EP_Open+0x404>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	e017      	b.n	8001c24 <HAL_PCD_EP_Open+0x350>
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	085a      	lsrs	r2, r3, #1
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	801a      	strh	r2, [r3, #0]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d005      	beq.n	8001c16 <HAL_PCD_EP_Open+0x342>
 8001c0a:	2112      	movs	r1, #18
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	3201      	adds	r2, #1
 8001c14:	801a      	strh	r2, [r3, #0]
 8001c16:	2312      	movs	r3, #18
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	001a      	movs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	18d3      	adds	r3, r2, r3
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	001a      	movs	r2, r3
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d016      	beq.n	8001c6e <HAL_PCD_EP_Open+0x39a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	001a      	movs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	18d3      	adds	r3, r2, r3
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <HAL_PCD_EP_Open+0x3f0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	18cb      	adds	r3, r1, r3
 8001c66:	491d      	ldr	r1, [pc, #116]	; (8001cdc <HAL_PCD_EP_Open+0x408>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	001a      	movs	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	18d3      	adds	r3, r2, r3
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_PCD_EP_Open+0x40c>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	b29c      	uxth	r4, r3
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4063      	eors	r3, r4
 8001c8c:	b29c      	uxth	r4, r3
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	019b      	lsls	r3, r3, #6
 8001c92:	4063      	eors	r3, r4
 8001c94:	b29c      	uxth	r4, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	18d3      	adds	r3, r2, r3
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_PCD_EP_Open+0x3e4>)
 8001ca6:	4322      	orrs	r2, r4
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	e190      	b.n	8001fd0 <HAL_PCD_EP_Open+0x6fc>
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	0000090f 	.word	0x0000090f
 8001cb4:	ffff8280 	.word	0xffff8280
 8001cb8:	ffff8080 	.word	0xffff8080
 8001cbc:	ffff8680 	.word	0xffff8680
 8001cc0:	ffff8480 	.word	0xffff8480
 8001cc4:	00000f0f 	.word	0x00000f0f
 8001cc8:	ffff80c0 	.word	0xffff80c0
 8001ccc:	ffff8fbf 	.word	0xffff8fbf
 8001cd0:	00000404 	.word	0x00000404
 8001cd4:	00000406 	.word	0x00000406
 8001cd8:	ffff8000 	.word	0xffff8000
 8001cdc:	ffffc080 	.word	0xffffc080
 8001ce0:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	001a      	movs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	18d3      	adds	r3, r2, r3
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4abc      	ldr	r2, [pc, #752]	; (8001fe8 <HAL_PCD_EP_Open+0x714>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0019      	movs	r1, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	18cb      	adds	r3, r1, r3
 8001d0a:	49b8      	ldr	r1, [pc, #736]	; (8001fec <HAL_PCD_EP_Open+0x718>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	801a      	strh	r2, [r3, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	88db      	ldrh	r3, [r3, #6]
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	b299      	uxth	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2250      	movs	r2, #80	; 0x50
 8001d20:	5a9b      	ldrh	r3, [r3, r2]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	001a      	movs	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	18d3      	adds	r3, r2, r3
 8001d2e:	001a      	movs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	18d3      	adds	r3, r2, r3
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	00d2      	lsls	r2, r2, #3
 8001d3a:	4694      	mov	ip, r2
 8001d3c:	4463      	add	r3, ip
 8001d3e:	001a      	movs	r2, r3
 8001d40:	1c0b      	adds	r3, r1, #0
 8001d42:	18db      	adds	r3, r3, r3
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	8013      	strh	r3, [r2, #0]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	891b      	ldrh	r3, [r3, #8]
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2250      	movs	r2, #80	; 0x50
 8001d56:	5a9b      	ldrh	r3, [r3, r2]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	18d3      	adds	r3, r2, r3
 8001d64:	001a      	movs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	18d3      	adds	r3, r2, r3
 8001d6c:	4aa0      	ldr	r2, [pc, #640]	; (8001ff0 <HAL_PCD_EP_Open+0x71c>)
 8001d6e:	4694      	mov	ip, r2
 8001d70:	4463      	add	r3, ip
 8001d72:	001a      	movs	r2, r3
 8001d74:	1c0b      	adds	r3, r1, #0
 8001d76:	18db      	adds	r3, r3, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d000      	beq.n	8001d86 <HAL_PCD_EP_Open+0x4b2>
 8001d84:	e096      	b.n	8001eb4 <HAL_PCD_EP_Open+0x5e0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	001a      	movs	r2, r3
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	01db      	lsls	r3, r3, #7
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d016      	beq.n	8001dd0 <HAL_PCD_EP_Open+0x4fc>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	001a      	movs	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4a8f      	ldr	r2, [pc, #572]	; (8001ff4 <HAL_PCD_EP_Open+0x720>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	18cb      	adds	r3, r1, r3
 8001dc8:	498b      	ldr	r1, [pc, #556]	; (8001ff8 <HAL_PCD_EP_Open+0x724>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	18d3      	adds	r3, r2, r3
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	001a      	movs	r2, r3
 8001de4:	2340      	movs	r3, #64	; 0x40
 8001de6:	4013      	ands	r3, r2
 8001de8:	d016      	beq.n	8001e18 <HAL_PCD_EP_Open+0x544>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	001a      	movs	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	18d3      	adds	r3, r2, r3
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4a7d      	ldr	r2, [pc, #500]	; (8001ff4 <HAL_PCD_EP_Open+0x720>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0019      	movs	r1, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	18cb      	adds	r3, r1, r3
 8001e10:	497a      	ldr	r1, [pc, #488]	; (8001ffc <HAL_PCD_EP_Open+0x728>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	b292      	uxth	r2, r2
 8001e16:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	18d3      	adds	r3, r2, r3
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <HAL_PCD_EP_Open+0x720>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0019      	movs	r1, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	18cb      	adds	r3, r1, r3
 8001e3e:	496f      	ldr	r1, [pc, #444]	; (8001ffc <HAL_PCD_EP_Open+0x728>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	b292      	uxth	r2, r2
 8001e44:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	18d3      	adds	r3, r2, r3
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_PCD_EP_Open+0x72c>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	b29c      	uxth	r4, r3
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	4063      	eors	r3, r4
 8001e64:	b29c      	uxth	r4, r3
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	019b      	lsls	r3, r3, #6
 8001e6a:	4063      	eors	r3, r4
 8001e6c:	b29c      	uxth	r4, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	001a      	movs	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	18d3      	adds	r3, r2, r3
 8001e7c:	4a61      	ldr	r2, [pc, #388]	; (8002004 <HAL_PCD_EP_Open+0x730>)
 8001e7e:	4322      	orrs	r2, r4
 8001e80:	b292      	uxth	r2, r2
 8001e82:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	001a      	movs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	18d3      	adds	r3, r2, r3
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4a5c      	ldr	r2, [pc, #368]	; (8002008 <HAL_PCD_EP_Open+0x734>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	b29c      	uxth	r4, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	18d3      	adds	r3, r2, r3
 8001eaa:	4a56      	ldr	r2, [pc, #344]	; (8002004 <HAL_PCD_EP_Open+0x730>)
 8001eac:	4322      	orrs	r2, r4
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	e08d      	b.n	8001fd0 <HAL_PCD_EP_Open+0x6fc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	001a      	movs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d016      	beq.n	8001efe <HAL_PCD_EP_Open+0x62a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	18d3      	adds	r3, r2, r3
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4a44      	ldr	r2, [pc, #272]	; (8001ff4 <HAL_PCD_EP_Open+0x720>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0019      	movs	r1, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	18cb      	adds	r3, r1, r3
 8001ef6:	4940      	ldr	r1, [pc, #256]	; (8001ff8 <HAL_PCD_EP_Open+0x724>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	b292      	uxth	r2, r2
 8001efc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	001a      	movs	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	18d3      	adds	r3, r2, r3
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	001a      	movs	r2, r3
 8001f12:	2340      	movs	r3, #64	; 0x40
 8001f14:	4013      	ands	r3, r2
 8001f16:	d016      	beq.n	8001f46 <HAL_PCD_EP_Open+0x672>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	18d3      	adds	r3, r2, r3
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <HAL_PCD_EP_Open+0x720>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0019      	movs	r1, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	18cb      	adds	r3, r1, r3
 8001f3e:	492f      	ldr	r1, [pc, #188]	; (8001ffc <HAL_PCD_EP_Open+0x728>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	b292      	uxth	r2, r2
 8001f44:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	18d3      	adds	r3, r2, r3
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <HAL_PCD_EP_Open+0x720>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0019      	movs	r1, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	18cb      	adds	r3, r1, r3
 8001f6c:	4922      	ldr	r1, [pc, #136]	; (8001ff8 <HAL_PCD_EP_Open+0x724>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	b292      	uxth	r2, r2
 8001f72:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	001a      	movs	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	18d3      	adds	r3, r2, r3
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4a20      	ldr	r2, [pc, #128]	; (8002008 <HAL_PCD_EP_Open+0x734>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b29c      	uxth	r4, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	001a      	movs	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	18d3      	adds	r3, r2, r3
 8001f9a:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <HAL_PCD_EP_Open+0x730>)
 8001f9c:	4322      	orrs	r2, r4
 8001f9e:	b292      	uxth	r2, r2
 8001fa0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	18d3      	adds	r3, r2, r3
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <HAL_PCD_EP_Open+0x72c>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	b29c      	uxth	r4, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	18d3      	adds	r3, r2, r3
 8001fc8:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <HAL_PCD_EP_Open+0x730>)
 8001fca:	4322      	orrs	r2, r4
 8001fcc:	b292      	uxth	r2, r2
 8001fce:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	23f4      	movs	r3, #244	; 0xf4
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	54d1      	strb	r1, [r2, r3]
  return ret;
 8001fda:	2311      	movs	r3, #17
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	781b      	ldrb	r3, [r3, #0]
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b007      	add	sp, #28
 8001fe6:	bd90      	pop	{r4, r7, pc}
 8001fe8:	00000e0f 	.word	0x00000e0f
 8001fec:	ffff8180 	.word	0xffff8180
 8001ff0:	00000404 	.word	0x00000404
 8001ff4:	00000f0f 	.word	0x00000f0f
 8001ff8:	ffffc080 	.word	0xffffc080
 8001ffc:	ffff80c0 	.word	0xffff80c0
 8002000:	ffffbf8f 	.word	0xffffbf8f
 8002004:	ffff8080 	.word	0xffff8080
 8002008:	ffff8fbf 	.word	0xffff8fbf

0800200c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	000a      	movs	r2, r1
 8002016:	1cfb      	adds	r3, r7, #3
 8002018:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800201a:	1cfb      	adds	r3, r7, #3
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b25b      	sxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	da0c      	bge.n	800203e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002024:	1cfb      	adds	r3, r7, #3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	227f      	movs	r2, #127	; 0x7f
 800202a:	401a      	ands	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3328      	adds	r3, #40	; 0x28
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	18d3      	adds	r3, r2, r3
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e00c      	b.n	8002058 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800203e:	1cfb      	adds	r3, r7, #3
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	227f      	movs	r2, #127	; 0x7f
 8002044:	401a      	ands	r2, r3
 8002046:	0013      	movs	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3309      	adds	r3, #9
 8002050:	33ff      	adds	r3, #255	; 0xff
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	18d3      	adds	r3, r2, r3
 8002056:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002058:	1cfb      	adds	r3, r7, #3
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	227f      	movs	r2, #127	; 0x7f
 800205e:	4013      	ands	r3, r2
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002066:	1cfb      	adds	r3, r7, #3
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b25b      	sxtb	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	09db      	lsrs	r3, r3, #7
 8002070:	b2db      	uxtb	r3, r3
 8002072:	001a      	movs	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	23f4      	movs	r3, #244	; 0xf4
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_EP_Close+0x7c>
 8002084:	2302      	movs	r3, #2
 8002086:	e1ae      	b.n	80023e6 <HAL_PCD_EP_Close+0x3da>
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	23f4      	movs	r3, #244	; 0xf4
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2101      	movs	r1, #1
 8002090:	54d1      	strb	r1, [r2, r3]

  if (ep->doublebuffer == 0U) 
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	7a9b      	ldrb	r3, [r3, #10]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d000      	beq.n	800209c <HAL_PCD_EP_Close+0x90>
 800209a:	e07c      	b.n	8002196 <HAL_PCD_EP_Close+0x18a>
  {
    if (ep->is_in)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d03b      	beq.n	800211c <HAL_PCD_EP_Close+0x110>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	001a      	movs	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	18d3      	adds	r3, r2, r3
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	001a      	movs	r2, r3
 80020b8:	2340      	movs	r3, #64	; 0x40
 80020ba:	4013      	ands	r3, r2
 80020bc:	d016      	beq.n	80020ec <HAL_PCD_EP_Close+0xe0>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	001a      	movs	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	18d3      	adds	r3, r2, r3
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4ac7      	ldr	r2, [pc, #796]	; (80023f0 <HAL_PCD_EP_Close+0x3e4>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0019      	movs	r1, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	18cb      	adds	r3, r1, r3
 80020e4:	49c3      	ldr	r1, [pc, #780]	; (80023f4 <HAL_PCD_EP_Close+0x3e8>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	b292      	uxth	r2, r2
 80020ea:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	18d3      	adds	r3, r2, r3
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4abe      	ldr	r2, [pc, #760]	; (80023f8 <HAL_PCD_EP_Close+0x3ec>)
 8002100:	4013      	ands	r3, r2
 8002102:	b29c      	uxth	r4, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	001a      	movs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	18d3      	adds	r3, r2, r3
 8002112:	4aba      	ldr	r2, [pc, #744]	; (80023fc <HAL_PCD_EP_Close+0x3f0>)
 8002114:	4322      	orrs	r2, r4
 8002116:	b292      	uxth	r2, r2
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	e15e      	b.n	80023da <HAL_PCD_EP_Close+0x3ce>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	001a      	movs	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	18d3      	adds	r3, r2, r3
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	001a      	movs	r2, r3
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	01db      	lsls	r3, r3, #7
 8002134:	4013      	ands	r3, r2
 8002136:	d016      	beq.n	8002166 <HAL_PCD_EP_Close+0x15a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	001a      	movs	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	18d3      	adds	r3, r2, r3
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	4aa9      	ldr	r2, [pc, #676]	; (80023f0 <HAL_PCD_EP_Close+0x3e4>)
 800214c:	4013      	ands	r3, r2
 800214e:	b29a      	uxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0019      	movs	r1, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	18cb      	adds	r3, r1, r3
 800215e:	49a8      	ldr	r1, [pc, #672]	; (8002400 <HAL_PCD_EP_Close+0x3f4>)
 8002160:	430a      	orrs	r2, r1
 8002162:	b292      	uxth	r2, r2
 8002164:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	001a      	movs	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	18d3      	adds	r3, r2, r3
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	4aa2      	ldr	r2, [pc, #648]	; (8002404 <HAL_PCD_EP_Close+0x3f8>)
 800217a:	4013      	ands	r3, r2
 800217c:	b29c      	uxth	r4, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	001a      	movs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	18d3      	adds	r3, r2, r3
 800218c:	4a9b      	ldr	r2, [pc, #620]	; (80023fc <HAL_PCD_EP_Close+0x3f0>)
 800218e:	4322      	orrs	r2, r4
 8002190:	b292      	uxth	r2, r2
 8002192:	801a      	strh	r2, [r3, #0]
 8002194:	e121      	b.n	80023da <HAL_PCD_EP_Close+0x3ce>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	785b      	ldrb	r3, [r3, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d000      	beq.n	80021a0 <HAL_PCD_EP_Close+0x194>
 800219e:	e08e      	b.n	80022be <HAL_PCD_EP_Close+0x2b2>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	001a      	movs	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	18d3      	adds	r3, r2, r3
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	001a      	movs	r2, r3
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	01db      	lsls	r3, r3, #7
 80021b8:	4013      	ands	r3, r2
 80021ba:	d016      	beq.n	80021ea <HAL_PCD_EP_Close+0x1de>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	001a      	movs	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	18d3      	adds	r3, r2, r3
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4a88      	ldr	r2, [pc, #544]	; (80023f0 <HAL_PCD_EP_Close+0x3e4>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0019      	movs	r1, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	18cb      	adds	r3, r1, r3
 80021e2:	4987      	ldr	r1, [pc, #540]	; (8002400 <HAL_PCD_EP_Close+0x3f4>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	b292      	uxth	r2, r2
 80021e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	001a      	movs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	18d3      	adds	r3, r2, r3
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	001a      	movs	r2, r3
 80021fe:	2340      	movs	r3, #64	; 0x40
 8002200:	4013      	ands	r3, r2
 8002202:	d016      	beq.n	8002232 <HAL_PCD_EP_Close+0x226>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	001a      	movs	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	18d3      	adds	r3, r2, r3
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	4a76      	ldr	r2, [pc, #472]	; (80023f0 <HAL_PCD_EP_Close+0x3e4>)
 8002218:	4013      	ands	r3, r2
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0019      	movs	r1, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	18cb      	adds	r3, r1, r3
 800222a:	4972      	ldr	r1, [pc, #456]	; (80023f4 <HAL_PCD_EP_Close+0x3e8>)
 800222c:	430a      	orrs	r2, r1
 800222e:	b292      	uxth	r2, r2
 8002230:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	001a      	movs	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	18d3      	adds	r3, r2, r3
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	4a6a      	ldr	r2, [pc, #424]	; (80023f0 <HAL_PCD_EP_Close+0x3e4>)
 8002246:	4013      	ands	r3, r2
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0019      	movs	r1, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	18cb      	adds	r3, r1, r3
 8002258:	4966      	ldr	r1, [pc, #408]	; (80023f4 <HAL_PCD_EP_Close+0x3e8>)
 800225a:	430a      	orrs	r2, r1
 800225c:	b292      	uxth	r2, r2
 800225e:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	001a      	movs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	18d3      	adds	r3, r2, r3
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4a64      	ldr	r2, [pc, #400]	; (8002404 <HAL_PCD_EP_Close+0x3f8>)
 8002274:	4013      	ands	r3, r2
 8002276:	b29c      	uxth	r4, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	001a      	movs	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	4a5d      	ldr	r2, [pc, #372]	; (80023fc <HAL_PCD_EP_Close+0x3f0>)
 8002288:	4322      	orrs	r2, r4
 800228a:	b292      	uxth	r2, r2
 800228c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	001a      	movs	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	18d3      	adds	r3, r2, r3
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4a55      	ldr	r2, [pc, #340]	; (80023f8 <HAL_PCD_EP_Close+0x3ec>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	b29c      	uxth	r4, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	001a      	movs	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	18d3      	adds	r3, r2, r3
 80022b4:	4a51      	ldr	r2, [pc, #324]	; (80023fc <HAL_PCD_EP_Close+0x3f0>)
 80022b6:	4322      	orrs	r2, r4
 80022b8:	b292      	uxth	r2, r2
 80022ba:	801a      	strh	r2, [r3, #0]
 80022bc:	e08d      	b.n	80023da <HAL_PCD_EP_Close+0x3ce>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	001a      	movs	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	18d3      	adds	r3, r2, r3
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	001a      	movs	r2, r3
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	01db      	lsls	r3, r3, #7
 80022d6:	4013      	ands	r3, r2
 80022d8:	d016      	beq.n	8002308 <HAL_PCD_EP_Close+0x2fc>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	001a      	movs	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_PCD_EP_Close+0x3e4>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0019      	movs	r1, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	18cb      	adds	r3, r1, r3
 8002300:	493f      	ldr	r1, [pc, #252]	; (8002400 <HAL_PCD_EP_Close+0x3f4>)
 8002302:	430a      	orrs	r2, r1
 8002304:	b292      	uxth	r2, r2
 8002306:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	001a      	movs	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	18d3      	adds	r3, r2, r3
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	001a      	movs	r2, r3
 800231c:	2340      	movs	r3, #64	; 0x40
 800231e:	4013      	ands	r3, r2
 8002320:	d016      	beq.n	8002350 <HAL_PCD_EP_Close+0x344>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	001a      	movs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	18d3      	adds	r3, r2, r3
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4a2e      	ldr	r2, [pc, #184]	; (80023f0 <HAL_PCD_EP_Close+0x3e4>)
 8002336:	4013      	ands	r3, r2
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0019      	movs	r1, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	18cb      	adds	r3, r1, r3
 8002348:	492a      	ldr	r1, [pc, #168]	; (80023f4 <HAL_PCD_EP_Close+0x3e8>)
 800234a:	430a      	orrs	r2, r1
 800234c:	b292      	uxth	r2, r2
 800234e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	001a      	movs	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	18d3      	adds	r3, r2, r3
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_PCD_EP_Close+0x3e4>)
 8002364:	4013      	ands	r3, r2
 8002366:	b29a      	uxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0019      	movs	r1, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	18cb      	adds	r3, r1, r3
 8002376:	4922      	ldr	r1, [pc, #136]	; (8002400 <HAL_PCD_EP_Close+0x3f4>)
 8002378:	430a      	orrs	r2, r1
 800237a:	b292      	uxth	r2, r2
 800237c:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	001a      	movs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	18d3      	adds	r3, r2, r3
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <HAL_PCD_EP_Close+0x3ec>)
 8002392:	4013      	ands	r3, r2
 8002394:	b29c      	uxth	r4, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	001a      	movs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <HAL_PCD_EP_Close+0x3f0>)
 80023a6:	4322      	orrs	r2, r4
 80023a8:	b292      	uxth	r2, r2
 80023aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	001a      	movs	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	18d3      	adds	r3, r2, r3
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_PCD_EP_Close+0x3f8>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	b29c      	uxth	r4, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	001a      	movs	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_PCD_EP_Close+0x3f0>)
 80023d4:	4322      	orrs	r2, r4
 80023d6:	b292      	uxth	r2, r2
 80023d8:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	23f4      	movs	r3, #244	; 0xf4
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2100      	movs	r1, #0
 80023e2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	0018      	movs	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b005      	add	sp, #20
 80023ec:	bd90      	pop	{r4, r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	00000f0f 	.word	0x00000f0f
 80023f4:	ffff80c0 	.word	0xffff80c0
 80023f8:	ffff8fbf 	.word	0xffff8fbf
 80023fc:	ffff8080 	.word	0xffff8080
 8002400:	ffffc080 	.word	0xffffc080
 8002404:	ffffbf8f 	.word	0xffffbf8f

08002408 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b08b      	sub	sp, #44	; 0x2c
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	200b      	movs	r0, #11
 8002416:	183b      	adds	r3, r7, r0
 8002418:	1c0a      	adds	r2, r1, #0
 800241a:	701a      	strb	r2, [r3, #0]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800241c:	0001      	movs	r1, r0
 800241e:	187b      	adds	r3, r7, r1
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	227f      	movs	r2, #127	; 0x7f
 8002424:	401a      	ands	r2, r3
 8002426:	0013      	movs	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	3309      	adds	r3, #9
 8002430:	33ff      	adds	r3, #255	; 0xff
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	18d3      	adds	r3, r2, r3
 8002436:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	2200      	movs	r2, #0
 800244e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002450:	187b      	adds	r3, r7, r1
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	227f      	movs	r2, #127	; 0x7f
 8002456:	4013      	ands	r3, r2
 8002458:	b2da      	uxtb	r2, r3
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	701a      	strb	r2, [r3, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	429a      	cmp	r2, r3
 8002468:	d909      	bls.n	800247e <HAL_PCD_EP_Receive+0x76>
  {
    len=ep->maxpacket;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	1ad2      	subs	r2, r2, r3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	615a      	str	r2, [r3, #20]
 800247c:	e005      	b.n	800248a <HAL_PCD_EP_Receive+0x82>
  }
  else
  {
    len=ep->xfer_len;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	7a9b      	ldrb	r3, [r3, #10]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d145      	bne.n	800251e <HAL_PCD_EP_Receive+0x116>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2250      	movs	r2, #80	; 0x50
 8002498:	5a9b      	ldrh	r3, [r3, r2]
 800249a:	b29b      	uxth	r3, r3
 800249c:	001a      	movs	r2, r3
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	18d3      	adds	r3, r2, r3
 80024a6:	001a      	movs	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	18d3      	adds	r3, r2, r3
 80024ae:	4a90      	ldr	r2, [pc, #576]	; (80026f0 <HAL_PCD_EP_Receive+0x2e8>)
 80024b0:	4694      	mov	ip, r2
 80024b2:	4463      	add	r3, ip
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b3e      	cmp	r3, #62	; 0x3e
 80024ba:	d919      	bls.n	80024f0 <HAL_PCD_EP_Receive+0xe8>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	095a      	lsrs	r2, r3, #5
 80024c0:	2326      	movs	r3, #38	; 0x26
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	221f      	movs	r2, #31
 80024ca:	4013      	ands	r3, r2
 80024cc:	d105      	bne.n	80024da <HAL_PCD_EP_Receive+0xd2>
 80024ce:	2126      	movs	r1, #38	; 0x26
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	881a      	ldrh	r2, [r3, #0]
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	3a01      	subs	r2, #1
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	2326      	movs	r3, #38	; 0x26
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	029b      	lsls	r3, r3, #10
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4a83      	ldr	r2, [pc, #524]	; (80026f4 <HAL_PCD_EP_Receive+0x2ec>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e0da      	b.n	80026a6 <HAL_PCD_EP_Receive+0x29e>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	085a      	lsrs	r2, r3, #1
 80024f4:	2326      	movs	r3, #38	; 0x26
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	801a      	strh	r2, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	d005      	beq.n	800250e <HAL_PCD_EP_Receive+0x106>
 8002502:	2126      	movs	r1, #38	; 0x26
 8002504:	187b      	adds	r3, r7, r1
 8002506:	881a      	ldrh	r2, [r3, #0]
 8002508:	187b      	adds	r3, r7, r1
 800250a:	3201      	adds	r2, #1
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	2326      	movs	r3, #38	; 0x26
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	b29a      	uxth	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	e0c3      	b.n	80026a6 <HAL_PCD_EP_Receive+0x29e>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d145      	bne.n	80025b2 <HAL_PCD_EP_Receive+0x1aa>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2250      	movs	r2, #80	; 0x50
 800252c:	5a9b      	ldrh	r3, [r3, r2]
 800252e:	b29b      	uxth	r3, r3
 8002530:	001a      	movs	r2, r3
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	18d3      	adds	r3, r2, r3
 800253a:	001a      	movs	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	18d3      	adds	r3, r2, r3
 8002542:	4a6d      	ldr	r2, [pc, #436]	; (80026f8 <HAL_PCD_EP_Receive+0x2f0>)
 8002544:	4694      	mov	ip, r2
 8002546:	4463      	add	r3, ip
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b3e      	cmp	r3, #62	; 0x3e
 800254e:	d919      	bls.n	8002584 <HAL_PCD_EP_Receive+0x17c>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	095a      	lsrs	r2, r3, #5
 8002554:	2324      	movs	r3, #36	; 0x24
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	801a      	strh	r2, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	221f      	movs	r2, #31
 800255e:	4013      	ands	r3, r2
 8002560:	d105      	bne.n	800256e <HAL_PCD_EP_Receive+0x166>
 8002562:	2124      	movs	r1, #36	; 0x24
 8002564:	187b      	adds	r3, r7, r1
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	187b      	adds	r3, r7, r1
 800256a:	3a01      	subs	r2, #1
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	2324      	movs	r3, #36	; 0x24
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	b29b      	uxth	r3, r3
 8002578:	4a5e      	ldr	r2, [pc, #376]	; (80026f4 <HAL_PCD_EP_Receive+0x2ec>)
 800257a:	4313      	orrs	r3, r2
 800257c:	b29a      	uxth	r2, r3
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	e02e      	b.n	80025e2 <HAL_PCD_EP_Receive+0x1da>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	085a      	lsrs	r2, r3, #1
 8002588:	2324      	movs	r3, #36	; 0x24
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2201      	movs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	d005      	beq.n	80025a2 <HAL_PCD_EP_Receive+0x19a>
 8002596:	2124      	movs	r1, #36	; 0x24
 8002598:	187b      	adds	r3, r7, r1
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	187b      	adds	r3, r7, r1
 800259e:	3201      	adds	r2, #1
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	2324      	movs	r3, #36	; 0x24
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	801a      	strh	r2, [r3, #0]
 80025b0:	e017      	b.n	80025e2 <HAL_PCD_EP_Receive+0x1da>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d113      	bne.n	80025e2 <HAL_PCD_EP_Receive+0x1da>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2250      	movs	r2, #80	; 0x50
 80025c0:	5a9b      	ldrh	r3, [r3, r2]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	001a      	movs	r2, r3
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	001a      	movs	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	4a48      	ldr	r2, [pc, #288]	; (80026f8 <HAL_PCD_EP_Receive+0x2f0>)
 80025d8:	4694      	mov	ip, r2
 80025da:	4463      	add	r3, ip
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b292      	uxth	r2, r2
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d145      	bne.n	8002676 <HAL_PCD_EP_Receive+0x26e>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2250      	movs	r2, #80	; 0x50
 80025f0:	5a9b      	ldrh	r3, [r3, r2]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	001a      	movs	r2, r3
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	18d3      	adds	r3, r2, r3
 80025fe:	001a      	movs	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	18d3      	adds	r3, r2, r3
 8002606:	4a3a      	ldr	r2, [pc, #232]	; (80026f0 <HAL_PCD_EP_Receive+0x2e8>)
 8002608:	4694      	mov	ip, r2
 800260a:	4463      	add	r3, ip
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b3e      	cmp	r3, #62	; 0x3e
 8002612:	d919      	bls.n	8002648 <HAL_PCD_EP_Receive+0x240>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	095a      	lsrs	r2, r3, #5
 8002618:	2322      	movs	r3, #34	; 0x22
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	221f      	movs	r2, #31
 8002622:	4013      	ands	r3, r2
 8002624:	d105      	bne.n	8002632 <HAL_PCD_EP_Receive+0x22a>
 8002626:	2122      	movs	r1, #34	; 0x22
 8002628:	187b      	adds	r3, r7, r1
 800262a:	881a      	ldrh	r2, [r3, #0]
 800262c:	187b      	adds	r3, r7, r1
 800262e:	3a01      	subs	r2, #1
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	2322      	movs	r3, #34	; 0x22
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	029b      	lsls	r3, r3, #10
 800263a:	b29b      	uxth	r3, r3
 800263c:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <HAL_PCD_EP_Receive+0x2ec>)
 800263e:	4313      	orrs	r3, r2
 8002640:	b29a      	uxth	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	e02e      	b.n	80026a6 <HAL_PCD_EP_Receive+0x29e>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	085a      	lsrs	r2, r3, #1
 800264c:	2322      	movs	r3, #34	; 0x22
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	d005      	beq.n	8002666 <HAL_PCD_EP_Receive+0x25e>
 800265a:	2122      	movs	r1, #34	; 0x22
 800265c:	187b      	adds	r3, r7, r1
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	187b      	adds	r3, r7, r1
 8002662:	3201      	adds	r2, #1
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	2322      	movs	r3, #34	; 0x22
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	029b      	lsls	r3, r3, #10
 800266e:	b29a      	uxth	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	801a      	strh	r2, [r3, #0]
 8002674:	e017      	b.n	80026a6 <HAL_PCD_EP_Receive+0x29e>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d113      	bne.n	80026a6 <HAL_PCD_EP_Receive+0x29e>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2250      	movs	r2, #80	; 0x50
 8002684:	5a9b      	ldrh	r3, [r3, r2]
 8002686:	b29b      	uxth	r3, r3
 8002688:	001a      	movs	r2, r3
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	001a      	movs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	18d3      	adds	r3, r2, r3
 800269a:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <HAL_PCD_EP_Receive+0x2e8>)
 800269c:	4694      	mov	ip, r2
 800269e:	4463      	add	r3, ip
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b292      	uxth	r2, r2
 80026a4:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	001a      	movs	r2, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	18d3      	adds	r3, r2, r3
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_PCD_EP_Receive+0x2f4>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	b29c      	uxth	r4, r3
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	015b      	lsls	r3, r3, #5
 80026c2:	4063      	eors	r3, r4
 80026c4:	b29c      	uxth	r4, r3
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	019b      	lsls	r3, r3, #6
 80026ca:	4063      	eors	r3, r4
 80026cc:	b29c      	uxth	r4, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	001a      	movs	r2, r3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	18d3      	adds	r3, r2, r3
 80026dc:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_PCD_EP_Receive+0x2f8>)
 80026de:	4322      	orrs	r2, r4
 80026e0:	b292      	uxth	r2, r2
 80026e2:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b00b      	add	sp, #44	; 0x2c
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	00000406 	.word	0x00000406
 80026f4:	ffff8000 	.word	0xffff8000
 80026f8:	00000402 	.word	0x00000402
 80026fc:	ffffbf8f 	.word	0xffffbf8f
 8002700:	ffff8080 	.word	0xffff8080

08002704 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	000a      	movs	r2, r1
 800270e:	1cfb      	adds	r3, r7, #3
 8002710:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8002712:	1cfb      	adds	r3, r7, #3
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	227f      	movs	r2, #127	; 0x7f
 8002718:	401a      	ands	r2, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	2390      	movs	r3, #144	; 0x90
 800271e:	0059      	lsls	r1, r3, #1
 8002720:	0013      	movs	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	18c3      	adds	r3, r0, r3
 800272a:	185b      	adds	r3, r3, r1
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b08b      	sub	sp, #44	; 0x2c
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	200b      	movs	r0, #11
 8002746:	183b      	adds	r3, r7, r0
 8002748:	1c0a      	adds	r2, r1, #0
 800274a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 800274c:	2326      	movs	r3, #38	; 0x26
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	801a      	strh	r2, [r3, #0]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002754:	0001      	movs	r1, r0
 8002756:	187b      	adds	r3, r7, r1
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	227f      	movs	r2, #127	; 0x7f
 800275c:	401a      	ands	r2, r3
 800275e:	0013      	movs	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	3328      	adds	r3, #40	; 0x28
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	18d3      	adds	r3, r2, r3
 800276c:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2201      	movs	r2, #1
 8002784:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	227f      	movs	r2, #127	; 0x7f
 800278c:	4013      	ands	r3, r2
 800278e:	b2da      	uxtb	r2, r3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	701a      	strb	r2, [r3, #0]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d909      	bls.n	80027b4 <HAL_PCD_EP_Transmit+0x7c>
  {
    len=ep->maxpacket;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	1ad2      	subs	r2, r2, r3
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	615a      	str	r2, [r3, #20]
 80027b2:	e005      	b.n	80027c0 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {  
    len=ep->xfer_len;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	7a9b      	ldrb	r3, [r3, #10]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d11e      	bne.n	8002806 <HAL_PCD_EP_Transmit+0xce>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	6919      	ldr	r1, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	889a      	ldrh	r2, [r3, #4]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f000 fb02 	bl	8002de0 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2250      	movs	r2, #80	; 0x50
 80027e2:	5a9b      	ldrh	r3, [r3, r2]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	001a      	movs	r2, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	18d3      	adds	r3, r2, r3
 80027f0:	001a      	movs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	18d3      	adds	r3, r2, r3
 80027f8:	4aa4      	ldr	r2, [pc, #656]	; (8002a8c <HAL_PCD_EP_Transmit+0x354>)
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	b292      	uxth	r2, r2
 8002802:	801a      	strh	r2, [r3, #0]
 8002804:	e11f      	b.n	8002a46 <HAL_PCD_EP_Transmit+0x30e>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	001a      	movs	r2, r3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	18d3      	adds	r3, r2, r3
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	001a      	movs	r2, r3
 800281a:	2340      	movs	r3, #64	; 0x40
 800281c:	4013      	ands	r3, r2
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d167      	bne.n	80028f2 <HAL_PCD_EP_Transmit+0x1ba>
    {
      /*Set the Double buffer counter for pmabuffer1*/
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	785b      	ldrb	r3, [r3, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d145      	bne.n	80028b6 <HAL_PCD_EP_Transmit+0x17e>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2250      	movs	r2, #80	; 0x50
 8002830:	5a9b      	ldrh	r3, [r3, r2]
 8002832:	b29b      	uxth	r3, r3
 8002834:	001a      	movs	r2, r3
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	18d3      	adds	r3, r2, r3
 800283e:	001a      	movs	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	4a92      	ldr	r2, [pc, #584]	; (8002a90 <HAL_PCD_EP_Transmit+0x358>)
 8002848:	4694      	mov	ip, r2
 800284a:	4463      	add	r3, ip
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b3e      	cmp	r3, #62	; 0x3e
 8002852:	d919      	bls.n	8002888 <HAL_PCD_EP_Transmit+0x150>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	095a      	lsrs	r2, r3, #5
 8002858:	2324      	movs	r3, #36	; 0x24
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	221f      	movs	r2, #31
 8002862:	4013      	ands	r3, r2
 8002864:	d105      	bne.n	8002872 <HAL_PCD_EP_Transmit+0x13a>
 8002866:	2124      	movs	r1, #36	; 0x24
 8002868:	187b      	adds	r3, r7, r1
 800286a:	881a      	ldrh	r2, [r3, #0]
 800286c:	187b      	adds	r3, r7, r1
 800286e:	3a01      	subs	r2, #1
 8002870:	801a      	strh	r2, [r3, #0]
 8002872:	2324      	movs	r3, #36	; 0x24
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	b29b      	uxth	r3, r3
 800287c:	4a85      	ldr	r2, [pc, #532]	; (8002a94 <HAL_PCD_EP_Transmit+0x35c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	b29a      	uxth	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	e02e      	b.n	80028e6 <HAL_PCD_EP_Transmit+0x1ae>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	085a      	lsrs	r2, r3, #1
 800288c:	2324      	movs	r3, #36	; 0x24
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	801a      	strh	r2, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2201      	movs	r2, #1
 8002896:	4013      	ands	r3, r2
 8002898:	d005      	beq.n	80028a6 <HAL_PCD_EP_Transmit+0x16e>
 800289a:	2124      	movs	r1, #36	; 0x24
 800289c:	187b      	adds	r3, r7, r1
 800289e:	881a      	ldrh	r2, [r3, #0]
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	3201      	adds	r2, #1
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	2324      	movs	r3, #36	; 0x24
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	801a      	strh	r2, [r3, #0]
 80028b4:	e017      	b.n	80028e6 <HAL_PCD_EP_Transmit+0x1ae>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d113      	bne.n	80028e6 <HAL_PCD_EP_Transmit+0x1ae>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2250      	movs	r2, #80	; 0x50
 80028c4:	5a9b      	ldrh	r3, [r3, r2]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	001a      	movs	r2, r3
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	18d3      	adds	r3, r2, r3
 80028d2:	001a      	movs	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	18d3      	adds	r3, r2, r3
 80028da:	4a6d      	ldr	r2, [pc, #436]	; (8002a90 <HAL_PCD_EP_Transmit+0x358>)
 80028dc:	4694      	mov	ip, r2
 80028de:	4463      	add	r3, ip
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	b292      	uxth	r2, r2
 80028e4:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr1;
 80028e6:	2326      	movs	r3, #38	; 0x26
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	8912      	ldrh	r2, [r2, #8]
 80028ee:	801a      	strh	r2, [r3, #0]
 80028f0:	e066      	b.n	80029c0 <HAL_PCD_EP_Transmit+0x288>
    }
    else
    {
      /*Set the Double buffer counter for pmabuffer0*/
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d145      	bne.n	8002986 <HAL_PCD_EP_Transmit+0x24e>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2250      	movs	r2, #80	; 0x50
 8002900:	5a9b      	ldrh	r3, [r3, r2]
 8002902:	b29b      	uxth	r3, r3
 8002904:	001a      	movs	r2, r3
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	18d3      	adds	r3, r2, r3
 800290e:	001a      	movs	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	18d3      	adds	r3, r2, r3
 8002916:	4a5d      	ldr	r2, [pc, #372]	; (8002a8c <HAL_PCD_EP_Transmit+0x354>)
 8002918:	4694      	mov	ip, r2
 800291a:	4463      	add	r3, ip
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b3e      	cmp	r3, #62	; 0x3e
 8002922:	d919      	bls.n	8002958 <HAL_PCD_EP_Transmit+0x220>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	095a      	lsrs	r2, r3, #5
 8002928:	2322      	movs	r3, #34	; 0x22
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	801a      	strh	r2, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	221f      	movs	r2, #31
 8002932:	4013      	ands	r3, r2
 8002934:	d105      	bne.n	8002942 <HAL_PCD_EP_Transmit+0x20a>
 8002936:	2122      	movs	r1, #34	; 0x22
 8002938:	187b      	adds	r3, r7, r1
 800293a:	881a      	ldrh	r2, [r3, #0]
 800293c:	187b      	adds	r3, r7, r1
 800293e:	3a01      	subs	r2, #1
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	2322      	movs	r3, #34	; 0x22
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	029b      	lsls	r3, r3, #10
 800294a:	b29b      	uxth	r3, r3
 800294c:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <HAL_PCD_EP_Transmit+0x35c>)
 800294e:	4313      	orrs	r3, r2
 8002950:	b29a      	uxth	r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	e02e      	b.n	80029b6 <HAL_PCD_EP_Transmit+0x27e>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	085a      	lsrs	r2, r3, #1
 800295c:	2322      	movs	r3, #34	; 0x22
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	801a      	strh	r2, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	4013      	ands	r3, r2
 8002968:	d005      	beq.n	8002976 <HAL_PCD_EP_Transmit+0x23e>
 800296a:	2122      	movs	r1, #34	; 0x22
 800296c:	187b      	adds	r3, r7, r1
 800296e:	881a      	ldrh	r2, [r3, #0]
 8002970:	187b      	adds	r3, r7, r1
 8002972:	3201      	adds	r2, #1
 8002974:	801a      	strh	r2, [r3, #0]
 8002976:	2322      	movs	r3, #34	; 0x22
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	029b      	lsls	r3, r3, #10
 800297e:	b29a      	uxth	r2, r3
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	e017      	b.n	80029b6 <HAL_PCD_EP_Transmit+0x27e>
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	785b      	ldrb	r3, [r3, #1]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d113      	bne.n	80029b6 <HAL_PCD_EP_Transmit+0x27e>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2250      	movs	r2, #80	; 0x50
 8002994:	5a9b      	ldrh	r3, [r3, r2]
 8002996:	b29b      	uxth	r3, r3
 8002998:	001a      	movs	r2, r3
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	18d3      	adds	r3, r2, r3
 80029a2:	001a      	movs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	18d3      	adds	r3, r2, r3
 80029aa:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_PCD_EP_Transmit+0x354>)
 80029ac:	4694      	mov	ip, r2
 80029ae:	4463      	add	r3, ip
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	b292      	uxth	r2, r2
 80029b4:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr0;
 80029b6:	2326      	movs	r3, #38	; 0x26
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	88d2      	ldrh	r2, [r2, #6]
 80029be:	801a      	strh	r2, [r3, #0]
    }

    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	6919      	ldr	r1, [r3, #16]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b29c      	uxth	r4, r3
 80029cc:	2326      	movs	r3, #38	; 0x26
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	881a      	ldrh	r2, [r3, #0]
 80029d2:	0023      	movs	r3, r4
 80029d4:	f000 fa04 	bl	8002de0 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d117      	bne.n	8002a10 <HAL_PCD_EP_Transmit+0x2d8>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	001a      	movs	r2, r3
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	18d3      	adds	r3, r2, r3
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_PCD_EP_Transmit+0x360>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0019      	movs	r1, r3
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	18cb      	adds	r3, r1, r3
 8002a06:	4925      	ldr	r1, [pc, #148]	; (8002a9c <HAL_PCD_EP_Transmit+0x364>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	b292      	uxth	r2, r2
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	e01a      	b.n	8002a46 <HAL_PCD_EP_Transmit+0x30e>
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d116      	bne.n	8002a46 <HAL_PCD_EP_Transmit+0x30e>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	18d3      	adds	r3, r2, r3
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_PCD_EP_Transmit+0x360>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0019      	movs	r1, r3
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	18cb      	adds	r3, r1, r3
 8002a3e:	4918      	ldr	r1, [pc, #96]	; (8002aa0 <HAL_PCD_EP_Transmit+0x368>)
 8002a40:	430a      	orrs	r2, r1
 8002a42:	b292      	uxth	r2, r2
 8002a44:	801a      	strh	r2, [r3, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	18d3      	adds	r3, r2, r3
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_PCD_EP_Transmit+0x36c>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b29c      	uxth	r4, r3
 8002a5e:	2310      	movs	r3, #16
 8002a60:	4063      	eors	r3, r4
 8002a62:	b29c      	uxth	r4, r3
 8002a64:	2320      	movs	r3, #32
 8002a66:	4063      	eors	r3, r4
 8002a68:	b29c      	uxth	r4, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	001a      	movs	r2, r3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	18d3      	adds	r3, r2, r3
 8002a78:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <HAL_PCD_EP_Transmit+0x370>)
 8002a7a:	4322      	orrs	r2, r4
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	801a      	strh	r2, [r3, #0]
     
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b00b      	add	sp, #44	; 0x2c
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	00000402 	.word	0x00000402
 8002a90:	00000406 	.word	0x00000406
 8002a94:	ffff8000 	.word	0xffff8000
 8002a98:	00000f0f 	.word	0x00000f0f
 8002a9c:	ffff80c0 	.word	0xffff80c0
 8002aa0:	ffffc080 	.word	0xffffc080
 8002aa4:	ffff8fbf 	.word	0xffff8fbf
 8002aa8:	ffff8080 	.word	0xffff8080

08002aac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	000a      	movs	r2, r1
 8002ab6:	1cfb      	adds	r3, r7, #3
 8002ab8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	23f4      	movs	r3, #244	; 0xf4
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_PCD_EP_SetStall+0x1e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e099      	b.n	8002bfe <HAL_PCD_EP_SetStall+0x152>
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	23f4      	movs	r3, #244	; 0xf4
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	54d1      	strb	r1, [r2, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8002ad4:	1cfb      	adds	r3, r7, #3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da0c      	bge.n	8002af8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002ade:	1cfb      	adds	r3, r7, #3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	227f      	movs	r2, #127	; 0x7f
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	3328      	adds	r3, #40	; 0x28
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	18d3      	adds	r3, r2, r3
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	e00a      	b.n	8002b0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002af8:	1cfb      	adds	r3, r7, #3
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	0013      	movs	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	3309      	adds	r3, #9
 8002b06:	33ff      	adds	r3, #255	; 0xff
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	18d3      	adds	r3, r2, r3
 8002b0c:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002b14:	1cfb      	adds	r3, r7, #3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	227f      	movs	r2, #127	; 0x7f
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002b22:	1cfb      	adds	r3, r7, #3
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	09db      	lsrs	r3, r3, #7
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	001a      	movs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d120      	bne.n	8002b7e <HAL_PCD_EP_SetStall+0xd2>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	001a      	movs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	18d3      	adds	r3, r2, r3
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	001a      	movs	r2, r3
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_PCD_EP_SetStall+0x15c>)
 8002b52:	401a      	ands	r2, r3
 8002b54:	0014      	movs	r4, r2
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	015b      	lsls	r3, r3, #5
 8002b5a:	4063      	eors	r3, r4
 8002b5c:	001c      	movs	r4, r3
 8002b5e:	2310      	movs	r3, #16
 8002b60:	4063      	eors	r3, r4
 8002b62:	001c      	movs	r4, r3
 8002b64:	b2a2      	uxth	r2, r4
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	18cb      	adds	r3, r1, r3
 8002b74:	4925      	ldr	r1, [pc, #148]	; (8002c0c <HAL_PCD_EP_SetStall+0x160>)
 8002b76:	430a      	orrs	r2, r1
 8002b78:	b292      	uxth	r2, r2
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	e039      	b.n	8002bf2 <HAL_PCD_EP_SetStall+0x146>
  }
  else
  {
    if (ep->is_in)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01a      	beq.n	8002bbc <HAL_PCD_EP_SetStall+0x110>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_PCD_EP_SetStall+0x164>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	b29c      	uxth	r4, r3
 8002b9e:	2310      	movs	r3, #16
 8002ba0:	4063      	eors	r3, r4
 8002ba2:	b29c      	uxth	r4, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	001a      	movs	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	18d3      	adds	r3, r2, r3
 8002bb2:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <HAL_PCD_EP_SetStall+0x160>)
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	b292      	uxth	r2, r2
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	e01a      	b.n	8002bf2 <HAL_PCD_EP_SetStall+0x146>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	18d3      	adds	r3, r2, r3
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_PCD_EP_SetStall+0x168>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b29c      	uxth	r4, r3
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	015b      	lsls	r3, r3, #5
 8002bd8:	4063      	eors	r3, r4
 8002bda:	b29c      	uxth	r4, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	001a      	movs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	18d3      	adds	r3, r2, r3
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <HAL_PCD_EP_SetStall+0x160>)
 8002bec:	4322      	orrs	r2, r4
 8002bee:	b292      	uxth	r2, r2
 8002bf0:	801a      	strh	r2, [r3, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	23f4      	movs	r3, #244	; 0xf4
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	54d1      	strb	r1, [r2, r3]
  
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b005      	add	sp, #20
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	0000bfbf 	.word	0x0000bfbf
 8002c0c:	ffff8080 	.word	0xffff8080
 8002c10:	ffff8fbf 	.word	0xffff8fbf
 8002c14:	ffffbf8f 	.word	0xffffbf8f

08002c18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	000a      	movs	r2, r1
 8002c22:	1cfb      	adds	r3, r7, #3
 8002c24:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8002c26:	1cfb      	adds	r3, r7, #3
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	da0c      	bge.n	8002c4a <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002c30:	1cfb      	adds	r3, r7, #3
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	227f      	movs	r2, #127	; 0x7f
 8002c36:	401a      	ands	r2, r3
 8002c38:	0013      	movs	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	3328      	adds	r3, #40	; 0x28
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	18d3      	adds	r3, r2, r3
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e00a      	b.n	8002c60 <HAL_PCD_EP_ClrStall+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c4a:	1cfb      	adds	r3, r7, #3
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	0013      	movs	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	3309      	adds	r3, #9
 8002c58:	33ff      	adds	r3, #255	; 0xff
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	18d3      	adds	r3, r2, r3
 8002c5e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002c66:	1cfb      	adds	r3, r7, #3
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	227f      	movs	r2, #127	; 0x7f
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002c74:	1cfb      	adds	r3, r7, #3
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	09db      	lsrs	r3, r3, #7
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	001a      	movs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	23f4      	movs	r3, #244	; 0xf4
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_PCD_EP_ClrStall+0x7e>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e094      	b.n	8002dc0 <HAL_PCD_EP_ClrStall+0x1a8>
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	23f4      	movs	r3, #244	; 0xf4
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	54d1      	strb	r1, [r2, r3]
  
  if (ep->is_in)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d041      	beq.n	8002d2c <HAL_PCD_EP_ClrStall+0x114>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	001a      	movs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	18d3      	adds	r3, r2, r3
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	001a      	movs	r2, r3
 8002cbc:	2340      	movs	r3, #64	; 0x40
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d016      	beq.n	8002cf0 <HAL_PCD_EP_ClrStall+0xd8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	18d3      	adds	r3, r2, r3
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	4a3c      	ldr	r2, [pc, #240]	; (8002dc8 <HAL_PCD_EP_ClrStall+0x1b0>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0019      	movs	r1, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	18cb      	adds	r3, r1, r3
 8002ce8:	4938      	ldr	r1, [pc, #224]	; (8002dcc <HAL_PCD_EP_ClrStall+0x1b4>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	b292      	uxth	r2, r2
 8002cee:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <HAL_PCD_EP_ClrStall+0x1b8>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	b29c      	uxth	r4, r3
 8002d08:	2310      	movs	r3, #16
 8002d0a:	4063      	eors	r3, r4
 8002d0c:	b29c      	uxth	r4, r3
 8002d0e:	2320      	movs	r3, #32
 8002d10:	4063      	eors	r3, r4
 8002d12:	b29c      	uxth	r4, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	001a      	movs	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	18d3      	adds	r3, r2, r3
 8002d22:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <HAL_PCD_EP_ClrStall+0x1bc>)
 8002d24:	4322      	orrs	r2, r4
 8002d26:	b292      	uxth	r2, r2
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	e043      	b.n	8002db4 <HAL_PCD_EP_ClrStall+0x19c>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	001a      	movs	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	18d3      	adds	r3, r2, r3
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	001a      	movs	r2, r3
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	01db      	lsls	r3, r3, #7
 8002d44:	4013      	ands	r3, r2
 8002d46:	d016      	beq.n	8002d76 <HAL_PCD_EP_ClrStall+0x15e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	18d3      	adds	r3, r2, r3
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <HAL_PCD_EP_ClrStall+0x1b0>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0019      	movs	r1, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	18cb      	adds	r3, r1, r3
 8002d6e:	491a      	ldr	r1, [pc, #104]	; (8002dd8 <HAL_PCD_EP_ClrStall+0x1c0>)
 8002d70:	430a      	orrs	r2, r1
 8002d72:	b292      	uxth	r2, r2
 8002d74:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	001a      	movs	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	18d3      	adds	r3, r2, r3
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <HAL_PCD_EP_ClrStall+0x1c4>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	b29c      	uxth	r4, r3
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	015b      	lsls	r3, r3, #5
 8002d92:	4063      	eors	r3, r4
 8002d94:	b29c      	uxth	r4, r3
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	4063      	eors	r3, r4
 8002d9c:	b29c      	uxth	r4, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	001a      	movs	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	18d3      	adds	r3, r2, r3
 8002dac:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_PCD_EP_ClrStall+0x1bc>)
 8002dae:	4322      	orrs	r2, r4
 8002db0:	b292      	uxth	r2, r2
 8002db2:	801a      	strh	r2, [r3, #0]
  }
  __HAL_UNLOCK(hpcd); 
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	23f4      	movs	r3, #244	; 0xf4
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2100      	movs	r1, #0
 8002dbc:	54d1      	strb	r1, [r2, r3]
    
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b005      	add	sp, #20
 8002dc6:	bd90      	pop	{r4, r7, pc}
 8002dc8:	00000f0f 	.word	0x00000f0f
 8002dcc:	ffff80c0 	.word	0xffff80c0
 8002dd0:	ffff8fbf 	.word	0xffff8fbf
 8002dd4:	ffff8080 	.word	0xffff8080
 8002dd8:	ffffc080 	.word	0xffffc080
 8002ddc:	ffffbf8f 	.word	0xffffbf8f

08002de0 <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b089      	sub	sp, #36	; 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	0019      	movs	r1, r3
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	801a      	strh	r2, [r3, #0]
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	1c0a      	adds	r2, r1, #0
 8002df4:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8002e00:	1dbb      	adds	r3, r7, #6
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	18d3      	adds	r3, r2, r3
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	00d2      	lsls	r2, r2, #3
 8002e0c:	4694      	mov	ip, r2
 8002e0e:	4463      	add	r3, ip
 8002e10:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0; i--)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e01e      	b.n	8002e56 <PCD_WritePMA+0x76>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	2012      	movs	r0, #18
 8002e1e:	183b      	adds	r3, r7, r0
 8002e20:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3301      	adds	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	b299      	uxth	r1, r3
 8002e32:	2410      	movs	r4, #16
 8002e34:	193b      	adds	r3, r7, r4
 8002e36:	183a      	adds	r2, r7, r0
 8002e38:	8812      	ldrh	r2, [r2, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	1c9a      	adds	r2, r3, #2
 8002e42:	61ba      	str	r2, [r7, #24]
 8002e44:	193a      	adds	r2, r7, r4
 8002e46:	8812      	ldrh	r2, [r2, #0]
 8002e48:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1dd      	bne.n	8002e18 <PCD_WritePMA+0x38>
  }
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b009      	add	sp, #36	; 0x24
 8002e62:	bd90      	pop	{r4, r7, pc}

08002e64 <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	0019      	movs	r1, r3
 8002e70:	1dbb      	adds	r3, r7, #6
 8002e72:	801a      	strh	r2, [r3, #0]
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	1c0a      	adds	r2, r1, #0
 8002e78:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8002e84:	1dbb      	adds	r3, r7, #6
 8002e86:	881a      	ldrh	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	18d3      	adds	r3, r2, r3
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	00d2      	lsls	r2, r2, #3
 8002e90:	4694      	mov	ip, r2
 8002e92:	4463      	add	r3, ip
 8002e94:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0U; i--)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	e014      	b.n	8002ec6 <PCD_ReadPMA+0x62>
  {
    temp = *pdwVal++;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	1c9a      	adds	r2, r3, #2
 8002ea0:	61ba      	str	r2, [r7, #24]
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	60ba      	str	r2, [r7, #8]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	0a19      	lsrs	r1, r3, #8
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	60ba      	str	r2, [r7, #8]
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e7      	bne.n	8002e9c <PCD_ReadPMA+0x38>
  }
  
  if (wNBytes % 2)
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <PCD_ReadPMA+0x8c>
  {
    temp = *pdwVal++;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	1c9a      	adds	r2, r3, #2
 8002ede:	61ba      	str	r2, [r7, #24]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	60ba      	str	r2, [r7, #8]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]
  }
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b008      	add	sp, #32
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 8002f00:	231e      	movs	r3, #30
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8002f08:	230c      	movs	r3, #12
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8002f10:	e34a      	b.n	80035a8 <PCD_EP_ISR_Handler+0x6b0>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f12:	230e      	movs	r3, #14
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	201d      	movs	r0, #29
 8002f1e:	183b      	adds	r3, r7, r0
 8002f20:	210f      	movs	r1, #15
 8002f22:	400a      	ands	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0U)
 8002f26:	183b      	adds	r3, r7, r0
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d000      	beq.n	8002f30 <PCD_EP_ISR_Handler+0x38>
 8002f2e:	e137      	b.n	80031a0 <PCD_EP_ISR_Handler+0x2a8>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f30:	230e      	movs	r3, #14
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	001a      	movs	r2, r3
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d14c      	bne.n	8002fda <PCD_EP_ISR_Handler+0xe2>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	49c4      	ldr	r1, [pc, #784]	; (8003260 <PCD_EP_ISR_Handler+0x368>)
 8002f4e:	400a      	ands	r2, r1
 8002f50:	b292      	uxth	r2, r2
 8002f52:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3328      	adds	r3, #40	; 0x28
 8002f58:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2250      	movs	r2, #80	; 0x50
 8002f60:	5a9b      	ldrh	r3, [r3, r2]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	001a      	movs	r2, r3
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	18d3      	adds	r3, r2, r3
 8002f6e:	001a      	movs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	18d3      	adds	r3, r2, r3
 8002f76:	4abb      	ldr	r2, [pc, #748]	; (8003264 <PCD_EP_ISR_Handler+0x36c>)
 8002f78:	4694      	mov	ip, r2
 8002f7a:	4463      	add	r3, ip
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	059b      	lsls	r3, r3, #22
 8002f80:	0d9a      	lsrs	r2, r3, #22
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	18d2      	adds	r2, r2, r3
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2100      	movs	r1, #0
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f004 fcf9 	bl	8007990 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2224      	movs	r2, #36	; 0x24
 8002fa2:	5c9b      	ldrb	r3, [r3, r2]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d100      	bne.n	8002fac <PCD_EP_ISR_Handler+0xb4>
 8002faa:	e2fd      	b.n	80035a8 <PCD_EP_ISR_Handler+0x6b0>
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d000      	beq.n	8002fb6 <PCD_EP_ISR_Handler+0xbe>
 8002fb4:	e2f8      	b.n	80035a8 <PCD_EP_ISR_Handler+0x6b0>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2224      	movs	r2, #36	; 0x24
 8002fba:	5c9b      	ldrb	r3, [r3, r2]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	4252      	negs	r2, r2
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b291      	uxth	r1, r2
 8002fcc:	224c      	movs	r2, #76	; 0x4c
 8002fce:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2224      	movs	r2, #36	; 0x24
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5499      	strb	r1, [r3, r2]
 8002fd8:	e2e6      	b.n	80035a8 <PCD_EP_ISR_Handler+0x6b0>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3309      	adds	r3, #9
 8002fde:	33ff      	adds	r3, #255	; 0xff
 8002fe0:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	210c      	movs	r1, #12
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d031      	beq.n	8003064 <PCD_EP_ISR_Handler+0x16c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2250      	movs	r2, #80	; 0x50
 8003006:	5a9b      	ldrh	r3, [r3, r2]
 8003008:	b29b      	uxth	r3, r3
 800300a:	001a      	movs	r2, r3
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	18d3      	adds	r3, r2, r3
 8003014:	001a      	movs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	18d3      	adds	r3, r2, r3
 800301c:	4a92      	ldr	r2, [pc, #584]	; (8003268 <PCD_EP_ISR_Handler+0x370>)
 800301e:	4694      	mov	ip, r2
 8003020:	4463      	add	r3, ip
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	059b      	lsls	r3, r3, #22
 8003026:	0d9a      	lsrs	r2, r3, #22
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	33ed      	adds	r3, #237	; 0xed
 8003034:	33ff      	adds	r3, #255	; 0xff
 8003036:	0019      	movs	r1, r3
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	889a      	ldrh	r2, [r3, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f7ff ff0f 	bl	8002e64 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4986      	ldr	r1, [pc, #536]	; (800326c <PCD_EP_ISR_Handler+0x374>)
 8003054:	400a      	ands	r2, r1
 8003056:	b292      	uxth	r2, r2
 8003058:	801a      	strh	r2, [r3, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f004 fc63 	bl	8007928 <HAL_PCD_SetupStageCallback>
 8003062:	e2a1      	b.n	80035a8 <PCD_EP_ISR_Handler+0x6b0>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003064:	230c      	movs	r3, #12
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	b21b      	sxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	db00      	blt.n	8003074 <PCD_EP_ISR_Handler+0x17c>
 8003072:	e299      	b.n	80035a8 <PCD_EP_ISR_Handler+0x6b0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	497a      	ldr	r1, [pc, #488]	; (800326c <PCD_EP_ISR_Handler+0x374>)
 8003082:	400a      	ands	r2, r1
 8003084:	b292      	uxth	r2, r2
 8003086:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2250      	movs	r2, #80	; 0x50
 800308e:	5a9b      	ldrh	r3, [r3, r2]
 8003090:	b29b      	uxth	r3, r3
 8003092:	001a      	movs	r2, r3
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	18d3      	adds	r3, r2, r3
 800309c:	001a      	movs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	18d3      	adds	r3, r2, r3
 80030a4:	4a70      	ldr	r2, [pc, #448]	; (8003268 <PCD_EP_ISR_Handler+0x370>)
 80030a6:	4694      	mov	ip, r2
 80030a8:	4463      	add	r3, ip
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	059b      	lsls	r3, r3, #22
 80030ae:	0d9a      	lsrs	r2, r3, #22
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d011      	beq.n	80030e0 <PCD_EP_ISR_Handler+0x1e8>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6919      	ldr	r1, [r3, #16]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	889a      	ldrh	r2, [r3, #4]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f7ff fec9 	bl	8002e64 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	18d2      	adds	r2, r2, r3
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2100      	movs	r1, #0
 80030e4:	0018      	movs	r0, r3
 80030e6:	f004 fc32 	bl	800794e <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2250      	movs	r2, #80	; 0x50
 80030f0:	5a9b      	ldrh	r3, [r3, r2]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	001a      	movs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	18d3      	adds	r3, r2, r3
 80030fc:	4a5a      	ldr	r2, [pc, #360]	; (8003268 <PCD_EP_ISR_Handler+0x370>)
 80030fe:	4694      	mov	ip, r2
 8003100:	4463      	add	r3, ip
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b3e      	cmp	r3, #62	; 0x3e
 800310a:	d91b      	bls.n	8003144 <PCD_EP_ISR_Handler+0x24c>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	095a      	lsrs	r2, r3, #5
 8003112:	2316      	movs	r3, #22
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	801a      	strh	r2, [r3, #0]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	221f      	movs	r2, #31
 800311e:	4013      	ands	r3, r2
 8003120:	d105      	bne.n	800312e <PCD_EP_ISR_Handler+0x236>
 8003122:	2116      	movs	r1, #22
 8003124:	187b      	adds	r3, r7, r1
 8003126:	881a      	ldrh	r2, [r3, #0]
 8003128:	187b      	adds	r3, r7, r1
 800312a:	3a01      	subs	r2, #1
 800312c:	801a      	strh	r2, [r3, #0]
 800312e:	2316      	movs	r3, #22
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	029b      	lsls	r3, r3, #10
 8003136:	b29b      	uxth	r3, r3
 8003138:	4a4d      	ldr	r2, [pc, #308]	; (8003270 <PCD_EP_ISR_Handler+0x378>)
 800313a:	4313      	orrs	r3, r2
 800313c:	b29a      	uxth	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	801a      	strh	r2, [r3, #0]
 8003142:	e017      	b.n	8003174 <PCD_EP_ISR_Handler+0x27c>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	085a      	lsrs	r2, r3, #1
 800314a:	2316      	movs	r3, #22
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	801a      	strh	r2, [r3, #0]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	4013      	ands	r3, r2
 8003158:	d005      	beq.n	8003166 <PCD_EP_ISR_Handler+0x26e>
 800315a:	2116      	movs	r1, #22
 800315c:	187b      	adds	r3, r7, r1
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	187b      	adds	r3, r7, r1
 8003162:	3201      	adds	r2, #1
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	2316      	movs	r3, #22
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	029b      	lsls	r3, r3, #10
 800316e:	b29a      	uxth	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	4a3d      	ldr	r2, [pc, #244]	; (8003274 <PCD_EP_ISR_Handler+0x37c>)
 800317e:	4013      	ands	r3, r2
 8003180:	b29c      	uxth	r4, r3
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	015b      	lsls	r3, r3, #5
 8003186:	4063      	eors	r3, r4
 8003188:	b29c      	uxth	r4, r3
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	4063      	eors	r3, r4
 8003190:	b29c      	uxth	r4, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a38      	ldr	r2, [pc, #224]	; (8003278 <PCD_EP_ISR_Handler+0x380>)
 8003198:	4322      	orrs	r2, r4
 800319a:	b292      	uxth	r2, r2
 800319c:	801a      	strh	r2, [r3, #0]
 800319e:	e203      	b.n	80035a8 <PCD_EP_ISR_Handler+0x6b0>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	001a      	movs	r2, r3
 80031a6:	231d      	movs	r3, #29
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	18d3      	adds	r3, r2, r3
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	210c      	movs	r1, #12
 80031b6:	187b      	adds	r3, r7, r1
 80031b8:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031ba:	187b      	adds	r3, r7, r1
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	db00      	blt.n	80031c8 <PCD_EP_ISR_Handler+0x2d0>
 80031c6:	e0f9      	b.n	80033bc <PCD_EP_ISR_Handler+0x4c4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	001a      	movs	r2, r3
 80031ce:	201d      	movs	r0, #29
 80031d0:	183b      	adds	r3, r7, r0
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	18d3      	adds	r3, r2, r3
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0019      	movs	r1, r3
 80031e2:	183b      	adds	r3, r7, r0
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	18cb      	adds	r3, r1, r3
 80031ea:	4920      	ldr	r1, [pc, #128]	; (800326c <PCD_EP_ISR_Handler+0x374>)
 80031ec:	400a      	ands	r2, r1
 80031ee:	b292      	uxth	r2, r2
 80031f0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[EPindex];
 80031f2:	183b      	adds	r3, r7, r0
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	0013      	movs	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	3309      	adds	r3, #9
 8003200:	33ff      	adds	r3, #255	; 0xff
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	18d3      	adds	r3, r2, r3
 8003206:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	7a9b      	ldrb	r3, [r3, #10]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d135      	bne.n	800327c <PCD_EP_ISR_Handler+0x384>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2250      	movs	r2, #80	; 0x50
 8003216:	5a9b      	ldrh	r3, [r3, r2]
 8003218:	b29b      	uxth	r3, r3
 800321a:	001a      	movs	r2, r3
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	001a      	movs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	18d3      	adds	r3, r2, r3
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <PCD_EP_ISR_Handler+0x370>)
 800322e:	4694      	mov	ip, r2
 8003230:	4463      	add	r3, ip
 8003232:	881a      	ldrh	r2, [r3, #0]
 8003234:	211e      	movs	r1, #30
 8003236:	187b      	adds	r3, r7, r1
 8003238:	0592      	lsls	r2, r2, #22
 800323a:	0d92      	lsrs	r2, r2, #22
 800323c:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 800323e:	187b      	adds	r3, r7, r1
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d100      	bne.n	8003248 <PCD_EP_ISR_Handler+0x350>
 8003246:	e08e      	b.n	8003366 <PCD_EP_ISR_Handler+0x46e>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	6919      	ldr	r1, [r3, #16]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	889a      	ldrh	r2, [r3, #4]
 8003254:	231e      	movs	r3, #30
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	f7ff fe03 	bl	8002e64 <PCD_ReadPMA>
 800325e:	e082      	b.n	8003366 <PCD_EP_ISR_Handler+0x46e>
 8003260:	ffff8f0f 	.word	0xffff8f0f
 8003264:	00000402 	.word	0x00000402
 8003268:	00000406 	.word	0x00000406
 800326c:	00000f8f 	.word	0x00000f8f
 8003270:	ffff8000 	.word	0xffff8000
 8003274:	ffffbf8f 	.word	0xffffbf8f
 8003278:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	001a      	movs	r2, r3
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	18d3      	adds	r3, r2, r3
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	001a      	movs	r2, r3
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	01db      	lsls	r3, r3, #7
 8003294:	401a      	ands	r2, r3
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	01db      	lsls	r3, r3, #7
 800329a:	429a      	cmp	r2, r3
 800329c:	d126      	bne.n	80032ec <PCD_EP_ISR_Handler+0x3f4>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2250      	movs	r2, #80	; 0x50
 80032a4:	5a9b      	ldrh	r3, [r3, r2]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	001a      	movs	r2, r3
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	18d3      	adds	r3, r2, r3
 80032b2:	001a      	movs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	18d3      	adds	r3, r2, r3
 80032ba:	4ac4      	ldr	r2, [pc, #784]	; (80035cc <PCD_EP_ISR_Handler+0x6d4>)
 80032bc:	4694      	mov	ip, r2
 80032be:	4463      	add	r3, ip
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	211e      	movs	r1, #30
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	0592      	lsls	r2, r2, #22
 80032c8:	0d92      	lsrs	r2, r2, #22
 80032ca:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d031      	beq.n	8003338 <PCD_EP_ISR_Handler+0x440>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6919      	ldr	r1, [r3, #16]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	88da      	ldrh	r2, [r3, #6]
 80032e0:	231e      	movs	r3, #30
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	f7ff fdbd 	bl	8002e64 <PCD_ReadPMA>
 80032ea:	e025      	b.n	8003338 <PCD_EP_ISR_Handler+0x440>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2250      	movs	r2, #80	; 0x50
 80032f2:	5a9b      	ldrh	r3, [r3, r2]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	001a      	movs	r2, r3
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	18d3      	adds	r3, r2, r3
 8003300:	001a      	movs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	18d3      	adds	r3, r2, r3
 8003308:	4ab1      	ldr	r2, [pc, #708]	; (80035d0 <PCD_EP_ISR_Handler+0x6d8>)
 800330a:	4694      	mov	ip, r2
 800330c:	4463      	add	r3, ip
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	211e      	movs	r1, #30
 8003312:	187b      	adds	r3, r7, r1
 8003314:	0592      	lsls	r2, r2, #22
 8003316:	0d92      	lsrs	r2, r2, #22
 8003318:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 800331a:	187b      	adds	r3, r7, r1
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <PCD_EP_ISR_Handler+0x440>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	891a      	ldrh	r2, [r3, #8]
 800332e:	231e      	movs	r3, #30
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	f7ff fd96 	bl	8002e64 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	001a      	movs	r2, r3
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	18d3      	adds	r3, r2, r3
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	4aa2      	ldr	r2, [pc, #648]	; (80035d4 <PCD_EP_ISR_Handler+0x6dc>)
 800334c:	4013      	ands	r3, r2
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	0019      	movs	r1, r3
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	18cb      	adds	r3, r1, r3
 800335e:	499e      	ldr	r1, [pc, #632]	; (80035d8 <PCD_EP_ISR_Handler+0x6e0>)
 8003360:	430a      	orrs	r2, r1
 8003362:	b292      	uxth	r2, r2
 8003364:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	211e      	movs	r1, #30
 800336c:	187b      	adds	r3, r7, r1
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	18d2      	adds	r2, r2, r3
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	187b      	adds	r3, r7, r1
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	18d2      	adds	r2, r2, r3
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <PCD_EP_ISR_Handler+0x4a2>
 800338c:	231e      	movs	r3, #30
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	429a      	cmp	r2, r3
 8003398:	d207      	bcs.n	80033aa <PCD_EP_ISR_Handler+0x4b2>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f004 fad3 	bl	800794e <HAL_PCD_DataOutStageCallback>
 80033a8:	e008      	b.n	80033bc <PCD_EP_ISR_Handler+0x4c4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	7819      	ldrb	r1, [r3, #0]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff f826 	bl	8002408 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80033bc:	230c      	movs	r3, #12
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	001a      	movs	r2, r3
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	4013      	ands	r3, r2
 80033ca:	d100      	bne.n	80033ce <PCD_EP_ISR_Handler+0x4d6>
 80033cc:	e0ec      	b.n	80035a8 <PCD_EP_ISR_Handler+0x6b0>
      {
        ep = &hpcd->IN_ep[EPindex];
 80033ce:	211d      	movs	r1, #29
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	0013      	movs	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	3328      	adds	r3, #40	; 0x28
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	18d3      	adds	r3, r2, r3
 80033e2:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	001a      	movs	r2, r3
 80033ea:	0008      	movs	r0, r1
 80033ec:	187b      	adds	r3, r7, r1
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	18d3      	adds	r3, r2, r3
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0019      	movs	r1, r3
 80033fe:	183b      	adds	r3, r7, r0
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	18cb      	adds	r3, r1, r3
 8003406:	4975      	ldr	r1, [pc, #468]	; (80035dc <PCD_EP_ISR_Handler+0x6e4>)
 8003408:	400a      	ands	r2, r1
 800340a:	b292      	uxth	r2, r2
 800340c:	801a      	strh	r2, [r3, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	7a9b      	ldrb	r3, [r3, #10]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d126      	bne.n	8003464 <PCD_EP_ISR_Handler+0x56c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2250      	movs	r2, #80	; 0x50
 800341c:	5a9b      	ldrh	r3, [r3, r2]
 800341e:	b29b      	uxth	r3, r3
 8003420:	001a      	movs	r2, r3
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	001a      	movs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	18d3      	adds	r3, r2, r3
 8003432:	4a66      	ldr	r2, [pc, #408]	; (80035cc <PCD_EP_ISR_Handler+0x6d4>)
 8003434:	4694      	mov	ip, r2
 8003436:	4463      	add	r3, ip
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	059b      	lsls	r3, r3, #22
 800343c:	0d9a      	lsrs	r2, r3, #22
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d100      	bne.n	800344c <PCD_EP_ISR_Handler+0x554>
 800344a:	e07b      	b.n	8003544 <PCD_EP_ISR_Handler+0x64c>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	6919      	ldr	r1, [r3, #16]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	889a      	ldrh	r2, [r3, #4]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f7ff fcbf 	bl	8002de0 <PCD_WritePMA>
 8003462:	e06f      	b.n	8003544 <PCD_EP_ISR_Handler+0x64c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	001a      	movs	r2, r3
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	18d3      	adds	r3, r2, r3
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	001a      	movs	r2, r3
 8003478:	2340      	movs	r3, #64	; 0x40
 800347a:	4013      	ands	r3, r2
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	d125      	bne.n	80034cc <PCD_EP_ISR_Handler+0x5d4>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2250      	movs	r2, #80	; 0x50
 8003486:	5a9b      	ldrh	r3, [r3, r2]
 8003488:	b29b      	uxth	r3, r3
 800348a:	001a      	movs	r2, r3
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	18d3      	adds	r3, r2, r3
 8003494:	001a      	movs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	18d3      	adds	r3, r2, r3
 800349c:	4a4b      	ldr	r2, [pc, #300]	; (80035cc <PCD_EP_ISR_Handler+0x6d4>)
 800349e:	4694      	mov	ip, r2
 80034a0:	4463      	add	r3, ip
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	059b      	lsls	r3, r3, #22
 80034a6:	0d9a      	lsrs	r2, r3, #22
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d030      	beq.n	8003516 <PCD_EP_ISR_Handler+0x61e>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6919      	ldr	r1, [r3, #16]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	88da      	ldrh	r2, [r3, #6]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f7ff fc8b 	bl	8002de0 <PCD_WritePMA>
 80034ca:	e024      	b.n	8003516 <PCD_EP_ISR_Handler+0x61e>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2250      	movs	r2, #80	; 0x50
 80034d2:	5a9b      	ldrh	r3, [r3, r2]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	001a      	movs	r2, r3
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	18d3      	adds	r3, r2, r3
 80034e0:	001a      	movs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	18d3      	adds	r3, r2, r3
 80034e8:	4a39      	ldr	r2, [pc, #228]	; (80035d0 <PCD_EP_ISR_Handler+0x6d8>)
 80034ea:	4694      	mov	ip, r2
 80034ec:	4463      	add	r3, ip
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	059b      	lsls	r3, r3, #22
 80034f2:	0d9a      	lsrs	r2, r3, #22
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <PCD_EP_ISR_Handler+0x61e>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	6919      	ldr	r1, [r3, #16]
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	891a      	ldrh	r2, [r3, #8]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f7ff fc65 	bl	8002de0 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	001a      	movs	r2, r3
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	18d3      	adds	r3, r2, r3
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <PCD_EP_ISR_Handler+0x6dc>)
 800352a:	4013      	ands	r3, r2
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	0019      	movs	r1, r3
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	18cb      	adds	r3, r1, r3
 800353c:	4928      	ldr	r1, [pc, #160]	; (80035e0 <PCD_EP_ISR_Handler+0x6e8>)
 800353e:	430a      	orrs	r2, r1
 8003540:	b292      	uxth	r2, r2
 8003542:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2250      	movs	r2, #80	; 0x50
 800354a:	5a9b      	ldrh	r3, [r3, r2]
 800354c:	b29b      	uxth	r3, r3
 800354e:	001a      	movs	r2, r3
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	18d3      	adds	r3, r2, r3
 8003558:	001a      	movs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	18d3      	adds	r3, r2, r3
 8003560:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <PCD_EP_ISR_Handler+0x6d4>)
 8003562:	4694      	mov	ip, r2
 8003564:	4463      	add	r3, ip
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	059b      	lsls	r3, r3, #22
 800356a:	0d9a      	lsrs	r2, r3, #22
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	18d2      	adds	r2, r2, r3
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <PCD_EP_ISR_Handler+0x69e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0011      	movs	r1, r2
 800358e:	0018      	movs	r0, r3
 8003590:	f004 f9fe 	bl	8007990 <HAL_PCD_DataInStageCallback>
 8003594:	e008      	b.n	80035a8 <PCD_EP_ISR_Handler+0x6b0>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	7819      	ldrb	r1, [r3, #0]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff f8c8 	bl	8002738 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2244      	movs	r2, #68	; 0x44
 80035ae:	5a9b      	ldrh	r3, [r3, r2]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	230e      	movs	r3, #14
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	1c11      	adds	r1, r2, #0
 80035b8:	8019      	strh	r1, [r3, #0]
 80035ba:	b213      	sxth	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da00      	bge.n	80035c2 <PCD_EP_ISR_Handler+0x6ca>
 80035c0:	e4a7      	b.n	8002f12 <PCD_EP_ISR_Handler+0x1a>
        }
      } 
    }
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b009      	add	sp, #36	; 0x24
 80035ca:	bd90      	pop	{r4, r7, pc}
 80035cc:	00000402 	.word	0x00000402
 80035d0:	00000406 	.word	0x00000406
 80035d4:	00000f0f 	.word	0x00000f0f
 80035d8:	ffff80c0 	.word	0xffff80c0
 80035dc:	ffff8f0f 	.word	0xffff8f0f
 80035e0:	ffffc080 	.word	0xffffc080

080035e4 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	0008      	movs	r0, r1
 80035ee:	0011      	movs	r1, r2
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	240a      	movs	r4, #10
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	1c02      	adds	r2, r0, #0
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	2308      	movs	r3, #8
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	1c0a      	adds	r2, r1, #0
 8003600:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003602:	193b      	adds	r3, r7, r4
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	4013      	ands	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8003610:	230a      	movs	r3, #10
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	227f      	movs	r2, #127	; 0x7f
 8003618:	401a      	ands	r2, r3
 800361a:	0013      	movs	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	3328      	adds	r3, #40	; 0x28
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	18d3      	adds	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e00b      	b.n	8003644 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800362c:	230a      	movs	r3, #10
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	881a      	ldrh	r2, [r3, #0]
 8003632:	0013      	movs	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	3309      	adds	r3, #9
 800363c:	33ff      	adds	r3, #255	; 0xff
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	18d3      	adds	r3, r2, r3
 8003642:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003644:	2308      	movs	r3, #8
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	b29a      	uxth	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	809a      	strh	r2, [r3, #4]
 800365c:	e00b      	b.n	8003676 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2201      	movs	r2, #1
 8003662:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	b29a      	uxth	r2, r3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b29a      	uxth	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b007      	add	sp, #28
 800367e:	bd90      	pop	{r4, r7, pc}

08003680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	4013      	ands	r3, r2
 8003694:	d100      	bne.n	8003698 <HAL_RCC_OscConfig+0x18>
 8003696:	e08d      	b.n	80037b4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003698:	4bc5      	ldr	r3, [pc, #788]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	220c      	movs	r2, #12
 800369e:	4013      	ands	r3, r2
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d00e      	beq.n	80036c2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036a4:	4bc2      	ldr	r3, [pc, #776]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	220c      	movs	r2, #12
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d116      	bne.n	80036de <HAL_RCC_OscConfig+0x5e>
 80036b0:	4bbf      	ldr	r3, [pc, #764]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	23c0      	movs	r3, #192	; 0xc0
 80036b6:	025b      	lsls	r3, r3, #9
 80036b8:	401a      	ands	r2, r3
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	025b      	lsls	r3, r3, #9
 80036be:	429a      	cmp	r2, r3
 80036c0:	d10d      	bne.n	80036de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c2:	4bbb      	ldr	r3, [pc, #748]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	029b      	lsls	r3, r3, #10
 80036ca:	4013      	ands	r3, r2
 80036cc:	d100      	bne.n	80036d0 <HAL_RCC_OscConfig+0x50>
 80036ce:	e070      	b.n	80037b2 <HAL_RCC_OscConfig+0x132>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d000      	beq.n	80036da <HAL_RCC_OscConfig+0x5a>
 80036d8:	e06b      	b.n	80037b2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e329      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_OscConfig+0x76>
 80036e6:	4bb2      	ldr	r3, [pc, #712]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4bb1      	ldr	r3, [pc, #708]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80036ec:	2180      	movs	r1, #128	; 0x80
 80036ee:	0249      	lsls	r1, r1, #9
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e02f      	b.n	8003756 <HAL_RCC_OscConfig+0xd6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0x98>
 80036fe:	4bac      	ldr	r3, [pc, #688]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4bab      	ldr	r3, [pc, #684]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003704:	49ab      	ldr	r1, [pc, #684]	; (80039b4 <HAL_RCC_OscConfig+0x334>)
 8003706:	400a      	ands	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	4ba9      	ldr	r3, [pc, #676]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4ba8      	ldr	r3, [pc, #672]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003710:	49a9      	ldr	r1, [pc, #676]	; (80039b8 <HAL_RCC_OscConfig+0x338>)
 8003712:	400a      	ands	r2, r1
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e01e      	b.n	8003756 <HAL_RCC_OscConfig+0xd6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b05      	cmp	r3, #5
 800371e:	d10e      	bne.n	800373e <HAL_RCC_OscConfig+0xbe>
 8003720:	4ba3      	ldr	r3, [pc, #652]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4ba2      	ldr	r3, [pc, #648]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	02c9      	lsls	r1, r1, #11
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	4ba0      	ldr	r3, [pc, #640]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b9f      	ldr	r3, [pc, #636]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	0249      	lsls	r1, r1, #9
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e00b      	b.n	8003756 <HAL_RCC_OscConfig+0xd6>
 800373e:	4b9c      	ldr	r3, [pc, #624]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b9b      	ldr	r3, [pc, #620]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003744:	499b      	ldr	r1, [pc, #620]	; (80039b4 <HAL_RCC_OscConfig+0x334>)
 8003746:	400a      	ands	r2, r1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	4b99      	ldr	r3, [pc, #612]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b98      	ldr	r3, [pc, #608]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003750:	4999      	ldr	r1, [pc, #612]	; (80039b8 <HAL_RCC_OscConfig+0x338>)
 8003752:	400a      	ands	r2, r1
 8003754:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d014      	beq.n	8003788 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fc fd9b 	bl	8000298 <HAL_GetTick>
 8003762:	0003      	movs	r3, r0
 8003764:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003768:	f7fc fd96 	bl	8000298 <HAL_GetTick>
 800376c:	0002      	movs	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e2db      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b8d      	ldr	r3, [pc, #564]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	029b      	lsls	r3, r3, #10
 8003782:	4013      	ands	r3, r2
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xe8>
 8003786:	e015      	b.n	80037b4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fc fd86 	bl	8000298 <HAL_GetTick>
 800378c:	0003      	movs	r3, r0
 800378e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003792:	f7fc fd81 	bl	8000298 <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	; 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e2c6      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a4:	4b82      	ldr	r3, [pc, #520]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	029b      	lsls	r3, r3, #10
 80037ac:	4013      	ands	r3, r2
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x112>
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2202      	movs	r2, #2
 80037ba:	4013      	ands	r3, r2
 80037bc:	d100      	bne.n	80037c0 <HAL_RCC_OscConfig+0x140>
 80037be:	e06c      	b.n	800389a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037c0:	4b7b      	ldr	r3, [pc, #492]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	220c      	movs	r2, #12
 80037c6:	4013      	ands	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037ca:	4b79      	ldr	r3, [pc, #484]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	220c      	movs	r2, #12
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d11f      	bne.n	8003816 <HAL_RCC_OscConfig+0x196>
 80037d6:	4b76      	ldr	r3, [pc, #472]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	23c0      	movs	r3, #192	; 0xc0
 80037dc:	025b      	lsls	r3, r3, #9
 80037de:	401a      	ands	r2, r3
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d116      	bne.n	8003816 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e8:	4b71      	ldr	r3, [pc, #452]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2202      	movs	r2, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d005      	beq.n	80037fe <HAL_RCC_OscConfig+0x17e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e299      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	4b6c      	ldr	r3, [pc, #432]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	22f8      	movs	r2, #248	; 0xf8
 8003804:	4393      	bics	r3, r2
 8003806:	0019      	movs	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	00da      	lsls	r2, r3, #3
 800380e:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003814:	e041      	b.n	800389a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d024      	beq.n	8003868 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800381e:	4b64      	ldr	r3, [pc, #400]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003824:	2101      	movs	r1, #1
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fc fd35 	bl	8000298 <HAL_GetTick>
 800382e:	0003      	movs	r3, r0
 8003830:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003834:	f7fc fd30 	bl	8000298 <HAL_GetTick>
 8003838:	0002      	movs	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e275      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003846:	4b5a      	ldr	r3, [pc, #360]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2202      	movs	r2, #2
 800384c:	4013      	ands	r3, r2
 800384e:	d0f1      	beq.n	8003834 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4b57      	ldr	r3, [pc, #348]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	22f8      	movs	r2, #248	; 0xf8
 8003856:	4393      	bics	r3, r2
 8003858:	0019      	movs	r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00da      	lsls	r2, r3, #3
 8003860:	4b53      	ldr	r3, [pc, #332]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e018      	b.n	800389a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003868:	4b51      	ldr	r3, [pc, #324]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 800386e:	2101      	movs	r1, #1
 8003870:	438a      	bics	r2, r1
 8003872:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fc fd10 	bl	8000298 <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387e:	f7fc fd0b 	bl	8000298 <HAL_GetTick>
 8003882:	0002      	movs	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e250      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003890:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2202      	movs	r2, #2
 8003896:	4013      	ands	r3, r2
 8003898:	d1f1      	bne.n	800387e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2208      	movs	r2, #8
 80038a0:	4013      	ands	r3, r2
 80038a2:	d036      	beq.n	8003912 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d019      	beq.n	80038e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ac:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80038ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b0:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80038b2:	2101      	movs	r1, #1
 80038b4:	430a      	orrs	r2, r1
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b8:	f7fc fcee 	bl	8000298 <HAL_GetTick>
 80038bc:	0003      	movs	r3, r0
 80038be:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c2:	f7fc fce9 	bl	8000298 <HAL_GetTick>
 80038c6:	0002      	movs	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e22e      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d4:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2202      	movs	r2, #2
 80038da:	4013      	ands	r3, r2
 80038dc:	d0f1      	beq.n	80038c2 <HAL_RCC_OscConfig+0x242>
 80038de:	e018      	b.n	8003912 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e0:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80038e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e4:	4b32      	ldr	r3, [pc, #200]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80038e6:	2101      	movs	r1, #1
 80038e8:	438a      	bics	r2, r1
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ec:	f7fc fcd4 	bl	8000298 <HAL_GetTick>
 80038f0:	0003      	movs	r3, r0
 80038f2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f6:	f7fc fccf 	bl	8000298 <HAL_GetTick>
 80038fa:	0002      	movs	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e214      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	2202      	movs	r2, #2
 800390e:	4013      	ands	r3, r2
 8003910:	d1f1      	bne.n	80038f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2204      	movs	r2, #4
 8003918:	4013      	ands	r3, r2
 800391a:	d100      	bne.n	800391e <HAL_RCC_OscConfig+0x29e>
 800391c:	e0b6      	b.n	8003a8c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391e:	2317      	movs	r3, #23
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	055b      	lsls	r3, r3, #21
 800392e:	4013      	ands	r3, r2
 8003930:	d111      	bne.n	8003956 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	0549      	lsls	r1, r1, #21
 800393c:	430a      	orrs	r2, r1
 800393e:	61da      	str	r2, [r3, #28]
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	055b      	lsls	r3, r3, #21
 8003948:	4013      	ands	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800394e:	2317      	movs	r3, #23
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_OscConfig+0x33c>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4013      	ands	r3, r2
 8003960:	d11a      	bne.n	8003998 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <HAL_RCC_OscConfig+0x33c>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_RCC_OscConfig+0x33c>)
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	0049      	lsls	r1, r1, #1
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003970:	f7fc fc92 	bl	8000298 <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7fc fc8d 	bl	8000298 <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	; 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e1d2      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_OscConfig+0x33c>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4013      	ands	r3, r2
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10f      	bne.n	80039c0 <HAL_RCC_OscConfig+0x340>
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <HAL_RCC_OscConfig+0x330>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	430a      	orrs	r2, r1
 80039aa:	621a      	str	r2, [r3, #32]
 80039ac:	e036      	b.n	8003a1c <HAL_RCC_OscConfig+0x39c>
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	40021000 	.word	0x40021000
 80039b4:	fffeffff 	.word	0xfffeffff
 80039b8:	fffbffff 	.word	0xfffbffff
 80039bc:	40007000 	.word	0x40007000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10c      	bne.n	80039e2 <HAL_RCC_OscConfig+0x362>
 80039c8:	4bca      	ldr	r3, [pc, #808]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	4bc9      	ldr	r3, [pc, #804]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 80039ce:	2101      	movs	r1, #1
 80039d0:	438a      	bics	r2, r1
 80039d2:	621a      	str	r2, [r3, #32]
 80039d4:	4bc7      	ldr	r3, [pc, #796]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	4bc6      	ldr	r3, [pc, #792]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 80039da:	2104      	movs	r1, #4
 80039dc:	438a      	bics	r2, r1
 80039de:	621a      	str	r2, [r3, #32]
 80039e0:	e01c      	b.n	8003a1c <HAL_RCC_OscConfig+0x39c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x384>
 80039ea:	4bc2      	ldr	r3, [pc, #776]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	4bc1      	ldr	r3, [pc, #772]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 80039f0:	2104      	movs	r1, #4
 80039f2:	430a      	orrs	r2, r1
 80039f4:	621a      	str	r2, [r3, #32]
 80039f6:	4bbf      	ldr	r3, [pc, #764]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	4bbe      	ldr	r3, [pc, #760]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	430a      	orrs	r2, r1
 8003a00:	621a      	str	r2, [r3, #32]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0x39c>
 8003a04:	4bbb      	ldr	r3, [pc, #748]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	4bba      	ldr	r3, [pc, #744]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	621a      	str	r2, [r3, #32]
 8003a10:	4bb8      	ldr	r3, [pc, #736]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	4bb7      	ldr	r3, [pc, #732]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003a16:	2104      	movs	r1, #4
 8003a18:	438a      	bics	r2, r1
 8003a1a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d014      	beq.n	8003a4e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a24:	f7fc fc38 	bl	8000298 <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2c:	e009      	b.n	8003a42 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fc fc33 	bl	8000298 <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	4aaf      	ldr	r2, [pc, #700]	; (8003cf8 <HAL_RCC_OscConfig+0x678>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e177      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a42:	4bac      	ldr	r3, [pc, #688]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	2202      	movs	r2, #2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x3ae>
 8003a4c:	e013      	b.n	8003a76 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4e:	f7fc fc23 	bl	8000298 <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a56:	e009      	b.n	8003a6c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a58:	f7fc fc1e 	bl	8000298 <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	4aa5      	ldr	r2, [pc, #660]	; (8003cf8 <HAL_RCC_OscConfig+0x678>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e162      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6c:	4ba1      	ldr	r3, [pc, #644]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	2202      	movs	r2, #2
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a76:	2317      	movs	r3, #23
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a80:	4b9c      	ldr	r3, [pc, #624]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	4b9b      	ldr	r3, [pc, #620]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003a86:	499d      	ldr	r1, [pc, #628]	; (8003cfc <HAL_RCC_OscConfig+0x67c>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2210      	movs	r2, #16
 8003a92:	4013      	ands	r3, r2
 8003a94:	d063      	beq.n	8003b5e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d12a      	bne.n	8003af4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a9e:	4b95      	ldr	r3, [pc, #596]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa2:	4b94      	ldr	r3, [pc, #592]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003aa4:	2104      	movs	r1, #4
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003aaa:	4b92      	ldr	r3, [pc, #584]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aae:	4b91      	ldr	r3, [pc, #580]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab6:	f7fc fbef 	bl	8000298 <HAL_GetTick>
 8003aba:	0003      	movs	r3, r0
 8003abc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ac0:	f7fc fbea 	bl	8000298 <HAL_GetTick>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e12f      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ad2:	4b88      	ldr	r3, [pc, #544]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d0f1      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003adc:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae0:	22f8      	movs	r2, #248	; 0xf8
 8003ae2:	4393      	bics	r3, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	00da      	lsls	r2, r3, #3
 8003aec:	4b81      	ldr	r3, [pc, #516]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003aee:	430a      	orrs	r2, r1
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34
 8003af2:	e034      	b.n	8003b5e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	3305      	adds	r3, #5
 8003afa:	d111      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003afc:	4b7d      	ldr	r3, [pc, #500]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b00:	4b7c      	ldr	r3, [pc, #496]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b02:	2104      	movs	r1, #4
 8003b04:	438a      	bics	r2, r1
 8003b06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b08:	4b7a      	ldr	r3, [pc, #488]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0c:	22f8      	movs	r2, #248	; 0xf8
 8003b0e:	4393      	bics	r3, r2
 8003b10:	0019      	movs	r1, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	00da      	lsls	r2, r3, #3
 8003b18:	4b76      	ldr	r3, [pc, #472]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b1e:	e01e      	b.n	8003b5e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b20:	4b74      	ldr	r3, [pc, #464]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b24:	4b73      	ldr	r3, [pc, #460]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b26:	2104      	movs	r1, #4
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003b2c:	4b71      	ldr	r3, [pc, #452]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b30:	4b70      	ldr	r3, [pc, #448]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b32:	2101      	movs	r1, #1
 8003b34:	438a      	bics	r2, r1
 8003b36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b38:	f7fc fbae 	bl	8000298 <HAL_GetTick>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b42:	f7fc fba9 	bl	8000298 <HAL_GetTick>
 8003b46:	0002      	movs	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e0ee      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b54:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	2202      	movs	r2, #2
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d1f1      	bne.n	8003b42 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2220      	movs	r2, #32
 8003b64:	4013      	ands	r3, r2
 8003b66:	d05c      	beq.n	8003c22 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003b68:	4b62      	ldr	r3, [pc, #392]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	220c      	movs	r2, #12
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	d00e      	beq.n	8003b92 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003b74:	4b5f      	ldr	r3, [pc, #380]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	220c      	movs	r2, #12
 8003b7a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d114      	bne.n	8003baa <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003b80:	4b5c      	ldr	r3, [pc, #368]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	23c0      	movs	r3, #192	; 0xc0
 8003b86:	025b      	lsls	r3, r3, #9
 8003b88:	401a      	ands	r2, r3
 8003b8a:	23c0      	movs	r3, #192	; 0xc0
 8003b8c:	025b      	lsls	r3, r3, #9
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d10b      	bne.n	8003baa <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003b92:	4b58      	ldr	r3, [pc, #352]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	025b      	lsls	r3, r3, #9
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d040      	beq.n	8003c20 <HAL_RCC_OscConfig+0x5a0>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d03c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0c3      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01b      	beq.n	8003bea <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003bb2:	4b50      	ldr	r3, [pc, #320]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb6:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003bb8:	2180      	movs	r1, #128	; 0x80
 8003bba:	0249      	lsls	r1, r1, #9
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fc fb6a 	bl	8000298 <HAL_GetTick>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bca:	f7fc fb65 	bl	8000298 <HAL_GetTick>
 8003bce:	0002      	movs	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e0aa      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003bdc:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	025b      	lsls	r3, r3, #9
 8003be4:	4013      	ands	r3, r2
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x54a>
 8003be8:	e01b      	b.n	8003c22 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003bea:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bee:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003bf0:	4943      	ldr	r1, [pc, #268]	; (8003d00 <HAL_RCC_OscConfig+0x680>)
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf6:	f7fc fb4f 	bl	8000298 <HAL_GetTick>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c00:	f7fc fb4a 	bl	8000298 <HAL_GetTick>
 8003c04:	0002      	movs	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e08f      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	025b      	lsls	r3, r3, #9
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x580>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003c20:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d100      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5ac>
 8003c2a:	e081      	b.n	8003d30 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	220c      	movs	r2, #12
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d100      	bne.n	8003c3a <HAL_RCC_OscConfig+0x5ba>
 8003c38:	e078      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d14c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003c48:	492e      	ldr	r1, [pc, #184]	; (8003d04 <HAL_RCC_OscConfig+0x684>)
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fc fb23 	bl	8000298 <HAL_GetTick>
 8003c52:	0003      	movs	r3, r0
 8003c54:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fc fb1e 	bl	8000298 <HAL_GetTick>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e063      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	049b      	lsls	r3, r3, #18
 8003c72:	4013      	ands	r3, r2
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	220f      	movs	r2, #15
 8003c7c:	4393      	bics	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003c86:	430a      	orrs	r2, r1
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_RCC_OscConfig+0x688>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	0449      	lsls	r1, r1, #17
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fc faf1 	bl	8000298 <HAL_GetTick>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fc faec 	bl	8000298 <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e031      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	049b      	lsls	r3, r3, #18
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x63c>
 8003cda:	e029      	b.n	8003d30 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <HAL_RCC_OscConfig+0x674>)
 8003ce2:	4908      	ldr	r1, [pc, #32]	; (8003d04 <HAL_RCC_OscConfig+0x684>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fc fad6 	bl	8000298 <HAL_GetTick>
 8003cec:	0003      	movs	r3, r0
 8003cee:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf0:	e015      	b.n	8003d1e <HAL_RCC_OscConfig+0x69e>
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	00001388 	.word	0x00001388
 8003cfc:	efffffff 	.word	0xefffffff
 8003d00:	fffeffff 	.word	0xfffeffff
 8003d04:	feffffff 	.word	0xfeffffff
 8003d08:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fc fac4 	bl	8000298 <HAL_GetTick>
 8003d10:	0002      	movs	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e009      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_RCC_OscConfig+0x6bc>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	049b      	lsls	r3, r3, #18
 8003d26:	4013      	ands	r3, r2
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x68c>
 8003d2a:	e001      	b.n	8003d30 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b006      	add	sp, #24
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	40021000 	.word	0x40021000

08003d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003d4e:	4b7b      	ldr	r3, [pc, #492]	; (8003f3c <HAL_RCC_ClockConfig+0x1fc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2201      	movs	r2, #1
 8003d54:	4013      	ands	r3, r2
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d911      	bls.n	8003d80 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5c:	4b77      	ldr	r3, [pc, #476]	; (8003f3c <HAL_RCC_ClockConfig+0x1fc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2201      	movs	r2, #1
 8003d62:	4393      	bics	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	4b75      	ldr	r3, [pc, #468]	; (8003f3c <HAL_RCC_ClockConfig+0x1fc>)
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d6e:	4b73      	ldr	r3, [pc, #460]	; (8003f3c <HAL_RCC_ClockConfig+0x1fc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2201      	movs	r2, #1
 8003d74:	4013      	ands	r3, r2
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0d8      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2202      	movs	r2, #2
 8003d86:	4013      	ands	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8a:	4b6d      	ldr	r3, [pc, #436]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	22f0      	movs	r2, #240	; 0xf0
 8003d90:	4393      	bics	r3, r2
 8003d92:	0019      	movs	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	4b69      	ldr	r3, [pc, #420]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	d100      	bne.n	8003daa <HAL_RCC_ClockConfig+0x6a>
 8003da8:	e089      	b.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b63      	ldr	r3, [pc, #396]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	029b      	lsls	r3, r3, #10
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d120      	bne.n	8003e00 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0b7      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	4b5d      	ldr	r3, [pc, #372]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	049b      	lsls	r3, r3, #18
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d114      	bne.n	8003e00 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0ab      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	025b      	lsls	r3, r3, #9
 8003dea:	4013      	ands	r3, r2
 8003dec:	d108      	bne.n	8003e00 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e09f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2202      	movs	r2, #2
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e098      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e00:	4b4f      	ldr	r3, [pc, #316]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2203      	movs	r2, #3
 8003e06:	4393      	bics	r3, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	4b4c      	ldr	r3, [pc, #304]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003e10:	430a      	orrs	r2, r1
 8003e12:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e14:	f7fc fa40 	bl	8000298 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d111      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e24:	e009      	b.n	8003e3a <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e26:	f7fc fa37 	bl	8000298 <HAL_GetTick>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	4a44      	ldr	r2, [pc, #272]	; (8003f44 <HAL_RCC_ClockConfig+0x204>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e07b      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e3a:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	220c      	movs	r2, #12
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d1ef      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xe6>
 8003e46:	e03a      	b.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d111      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e50:	e009      	b.n	8003e66 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e52:	f7fc fa21 	bl	8000298 <HAL_GetTick>
 8003e56:	0002      	movs	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	4a39      	ldr	r2, [pc, #228]	; (8003f44 <HAL_RCC_ClockConfig+0x204>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e065      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	220c      	movs	r2, #12
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d1ef      	bne.n	8003e52 <HAL_RCC_ClockConfig+0x112>
 8003e72:	e024      	b.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8003e7c:	e009      	b.n	8003e92 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7e:	f7fc fa0b 	bl	8000298 <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	4a2e      	ldr	r2, [pc, #184]	; (8003f44 <HAL_RCC_ClockConfig+0x204>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8003e92:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	220c      	movs	r2, #12
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d1ef      	bne.n	8003e7e <HAL_RCC_ClockConfig+0x13e>
 8003e9e:	e00e      	b.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7fc f9fa 	bl	8000298 <HAL_GetTick>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <HAL_RCC_ClockConfig+0x204>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e03e      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eb4:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	220c      	movs	r2, #12
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003ebe:	4b1f      	ldr	r3, [pc, #124]	; (8003f3c <HAL_RCC_ClockConfig+0x1fc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d211      	bcs.n	8003ef0 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_ClockConfig+0x1fc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4393      	bics	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_ClockConfig+0x1fc>)
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ede:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <HAL_RCC_ClockConfig+0x1fc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e020      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <HAL_RCC_ClockConfig+0x208>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	0019      	movs	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f0e:	f000 f821 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003f12:	0001      	movs	r1, r0
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	4a0b      	ldr	r2, [pc, #44]	; (8003f4c <HAL_RCC_ClockConfig+0x20c>)
 8003f20:	5cd3      	ldrb	r3, [r2, r3]
 8003f22:	000a      	movs	r2, r1
 8003f24:	40da      	lsrs	r2, r3
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <HAL_RCC_ClockConfig+0x210>)
 8003f28:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f7fc f98c 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b004      	add	sp, #16
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	40022000 	.word	0x40022000
 8003f40:	40021000 	.word	0x40021000
 8003f44:	00001388 	.word	0x00001388
 8003f48:	fffff8ff 	.word	0xfffff8ff
 8003f4c:	08008394 	.word	0x08008394
 8003f50:	2000011c 	.word	0x2000011c

08003f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b08f      	sub	sp, #60	; 0x3c
 8003f58:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003f5a:	2314      	movs	r3, #20
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	4a37      	ldr	r2, [pc, #220]	; (800403c <HAL_RCC_GetSysClockFreq+0xe8>)
 8003f60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003f62:	c313      	stmia	r3!, {r0, r1, r4}
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	4a35      	ldr	r2, [pc, #212]	; (8004040 <HAL_RCC_GetSysClockFreq+0xec>)
 8003f6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003f6e:	c313      	stmia	r3!, {r0, r1, r4}
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003f88:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	220c      	movs	r2, #12
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d006      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x52>
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	d043      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0xd0>
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d144      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003fa2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fa4:	e044      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	0c9b      	lsrs	r3, r3, #18
 8003faa:	220f      	movs	r2, #15
 8003fac:	4013      	ands	r3, r2
 8003fae:	2214      	movs	r2, #20
 8003fb0:	18ba      	adds	r2, r7, r2
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	220f      	movs	r2, #15
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	1d3a      	adds	r2, r7, #4
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc6:	23c0      	movs	r3, #192	; 0xc0
 8003fc8:	025b      	lsls	r3, r3, #9
 8003fca:	401a      	ands	r2, r3
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	025b      	lsls	r3, r3, #9
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d109      	bne.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd6:	481c      	ldr	r0, [pc, #112]	; (8004048 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003fd8:	f7fc f896 	bl	8000108 <__udivsi3>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	001a      	movs	r2, r3
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	4353      	muls	r3, r2
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe6:	e01a      	b.n	800401e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fea:	23c0      	movs	r3, #192	; 0xc0
 8003fec:	025b      	lsls	r3, r3, #9
 8003fee:	401a      	ands	r2, r3
 8003ff0:	23c0      	movs	r3, #192	; 0xc0
 8003ff2:	025b      	lsls	r3, r3, #9
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d109      	bne.n	800400c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8003ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffa:	4814      	ldr	r0, [pc, #80]	; (800404c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ffc:	f7fc f884 	bl	8000108 <__udivsi3>
 8004000:	0003      	movs	r3, r0
 8004002:	001a      	movs	r2, r3
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	4353      	muls	r3, r2
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
 800400a:	e008      	b.n	800401e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800400c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800400e:	480e      	ldr	r0, [pc, #56]	; (8004048 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004010:	f7fc f87a 	bl	8000108 <__udivsi3>
 8004014:	0003      	movs	r3, r0
 8004016:	001a      	movs	r2, r3
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	4353      	muls	r3, r2
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 800401e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004022:	e005      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004026:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004028:	e002      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <HAL_RCC_GetSysClockFreq+0xf4>)
 800402c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800402e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b00f      	add	sp, #60	; 0x3c
 8004038:	bd90      	pop	{r4, r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	080082cc 	.word	0x080082cc
 8004040:	080082dc 	.word	0x080082dc
 8004044:	40021000 	.word	0x40021000
 8004048:	007a1200 	.word	0x007a1200
 800404c:	02dc6c00 	.word	0x02dc6c00

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <HAL_RCC_GetHCLKFreq+0x10>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	0018      	movs	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	2000011c 	.word	0x2000011c

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004068:	f7ff fff2 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800406c:	0001      	movs	r1, r0
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	2207      	movs	r2, #7
 8004076:	4013      	ands	r3, r2
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <HAL_RCC_GetPCLK1Freq+0x28>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	40d9      	lsrs	r1, r3
 800407e:	000b      	movs	r3, r1
}    
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	40021000 	.word	0x40021000
 800408c:	080083a4 	.word	0x080083a4

08004090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	025b      	lsls	r3, r3, #9
 80040a8:	4013      	ands	r3, r2
 80040aa:	d100      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80040ac:	e08f      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80040ae:	2317      	movs	r3, #23
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b6:	4b6f      	ldr	r3, [pc, #444]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	055b      	lsls	r3, r3, #21
 80040be:	4013      	ands	r3, r2
 80040c0:	d111      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	4b6c      	ldr	r3, [pc, #432]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	4b6b      	ldr	r3, [pc, #428]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	0549      	lsls	r1, r1, #21
 80040cc:	430a      	orrs	r2, r1
 80040ce:	61da      	str	r2, [r3, #28]
 80040d0:	4b68      	ldr	r3, [pc, #416]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	055b      	lsls	r3, r3, #21
 80040d8:	4013      	ands	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040de:	2317      	movs	r3, #23
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b64      	ldr	r3, [pc, #400]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	2380      	movs	r3, #128	; 0x80
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	d11a      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b61      	ldr	r3, [pc, #388]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b60      	ldr	r3, [pc, #384]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	0049      	lsls	r1, r1, #1
 80040fc:	430a      	orrs	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004100:	f7fc f8ca 	bl	8000298 <HAL_GetTick>
 8004104:	0003      	movs	r3, r0
 8004106:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	e008      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410a:	f7fc f8c5 	bl	8000298 <HAL_GetTick>
 800410e:	0002      	movs	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b64      	cmp	r3, #100	; 0x64
 8004116:	d901      	bls.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e0a6      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	4b56      	ldr	r3, [pc, #344]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4013      	ands	r3, r2
 8004126:	d0f0      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004128:	4b52      	ldr	r3, [pc, #328]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	23c0      	movs	r3, #192	; 0xc0
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d034      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	23c0      	movs	r3, #192	; 0xc0
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4013      	ands	r3, r2
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	429a      	cmp	r2, r3
 8004148:	d02c      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800414a:	4b4a      	ldr	r3, [pc, #296]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4a4b      	ldr	r2, [pc, #300]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004150:	4013      	ands	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004154:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	4b46      	ldr	r3, [pc, #280]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	0249      	lsls	r1, r1, #9
 800415e:	430a      	orrs	r2, r1
 8004160:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004162:	4b44      	ldr	r3, [pc, #272]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004164:	6a1a      	ldr	r2, [r3, #32]
 8004166:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004168:	4945      	ldr	r1, [pc, #276]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800416a:	400a      	ands	r2, r1
 800416c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	4013      	ands	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fc f88c 	bl	8000298 <HAL_GetTick>
 8004180:	0003      	movs	r3, r0
 8004182:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004184:	e009      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fc f887 	bl	8000298 <HAL_GetTick>
 800418a:	0002      	movs	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e067      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	2202      	movs	r2, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a4:	4b33      	ldr	r3, [pc, #204]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	4a34      	ldr	r2, [pc, #208]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	0019      	movs	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	4b30      	ldr	r3, [pc, #192]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80041b4:	430a      	orrs	r2, r1
 80041b6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041b8:	2317      	movs	r3, #23
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d105      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c2:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80041c8:	492f      	ldr	r1, [pc, #188]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041ca:	400a      	ands	r2, r1
 80041cc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	4013      	ands	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d8:	4b26      	ldr	r3, [pc, #152]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	2203      	movs	r2, #3
 80041de:	4393      	bics	r3, r2
 80041e0:	0019      	movs	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	4b23      	ldr	r3, [pc, #140]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80041e8:	430a      	orrs	r2, r1
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2202      	movs	r2, #2
 80041f2:	4013      	ands	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041f6:	4b1f      	ldr	r3, [pc, #124]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	4a24      	ldr	r2, [pc, #144]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004206:	430a      	orrs	r2, r1
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2220      	movs	r2, #32
 8004210:	4013      	ands	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	2210      	movs	r2, #16
 800421a:	4393      	bics	r3, r2
 800421c:	0019      	movs	r1, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004224:	430a      	orrs	r2, r1
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	4013      	ands	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	4393      	bics	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004244:	430a      	orrs	r2, r1
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4013      	ands	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	2240      	movs	r2, #64	; 0x40
 800425a:	4393      	bics	r3, r2
 800425c:	0019      	movs	r1, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	4b04      	ldr	r3, [pc, #16]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004264:	430a      	orrs	r2, r1
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b006      	add	sp, #24
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	40021000 	.word	0x40021000
 8004278:	40007000 	.word	0x40007000
 800427c:	fffffcff 	.word	0xfffffcff
 8004280:	fffeffff 	.word	0xfffeffff
 8004284:	00001388 	.word	0x00001388
 8004288:	efffffff 	.word	0xefffffff
 800428c:	fffcffff 	.word	0xfffcffff

08004290 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t value = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800429c:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <HAL_RCCEx_CRSConfig+0x80>)
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCCEx_CRSConfig+0x80>)
 80042a2:	2180      	movs	r1, #128	; 0x80
 80042a4:	0509      	lsls	r1, r1, #20
 80042a6:	430a      	orrs	r2, r1
 80042a8:	611a      	str	r2, [r3, #16]
  __HAL_RCC_CRS_RELEASE_RESET();
 80042aa:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_RCCEx_CRSConfig+0x80>)
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <HAL_RCCEx_CRSConfig+0x80>)
 80042b0:	4918      	ldr	r1, [pc, #96]	; (8004314 <HAL_RCCEx_CRSConfig+0x84>)
 80042b2:	400a      	ands	r2, r1
 80042b4:	611a      	str	r2, [r3, #16]

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_BITNUMBER);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <HAL_RCCEx_CRSConfig+0x88>)
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_BITNUMBER));
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <HAL_RCCEx_CRSConfig+0x88>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0c      	ldr	r2, [pc, #48]	; (800431c <HAL_RCCEx_CRSConfig+0x8c>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	0019      	movs	r1, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	021a      	lsls	r2, r3, #8
 80042f4:	4b08      	ldr	r3, [pc, #32]	; (8004318 <HAL_RCCEx_CRSConfig+0x88>)
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
  
  /* START AUTOMATIC SYNCHRONIZATION*/
  
  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <HAL_RCCEx_CRSConfig+0x88>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCCEx_CRSConfig+0x88>)
 8004300:	2160      	movs	r1, #96	; 0x60
 8004302:	430a      	orrs	r2, r1
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	46bd      	mov	sp, r7
 800430a:	b004      	add	sp, #16
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	40021000 	.word	0x40021000
 8004314:	f7ffffff 	.word	0xf7ffffff
 8004318:	40006c00 	.word	0x40006c00
 800431c:	ffffc0ff 	.word	0xffffc0ff

08004320 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e01e      	b.n	8004370 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	223d      	movs	r2, #61	; 0x3d
 8004336:	5c9b      	ldrb	r3, [r3, r2]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d107      	bne.n	800434e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	223c      	movs	r2, #60	; 0x3c
 8004342:	2100      	movs	r1, #0
 8004344:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f003 f85f 	bl	800740c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	223d      	movs	r2, #61	; 0x3d
 8004352:	2102      	movs	r1, #2
 8004354:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	0019      	movs	r1, r3
 8004360:	0010      	movs	r0, r2
 8004362:	f000 f99d 	bl	80046a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	223d      	movs	r2, #61	; 0x3d
 800436a:	2101      	movs	r1, #1
 800436c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	223d      	movs	r2, #61	; 0x3d
 8004384:	2102      	movs	r1, #2
 8004386:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2101      	movs	r1, #1
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	223d      	movs	r2, #61	; 0x3d
 800439c:	2101      	movs	r1, #1
 800439e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b002      	add	sp, #8
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	223d      	movs	r2, #61	; 0x3d
 80043b8:	2102      	movs	r1, #2
 80043ba:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <HAL_TIM_Base_Stop+0x4c>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	d10d      	bne.n	80043e4 <HAL_TIM_Base_Stop+0x38>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <HAL_TIM_Base_Stop+0x50>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	d107      	bne.n	80043e4 <HAL_TIM_Base_Stop+0x38>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2101      	movs	r1, #1
 80043e0:	438a      	bics	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	223d      	movs	r2, #61	; 0x3d
 80043e8:	2101      	movs	r1, #1
 80043ea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b002      	add	sp, #8
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	00001111 	.word	0x00001111
 80043fc:	00000444 	.word	0x00000444

08004400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2101      	movs	r1, #1
 8004414:	430a      	orrs	r2, r1
 8004416:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2101      	movs	r1, #1
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b002      	add	sp, #8
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2202      	movs	r2, #2
 8004442:	4013      	ands	r3, r2
 8004444:	2b02      	cmp	r3, #2
 8004446:	d124      	bne.n	8004492 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2202      	movs	r2, #2
 8004450:	4013      	ands	r3, r2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d11d      	bne.n	8004492 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2203      	movs	r2, #3
 800445c:	4252      	negs	r2, r2
 800445e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2203      	movs	r2, #3
 800446e:	4013      	ands	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f8fa 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 800447a:	e007      	b.n	800448c <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	0018      	movs	r0, r3
 8004480:	f000 f8ed 	bl	800465e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	0018      	movs	r0, r3
 8004488:	f000 f8f9 	bl	800467e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2204      	movs	r2, #4
 800449a:	4013      	ands	r3, r2
 800449c:	2b04      	cmp	r3, #4
 800449e:	d125      	bne.n	80044ec <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2204      	movs	r2, #4
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d11e      	bne.n	80044ec <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2205      	movs	r2, #5
 80044b4:	4252      	negs	r2, r2
 80044b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699a      	ldr	r2, [r3, #24]
 80044c4:	23c0      	movs	r3, #192	; 0xc0
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4013      	ands	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 f8cd 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 80044d4:	e007      	b.n	80044e6 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 f8c0 	bl	800465e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 f8cc 	bl	800467e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2208      	movs	r2, #8
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d124      	bne.n	8004544 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2208      	movs	r2, #8
 8004502:	4013      	ands	r3, r2
 8004504:	2b08      	cmp	r3, #8
 8004506:	d11d      	bne.n	8004544 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2209      	movs	r2, #9
 800450e:	4252      	negs	r2, r2
 8004510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2204      	movs	r2, #4
 8004516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	2203      	movs	r2, #3
 8004520:	4013      	ands	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f000 f8a1 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 800452c:	e007      	b.n	800453e <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f894 	bl	800465e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f000 f8a0 	bl	800467e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2210      	movs	r2, #16
 800454c:	4013      	ands	r3, r2
 800454e:	2b10      	cmp	r3, #16
 8004550:	d125      	bne.n	800459e <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2210      	movs	r2, #16
 800455a:	4013      	ands	r3, r2
 800455c:	2b10      	cmp	r3, #16
 800455e:	d11e      	bne.n	800459e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2211      	movs	r2, #17
 8004566:	4252      	negs	r2, r2
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2208      	movs	r2, #8
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	23c0      	movs	r3, #192	; 0xc0
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4013      	ands	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f000 f874 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 8004586:	e007      	b.n	8004598 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	0018      	movs	r0, r3
 800458c:	f000 f867 	bl	800465e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0018      	movs	r0, r3
 8004594:	f000 f873 	bl	800467e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2201      	movs	r2, #1
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d10f      	bne.n	80045cc <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d108      	bne.n	80045cc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2202      	movs	r2, #2
 80045c0:	4252      	negs	r2, r2
 80045c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f002 fdf4 	bl	80071b4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2280      	movs	r2, #128	; 0x80
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b80      	cmp	r3, #128	; 0x80
 80045d8:	d10f      	bne.n	80045fa <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d108      	bne.n	80045fa <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2281      	movs	r2, #129	; 0x81
 80045ee:	4252      	negs	r2, r2
 80045f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f000 f920 	bl	800483a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2240      	movs	r2, #64	; 0x40
 8004602:	4013      	ands	r3, r2
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d10f      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2240      	movs	r2, #64	; 0x40
 8004610:	4013      	ands	r3, r2
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d108      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2241      	movs	r2, #65	; 0x41
 800461c:	4252      	negs	r2, r2
 800461e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	0018      	movs	r0, r3
 8004624:	f000 f833 	bl	800468e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2220      	movs	r2, #32
 8004630:	4013      	ands	r3, r2
 8004632:	2b20      	cmp	r3, #32
 8004634:	d10f      	bne.n	8004656 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	4013      	ands	r3, r2
 8004640:	2b20      	cmp	r3, #32
 8004642:	d108      	bne.n	8004656 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2221      	movs	r2, #33	; 0x21
 800464a:	4252      	negs	r2, r2
 800464c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0018      	movs	r0, r3
 8004652:	f000 f8ea 	bl	800482a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46bd      	mov	sp, r7
 800465a:	b002      	add	sp, #8
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b002      	add	sp, #8
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	46bd      	mov	sp, r7
 800467a:	b002      	add	sp, #8
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	46bd      	mov	sp, r7
 800468a:	b002      	add	sp, #8
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a34      	ldr	r2, [pc, #208]	; (8004788 <TIM_Base_SetConfig+0xe8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d008      	beq.n	80046ce <TIM_Base_SetConfig+0x2e>
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	05db      	lsls	r3, r3, #23
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d003      	beq.n	80046ce <TIM_Base_SetConfig+0x2e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a30      	ldr	r2, [pc, #192]	; (800478c <TIM_Base_SetConfig+0xec>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d108      	bne.n	80046e0 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2270      	movs	r2, #112	; 0x70
 80046d2:	4393      	bics	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a29      	ldr	r2, [pc, #164]	; (8004788 <TIM_Base_SetConfig+0xe8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d018      	beq.n	800471a <TIM_Base_SetConfig+0x7a>
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	05db      	lsls	r3, r3, #23
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d013      	beq.n	800471a <TIM_Base_SetConfig+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a25      	ldr	r2, [pc, #148]	; (800478c <TIM_Base_SetConfig+0xec>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <TIM_Base_SetConfig+0x7a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <TIM_Base_SetConfig+0xf0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <TIM_Base_SetConfig+0x7a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a23      	ldr	r2, [pc, #140]	; (8004794 <TIM_Base_SetConfig+0xf4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <TIM_Base_SetConfig+0x7a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a22      	ldr	r2, [pc, #136]	; (8004798 <TIM_Base_SetConfig+0xf8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_Base_SetConfig+0x7a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a21      	ldr	r2, [pc, #132]	; (800479c <TIM_Base_SetConfig+0xfc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <TIM_Base_SetConfig+0x100>)
 800471e:	4013      	ands	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2280      	movs	r2, #128	; 0x80
 8004730:	4393      	bics	r3, r2
 8004732:	001a      	movs	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <TIM_Base_SetConfig+0xe8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00b      	beq.n	8004772 <TIM_Base_SetConfig+0xd2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a0d      	ldr	r2, [pc, #52]	; (8004794 <TIM_Base_SetConfig+0xf4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d007      	beq.n	8004772 <TIM_Base_SetConfig+0xd2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <TIM_Base_SetConfig+0xf8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d003      	beq.n	8004772 <TIM_Base_SetConfig+0xd2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a0b      	ldr	r2, [pc, #44]	; (800479c <TIM_Base_SetConfig+0xfc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d103      	bne.n	800477a <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	615a      	str	r2, [r3, #20]
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b004      	add	sp, #16
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40000400 	.word	0x40000400
 8004790:	40002000 	.word	0x40002000
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	40014800 	.word	0x40014800
 80047a0:	fffffcff 	.word	0xfffffcff

080047a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	223c      	movs	r2, #60	; 0x3c
 80047b2:	5c9b      	ldrb	r3, [r3, r2]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e032      	b.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	223c      	movs	r2, #60	; 0x3c
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	223d      	movs	r2, #61	; 0x3d
 80047c8:	2102      	movs	r1, #2
 80047ca:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2170      	movs	r1, #112	; 0x70
 80047d8:	438a      	bics	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	438a      	bics	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6899      	ldr	r1, [r3, #8]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	223d      	movs	r2, #61	; 0x3d
 8004814:	2101      	movs	r1, #1
 8004816:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	223c      	movs	r2, #60	; 0x3c
 800481c:	2100      	movs	r1, #0
 800481e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b002      	add	sp, #8
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	b002      	add	sp, #8
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b002      	add	sp, #8
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e047      	b.n	80048ee <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2269      	movs	r2, #105	; 0x69
 8004862:	5c9b      	ldrb	r3, [r3, r2]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d107      	bne.n	800487a <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2268      	movs	r2, #104	; 0x68
 800486e:	2100      	movs	r1, #0
 8004870:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	0018      	movs	r0, r3
 8004876:	f002 fe29 	bl	80074cc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2269      	movs	r2, #105	; 0x69
 800487e:	2124      	movs	r1, #36	; 0x24
 8004880:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2101      	movs	r1, #1
 800488e:	438a      	bics	r2, r1
 8004890:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 f831 	bl	80048fc <UART_SetConfig>
 800489a:	0003      	movs	r3, r0
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e024      	b.n	80048ee <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0018      	movs	r0, r3
 80048b0:	f000 f9e0 	bl	8004c74 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	490e      	ldr	r1, [pc, #56]	; (80048f8 <HAL_UART_Init+0xac>)
 80048c0:	400a      	ands	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	212a      	movs	r1, #42	; 0x2a
 80048d0:	438a      	bics	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2101      	movs	r1, #1
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 fa78 	bl	8004ddc <UART_CheckIdleState>
 80048ec:	0003      	movs	r3, r0
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b002      	add	sp, #8
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	ffffb7ff 	.word	0xffffb7ff

080048fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004908:	2317      	movs	r3, #23
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	2210      	movs	r2, #16
 800490e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8004910:	230a      	movs	r3, #10
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	2200      	movs	r2, #0
 8004916:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8004918:	2314      	movs	r3, #20
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	2200      	movs	r2, #0
 800491e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004920:	2313      	movs	r3, #19
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4ac1      	ldr	r2, [pc, #772]	; (8004c4c <UART_SetConfig+0x350>)
 8004948:	4013      	ands	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	430a      	orrs	r2, r1
 8004954:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4abc      	ldr	r2, [pc, #752]	; (8004c50 <UART_SetConfig+0x354>)
 800495e:	4013      	ands	r3, r2
 8004960:	0019      	movs	r1, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4ab4      	ldr	r2, [pc, #720]	; (8004c54 <UART_SetConfig+0x358>)
 8004982:	4013      	ands	r3, r2
 8004984:	0019      	movs	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4ab0      	ldr	r2, [pc, #704]	; (8004c58 <UART_SetConfig+0x35c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d125      	bne.n	80049e6 <UART_SetConfig+0xea>
 800499a:	4bb0      	ldr	r3, [pc, #704]	; (8004c5c <UART_SetConfig+0x360>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	2203      	movs	r2, #3
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d00f      	beq.n	80049c6 <UART_SetConfig+0xca>
 80049a6:	d304      	bcc.n	80049b2 <UART_SetConfig+0xb6>
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d011      	beq.n	80049d0 <UART_SetConfig+0xd4>
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d005      	beq.n	80049bc <UART_SetConfig+0xc0>
 80049b0:	e013      	b.n	80049da <UART_SetConfig+0xde>
 80049b2:	2317      	movs	r3, #23
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	e064      	b.n	8004a86 <UART_SetConfig+0x18a>
 80049bc:	2317      	movs	r3, #23
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	2202      	movs	r2, #2
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	e05f      	b.n	8004a86 <UART_SetConfig+0x18a>
 80049c6:	2317      	movs	r3, #23
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	2204      	movs	r2, #4
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	e05a      	b.n	8004a86 <UART_SetConfig+0x18a>
 80049d0:	2317      	movs	r3, #23
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	2208      	movs	r2, #8
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e055      	b.n	8004a86 <UART_SetConfig+0x18a>
 80049da:	2317      	movs	r3, #23
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	2210      	movs	r2, #16
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	e04f      	b.n	8004a86 <UART_SetConfig+0x18a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a9d      	ldr	r2, [pc, #628]	; (8004c60 <UART_SetConfig+0x364>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d132      	bne.n	8004a56 <UART_SetConfig+0x15a>
 80049f0:	4b9a      	ldr	r3, [pc, #616]	; (8004c5c <UART_SetConfig+0x360>)
 80049f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f4:	23c0      	movs	r3, #192	; 0xc0
 80049f6:	029b      	lsls	r3, r3, #10
 80049f8:	4013      	ands	r3, r2
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	0252      	lsls	r2, r2, #9
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d019      	beq.n	8004a36 <UART_SetConfig+0x13a>
 8004a02:	2280      	movs	r2, #128	; 0x80
 8004a04:	0252      	lsls	r2, r2, #9
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d802      	bhi.n	8004a10 <UART_SetConfig+0x114>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <UART_SetConfig+0x126>
 8004a0e:	e01c      	b.n	8004a4a <UART_SetConfig+0x14e>
 8004a10:	2280      	movs	r2, #128	; 0x80
 8004a12:	0292      	lsls	r2, r2, #10
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <UART_SetConfig+0x144>
 8004a18:	22c0      	movs	r2, #192	; 0xc0
 8004a1a:	0292      	lsls	r2, r2, #10
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d005      	beq.n	8004a2c <UART_SetConfig+0x130>
 8004a20:	e013      	b.n	8004a4a <UART_SetConfig+0x14e>
 8004a22:	2317      	movs	r3, #23
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e02c      	b.n	8004a86 <UART_SetConfig+0x18a>
 8004a2c:	2317      	movs	r3, #23
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	2202      	movs	r2, #2
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e027      	b.n	8004a86 <UART_SetConfig+0x18a>
 8004a36:	2317      	movs	r3, #23
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e022      	b.n	8004a86 <UART_SetConfig+0x18a>
 8004a40:	2317      	movs	r3, #23
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	2208      	movs	r2, #8
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	e01d      	b.n	8004a86 <UART_SetConfig+0x18a>
 8004a4a:	2317      	movs	r3, #23
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2210      	movs	r2, #16
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	e017      	b.n	8004a86 <UART_SetConfig+0x18a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a82      	ldr	r2, [pc, #520]	; (8004c64 <UART_SetConfig+0x368>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d104      	bne.n	8004a6a <UART_SetConfig+0x16e>
 8004a60:	2317      	movs	r3, #23
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e00d      	b.n	8004a86 <UART_SetConfig+0x18a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a7e      	ldr	r2, [pc, #504]	; (8004c68 <UART_SetConfig+0x36c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d104      	bne.n	8004a7e <UART_SetConfig+0x182>
 8004a74:	2317      	movs	r3, #23
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	e003      	b.n	8004a86 <UART_SetConfig+0x18a>
 8004a7e:	2317      	movs	r3, #23
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	2210      	movs	r2, #16
 8004a84:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	2380      	movs	r3, #128	; 0x80
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d000      	beq.n	8004a94 <UART_SetConfig+0x198>
 8004a92:	e077      	b.n	8004b84 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8004a94:	2317      	movs	r3, #23
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d01c      	beq.n	8004ad8 <UART_SetConfig+0x1dc>
 8004a9e:	dc02      	bgt.n	8004aa6 <UART_SetConfig+0x1aa>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <UART_SetConfig+0x1b4>
 8004aa4:	e04f      	b.n	8004b46 <UART_SetConfig+0x24a>
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d027      	beq.n	8004afa <UART_SetConfig+0x1fe>
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d039      	beq.n	8004b22 <UART_SetConfig+0x226>
 8004aae:	e04a      	b.n	8004b46 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ab0:	f7ff fad8 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	005a      	lsls	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	18d2      	adds	r2, r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	0010      	movs	r0, r2
 8004ac8:	f7fb fb1e 	bl	8000108 <__udivsi3>
 8004acc:	0003      	movs	r3, r0
 8004ace:	001a      	movs	r2, r3
 8004ad0:	2314      	movs	r3, #20
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	801a      	strh	r2, [r3, #0]
        break;
 8004ad6:	e03b      	b.n	8004b50 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	4a63      	ldr	r2, [pc, #396]	; (8004c6c <UART_SetConfig+0x370>)
 8004ae0:	189a      	adds	r2, r3, r2
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	0010      	movs	r0, r2
 8004aea:	f7fb fb0d 	bl	8000108 <__udivsi3>
 8004aee:	0003      	movs	r3, r0
 8004af0:	001a      	movs	r2, r3
 8004af2:	2314      	movs	r3, #20
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	801a      	strh	r2, [r3, #0]
        break;
 8004af8:	e02a      	b.n	8004b50 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004afa:	f7ff fa2b 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8004afe:	0003      	movs	r3, r0
 8004b00:	005a      	lsls	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	18d2      	adds	r2, r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	0019      	movs	r1, r3
 8004b10:	0010      	movs	r0, r2
 8004b12:	f7fb faf9 	bl	8000108 <__udivsi3>
 8004b16:	0003      	movs	r3, r0
 8004b18:	001a      	movs	r2, r3
 8004b1a:	2314      	movs	r3, #20
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	801a      	strh	r2, [r3, #0]
        break;
 8004b20:	e016      	b.n	8004b50 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	0252      	lsls	r2, r2, #9
 8004b2c:	189a      	adds	r2, r3, r2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	0019      	movs	r1, r3
 8004b34:	0010      	movs	r0, r2
 8004b36:	f7fb fae7 	bl	8000108 <__udivsi3>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	2314      	movs	r3, #20
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	801a      	strh	r2, [r3, #0]
        break;
 8004b44:	e004      	b.n	8004b50 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004b46:	2313      	movs	r3, #19
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	701a      	strb	r2, [r3, #0]
        break;
 8004b4e:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8004b50:	200a      	movs	r0, #10
 8004b52:	183b      	adds	r3, r7, r0
 8004b54:	2414      	movs	r4, #20
 8004b56:	193a      	adds	r2, r7, r4
 8004b58:	8812      	ldrh	r2, [r2, #0]
 8004b5a:	210f      	movs	r1, #15
 8004b5c:	438a      	bics	r2, r1
 8004b5e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b60:	193b      	adds	r3, r7, r4
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	105b      	asrs	r3, r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2207      	movs	r2, #7
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	b299      	uxth	r1, r3
 8004b6e:	183b      	adds	r3, r7, r0
 8004b70:	183a      	adds	r2, r7, r0
 8004b72:	8812      	ldrh	r2, [r2, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	183a      	adds	r2, r7, r0
 8004b7e:	8812      	ldrh	r2, [r2, #0]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	e05b      	b.n	8004c3c <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8004b84:	2317      	movs	r3, #23
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d01b      	beq.n	8004bc6 <UART_SetConfig+0x2ca>
 8004b8e:	dc02      	bgt.n	8004b96 <UART_SetConfig+0x29a>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <UART_SetConfig+0x2a4>
 8004b94:	e04d      	b.n	8004c32 <UART_SetConfig+0x336>
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d026      	beq.n	8004be8 <UART_SetConfig+0x2ec>
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d037      	beq.n	8004c0e <UART_SetConfig+0x312>
 8004b9e:	e048      	b.n	8004c32 <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ba0:	f7ff fa60 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	18d2      	adds	r2, r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	0010      	movs	r0, r2
 8004bb6:	f7fb faa7 	bl	8000108 <__udivsi3>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
        break;
 8004bc4:	e03a      	b.n	8004c3c <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	4a28      	ldr	r2, [pc, #160]	; (8004c70 <UART_SetConfig+0x374>)
 8004bce:	189a      	adds	r2, r3, r2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	0010      	movs	r0, r2
 8004bd8:	f7fb fa96 	bl	8000108 <__udivsi3>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60da      	str	r2, [r3, #12]
        break;
 8004be6:	e029      	b.n	8004c3c <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004be8:	f7ff f9b4 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8004bec:	0002      	movs	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	18d2      	adds	r2, r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	0010      	movs	r0, r2
 8004bfe:	f7fb fa83 	bl	8000108 <__udivsi3>
 8004c02:	0003      	movs	r3, r0
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
        break;
 8004c0c:	e016      	b.n	8004c3c <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	2280      	movs	r2, #128	; 0x80
 8004c16:	0212      	lsls	r2, r2, #8
 8004c18:	189a      	adds	r2, r3, r2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	0019      	movs	r1, r3
 8004c20:	0010      	movs	r0, r2
 8004c22:	f7fb fa71 	bl	8000108 <__udivsi3>
 8004c26:	0003      	movs	r3, r0
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60da      	str	r2, [r3, #12]
        break;
 8004c30:	e004      	b.n	8004c3c <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c32:	2313      	movs	r3, #19
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	2201      	movs	r2, #1
 8004c38:	701a      	strb	r2, [r3, #0]
        break;
 8004c3a:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8004c3c:	2313      	movs	r3, #19
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	781b      	ldrb	r3, [r3, #0]

}
 8004c42:	0018      	movs	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b007      	add	sp, #28
 8004c48:	bd90      	pop	{r4, r7, pc}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	efff69f3 	.word	0xefff69f3
 8004c50:	ffffcfff 	.word	0xffffcfff
 8004c54:	fffff4ff 	.word	0xfffff4ff
 8004c58:	40013800 	.word	0x40013800
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40004400 	.word	0x40004400
 8004c64:	40004800 	.word	0x40004800
 8004c68:	40004c00 	.word	0x40004c00
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	007a1200 	.word	0x007a1200

08004c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	2201      	movs	r2, #1
 8004c82:	4013      	ands	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a4a      	ldr	r2, [pc, #296]	; (8004db8 <UART_AdvFeatureConfig+0x144>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	0019      	movs	r1, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d00b      	beq.n	8004cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4a43      	ldr	r2, [pc, #268]	; (8004dbc <UART_AdvFeatureConfig+0x148>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a3b      	ldr	r2, [pc, #236]	; (8004dc0 <UART_AdvFeatureConfig+0x14c>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d00b      	beq.n	8004d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4a34      	ldr	r2, [pc, #208]	; (8004dc4 <UART_AdvFeatureConfig+0x150>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	2210      	movs	r2, #16
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a2c      	ldr	r2, [pc, #176]	; (8004dc8 <UART_AdvFeatureConfig+0x154>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4a25      	ldr	r2, [pc, #148]	; (8004dcc <UART_AdvFeatureConfig+0x158>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	0019      	movs	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2240      	movs	r2, #64	; 0x40
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d01d      	beq.n	8004d8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4a1d      	ldr	r2, [pc, #116]	; (8004dd0 <UART_AdvFeatureConfig+0x15c>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	035b      	lsls	r3, r3, #13
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d10b      	bne.n	8004d8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <UART_AdvFeatureConfig+0x160>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	0019      	movs	r1, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	2280      	movs	r2, #128	; 0x80
 8004d94:	4013      	ands	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4a0e      	ldr	r2, [pc, #56]	; (8004dd8 <UART_AdvFeatureConfig+0x164>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	0019      	movs	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }
}
 8004db0:	46c0      	nop			; (mov r8, r8)
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b002      	add	sp, #8
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	fffdffff 	.word	0xfffdffff
 8004dbc:	fffeffff 	.word	0xfffeffff
 8004dc0:	fffbffff 	.word	0xfffbffff
 8004dc4:	ffff7fff 	.word	0xffff7fff
 8004dc8:	ffffefff 	.word	0xffffefff
 8004dcc:	ffffdfff 	.word	0xffffdfff
 8004dd0:	ffefffff 	.word	0xffefffff
 8004dd4:	ff9fffff 	.word	0xff9fffff
 8004dd8:	fff7ffff 	.word	0xfff7ffff

08004ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004dee:	f7fb fa53 	bl	8000298 <HAL_GetTick>
 8004df2:	0003      	movs	r3, r0
 8004df4:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a21      	ldr	r2, [pc, #132]	; (8004e80 <UART_CheckIdleState+0xa4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <UART_CheckIdleState+0x2e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <UART_CheckIdleState+0xa8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d129      	bne.n	8004e5e <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2208      	movs	r2, #8
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d10d      	bne.n	8004e34 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	0399      	lsls	r1, r3, #14
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <UART_CheckIdleState+0xac>)
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	0013      	movs	r3, r2
 8004e26:	2200      	movs	r2, #0
 8004e28:	f000 f830 	bl	8004e8c <UART_WaitOnFlagUntilTimeout>
 8004e2c:	1e03      	subs	r3, r0, #0
 8004e2e:	d001      	beq.n	8004e34 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e021      	b.n	8004e78 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2204      	movs	r2, #4
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d10d      	bne.n	8004e5e <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	03d9      	lsls	r1, r3, #15
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <UART_CheckIdleState+0xac>)
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	0013      	movs	r3, r2
 8004e50:	2200      	movs	r2, #0
 8004e52:	f000 f81b 	bl	8004e8c <UART_WaitOnFlagUntilTimeout>
 8004e56:	1e03      	subs	r3, r0, #0
 8004e58:	d001      	beq.n	8004e5e <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e00c      	b.n	8004e78 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2269      	movs	r2, #105	; 0x69
 8004e62:	2120      	movs	r1, #32
 8004e64:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	226a      	movs	r2, #106	; 0x6a
 8004e6a:	2120      	movs	r1, #32
 8004e6c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2268      	movs	r2, #104	; 0x68
 8004e72:	2100      	movs	r1, #0
 8004e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b004      	add	sp, #16
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40013800 	.word	0x40013800
 8004e84:	40004400 	.word	0x40004400
 8004e88:	01ffffff 	.word	0x01ffffff

08004e8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	1dfb      	adds	r3, r7, #7
 8004e9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9c:	e02b      	b.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	d028      	beq.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <UART_WaitOnFlagUntilTimeout+0x2e>
 8004eaa:	f7fb f9f5 	bl	8000298 <HAL_GetTick>
 8004eae:	0002      	movs	r2, r0
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d21d      	bcs.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4916      	ldr	r1, [pc, #88]	; (8004f20 <UART_WaitOnFlagUntilTimeout+0x94>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	438a      	bics	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2269      	movs	r2, #105	; 0x69
 8004ede:	2120      	movs	r1, #32
 8004ee0:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	226a      	movs	r2, #106	; 0x6a
 8004ee6:	2120      	movs	r1, #32
 8004ee8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2268      	movs	r2, #104	; 0x68
 8004eee:	2100      	movs	r1, #0
 8004ef0:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e00f      	b.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	425a      	negs	r2, r3
 8004f06:	4153      	adcs	r3, r2
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	001a      	movs	r2, r3
 8004f0c:	1dfb      	adds	r3, r7, #7
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d0c4      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b004      	add	sp, #16
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	fffffe5f 	.word	0xfffffe5f

08004f24 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	000a      	movs	r2, r1
 8004f2e:	1cfb      	adds	r3, r7, #3
 8004f30:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8004f32:	230f      	movs	r3, #15
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	2200      	movs	r2, #0
 8004f38:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7c1b      	ldrb	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10e      	bne.n	8004f60 <USBD_CDC_Init+0x3c>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	2181      	movs	r1, #129	; 0x81
 8004f4c:	f002 fe36 	bl	8007bbc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	2101      	movs	r1, #1
 8004f5a:	f002 fe2f 	bl	8007bbc <USBD_LL_OpenEP>
 8004f5e:	e00b      	b.n	8004f78 <USBD_CDC_Init+0x54>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	2340      	movs	r3, #64	; 0x40
 8004f64:	2202      	movs	r2, #2
 8004f66:	2181      	movs	r1, #129	; 0x81
 8004f68:	f002 fe28 	bl	8007bbc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	2340      	movs	r3, #64	; 0x40
 8004f70:	2202      	movs	r2, #2
 8004f72:	2101      	movs	r1, #1
 8004f74:	f002 fe22 	bl	8007bbc <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	2182      	movs	r1, #130	; 0x82
 8004f80:	f002 fe1c 	bl	8007bbc <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004f84:	2387      	movs	r3, #135	; 0x87
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f002 ffb5 	bl	8007ef8 <USBD_static_malloc>
 8004f8e:	0001      	movs	r1, r0
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	2386      	movs	r3, #134	; 0x86
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	50d1      	str	r1, [r2, r3]
  
  if(pdev->pClassData == NULL)
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	2386      	movs	r3, #134	; 0x86
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	58d3      	ldr	r3, [r2, r3]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <USBD_CDC_Init+0x8a>
  {
    ret = 1; 
 8004fa4:	230f      	movs	r3, #15
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2201      	movs	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e02c      	b.n	8005008 <USBD_CDC_Init+0xe4>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	2386      	movs	r3, #134	; 0x86
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	58d3      	ldr	r3, [r2, r3]
 8004fb6:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	2387      	movs	r3, #135	; 0x87
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	58d3      	ldr	r3, [r2, r3]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	2385      	movs	r3, #133	; 0x85
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	2100      	movs	r1, #0
 8004fcc:	50d1      	str	r1, [r2, r3]
    hcdc->RxState =0;
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	2386      	movs	r3, #134	; 0x86
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	50d1      	str	r1, [r2, r3]
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	7c1b      	ldrb	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <USBD_CDC_Init+0xd2>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	2381      	movs	r3, #129	; 0x81
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	58d2      	ldr	r2, [r2, r3]
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	2101      	movs	r1, #1
 8004ff0:	f002 ff34 	bl	8007e5c <USBD_LL_PrepareReceive>
 8004ff4:	e008      	b.n	8005008 <USBD_CDC_Init+0xe4>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	2381      	movs	r3, #129	; 0x81
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	58d2      	ldr	r2, [r2, r3]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	2101      	movs	r1, #1
 8005004:	f002 ff2a 	bl	8007e5c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8005008:	230f      	movs	r3, #15
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	781b      	ldrb	r3, [r3, #0]
}
 800500e:	0018      	movs	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	b004      	add	sp, #16
 8005014:	bd80      	pop	{r7, pc}

08005016 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	000a      	movs	r2, r1
 8005020:	1cfb      	adds	r3, r7, #3
 8005022:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8005024:	230f      	movs	r3, #15
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2181      	movs	r1, #129	; 0x81
 8005030:	0018      	movs	r0, r3
 8005032:	f002 fdfa 	bl	8007c2a <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2101      	movs	r1, #1
 800503a:	0018      	movs	r0, r3
 800503c:	f002 fdf5 	bl	8007c2a <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2182      	movs	r1, #130	; 0x82
 8005044:	0018      	movs	r0, r3
 8005046:	f002 fdf0 	bl	8007c2a <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	2386      	movs	r3, #134	; 0x86
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	58d3      	ldr	r3, [r2, r3]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d011      	beq.n	800507a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	2387      	movs	r3, #135	; 0x87
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	58d3      	ldr	r3, [r2, r3]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	2386      	movs	r3, #134	; 0x86
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	58d3      	ldr	r3, [r2, r3]
 800506a:	0018      	movs	r0, r3
 800506c:	f002 ff50 	bl	8007f10 <USBD_static_free>
    pdev->pClassData = NULL;
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	2386      	movs	r3, #134	; 0x86
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	2100      	movs	r1, #0
 8005078:	50d1      	str	r1, [r2, r3]
  }
  
  return ret;
 800507a:	230f      	movs	r3, #15
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	781b      	ldrb	r3, [r3, #0]
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b004      	add	sp, #16
 8005086:	bd80      	pop	{r7, pc}

08005088 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	2386      	movs	r3, #134	; 0x86
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	58d3      	ldr	r3, [r2, r3]
 800509a:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	001a      	movs	r2, r3
 80050a2:	2360      	movs	r3, #96	; 0x60
 80050a4:	4013      	ands	r3, r2
 80050a6:	d03d      	beq.n	8005124 <USBD_CDC_Setup+0x9c>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d000      	beq.n	80050ae <USBD_CDC_Setup+0x26>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 80050ac:	e046      	b.n	800513c <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	88db      	ldrh	r3, [r3, #6]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d02b      	beq.n	800510e <USBD_CDC_Setup+0x86>
      if (req->bmRequest & 0x80)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	b25b      	sxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da12      	bge.n	80050e6 <USBD_CDC_Setup+0x5e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	2387      	movs	r3, #135	; 0x87
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	58d3      	ldr	r3, [r2, r3]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80050ce:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	88d2      	ldrh	r2, [r2, #6]
 80050d4:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 80050d6:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	88da      	ldrh	r2, [r3, #6]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	0018      	movs	r0, r3
 80050e0:	f001 f944 	bl	800636c <USBD_CtlSendData>
    break;
 80050e4:	e02b      	b.n	800513e <USBD_CDC_Setup+0xb6>
        hcdc->CmdOpCode = req->bRequest;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	7859      	ldrb	r1, [r3, #1]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = req->wLength;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	88db      	ldrh	r3, [r3, #6]
 80050f6:	b2d9      	uxtb	r1, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a13      	ldr	r2, [pc, #76]	; (8005148 <USBD_CDC_Setup+0xc0>)
 80050fc:	5499      	strb	r1, [r3, r2]
                           (uint8_t *)hcdc->data,
 80050fe:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	88da      	ldrh	r2, [r3, #6]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	0018      	movs	r0, r3
 8005108:	f001 f963 	bl	80063d2 <USBD_CtlPrepareRx>
    break;
 800510c:	e017      	b.n	800513e <USBD_CDC_Setup+0xb6>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	2387      	movs	r3, #135	; 0x87
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	58d3      	ldr	r3, [r2, r3]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	7850      	ldrb	r0, [r2, #1]
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	4798      	blx	r3
    break;
 8005122:	e00c      	b.n	800513e <USBD_CDC_Setup+0xb6>
    switch (req->bRequest)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b0a      	cmp	r3, #10
 800512a:	d106      	bne.n	800513a <USBD_CDC_Setup+0xb2>
      USBD_CtlSendData (pdev,
 800512c:	4907      	ldr	r1, [pc, #28]	; (800514c <USBD_CDC_Setup+0xc4>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	0018      	movs	r0, r3
 8005134:	f001 f91a 	bl	800636c <USBD_CtlSendData>
      break;
 8005138:	e000      	b.n	800513c <USBD_CDC_Setup+0xb4>
      break;
 800513a:	46c0      	nop			; (mov r8, r8)
    break;
 800513c:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b004      	add	sp, #16
 8005146:	bd80      	pop	{r7, pc}
 8005148:	00000201 	.word	0x00000201
 800514c:	200001a4 	.word	0x200001a4

08005150 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	000a      	movs	r2, r1
 800515a:	1cfb      	adds	r3, r7, #3
 800515c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	2386      	movs	r3, #134	; 0x86
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	58d3      	ldr	r3, [r2, r3]
 8005166:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	2386      	movs	r3, #134	; 0x86
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	58d3      	ldr	r3, [r2, r3]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d006      	beq.n	8005182 <USBD_CDC_DataIn+0x32>
  {
    
    hcdc->TxState = 0;
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	2385      	movs	r3, #133	; 0x85
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	2100      	movs	r1, #0
 800517c:	50d1      	str	r1, [r2, r3]

    return USBD_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e000      	b.n	8005184 <USBD_CDC_DataIn+0x34>
  }
  else
  {
    return USBD_FAIL;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b004      	add	sp, #16
 800518a:	bd80      	pop	{r7, pc}

0800518c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	000a      	movs	r2, r1
 8005196:	1cfb      	adds	r3, r7, #3
 8005198:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	2386      	movs	r3, #134	; 0x86
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	58d3      	ldr	r3, [r2, r3]
 80051a2:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80051a4:	1cfb      	adds	r3, r7, #3
 80051a6:	781a      	ldrb	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	0011      	movs	r1, r2
 80051ac:	0018      	movs	r0, r3
 80051ae:	f002 fe8d 	bl	8007ecc <USBD_LL_GetRxDataSize>
 80051b2:	0001      	movs	r1, r0
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	2383      	movs	r3, #131	; 0x83
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	50d1      	str	r1, [r2, r3]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	2386      	movs	r3, #134	; 0x86
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	58d3      	ldr	r3, [r2, r3]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d011      	beq.n	80051ec <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	2387      	movs	r3, #135	; 0x87
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	58d3      	ldr	r3, [r2, r3]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	2281      	movs	r2, #129	; 0x81
 80051d6:	0092      	lsls	r2, r2, #2
 80051d8:	5888      	ldr	r0, [r1, r2]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	2183      	movs	r1, #131	; 0x83
 80051de:	0089      	lsls	r1, r1, #2
 80051e0:	468c      	mov	ip, r1
 80051e2:	4462      	add	r2, ip
 80051e4:	0011      	movs	r1, r2
 80051e6:	4798      	blx	r3

    return USBD_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e000      	b.n	80051ee <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80051ec:	2302      	movs	r3, #2
  }
}
 80051ee:	0018      	movs	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	2386      	movs	r3, #134	; 0x86
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	58d3      	ldr	r3, [r2, r3]
 8005208:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	2387      	movs	r3, #135	; 0x87
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	58d3      	ldr	r3, [r2, r3]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01a      	beq.n	800524c <USBD_CDC_EP0_RxReady+0x54>
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	5cd3      	ldrb	r3, [r2, r3]
 800521e:	2bff      	cmp	r3, #255	; 0xff
 8005220:	d014      	beq.n	800524c <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	2387      	movs	r3, #135	; 0x87
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	58d3      	ldr	r3, [r2, r3]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	68f9      	ldr	r1, [r7, #12]
 800522e:	2280      	movs	r2, #128	; 0x80
 8005230:	0092      	lsls	r2, r2, #2
 8005232:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)hcdc->data,
 8005234:	68fc      	ldr	r4, [r7, #12]
                                                      hcdc->CmdLength);
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4907      	ldr	r1, [pc, #28]	; (8005258 <USBD_CDC_EP0_RxReady+0x60>)
 800523a:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800523c:	b292      	uxth	r2, r2
 800523e:	0021      	movs	r1, r4
 8005240:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	21ff      	movs	r1, #255	; 0xff
 800524a:	54d1      	strb	r1, [r2, r3]
      
  }
  return USBD_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	b005      	add	sp, #20
 8005254:	bd90      	pop	{r4, r7, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	00000201 	.word	0x00000201

0800525c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2243      	movs	r2, #67	; 0x43
 8005268:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800526a:	4b02      	ldr	r3, [pc, #8]	; (8005274 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	b002      	add	sp, #8
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000088 	.word	0x20000088

08005278 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2243      	movs	r2, #67	; 0x43
 8005284:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005286:	4b02      	ldr	r3, [pc, #8]	; (8005290 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b002      	add	sp, #8
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000044 	.word	0x20000044

08005294 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2243      	movs	r2, #67	; 0x43
 80052a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80052a2:	4b02      	ldr	r3, [pc, #8]	; (80052ac <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80052a4:	0018      	movs	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b002      	add	sp, #8
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	200000cc 	.word	0x200000cc

080052b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	220a      	movs	r2, #10
 80052bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80052be:	4b02      	ldr	r3, [pc, #8]	; (80052c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80052c0:	0018      	movs	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b002      	add	sp, #8
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000000 	.word	0x20000000

080052cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80052d6:	230f      	movs	r3, #15
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	2202      	movs	r2, #2
 80052dc:	701a      	strb	r2, [r3, #0]
  
  if(fops != NULL)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	2387      	movs	r3, #135	; 0x87
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;    
 80052ee:	230f      	movs	r3, #15
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80052f6:	230f      	movs	r3, #15
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	781b      	ldrb	r3, [r3, #0]
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b004      	add	sp, #16
 8005302:	bd80      	pop	{r7, pc}

08005304 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	1dbb      	adds	r3, r7, #6
 8005310:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	2386      	movs	r3, #134	; 0x86
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	58d3      	ldr	r3, [r2, r3]
 800531a:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	2382      	movs	r3, #130	; 0x82
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;  
 8005326:	1dbb      	adds	r3, r7, #6
 8005328:	8819      	ldrh	r1, [r3, #0]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	2384      	movs	r3, #132	; 0x84
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;  
 8005332:	2300      	movs	r3, #0
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b006      	add	sp, #24
 800533a:	bd80      	pop	{r7, pc}

0800533c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	2386      	movs	r3, #134	; 0x86
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	58d3      	ldr	r3, [r2, r3]
 800534e:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	2381      	movs	r3, #129	; 0x81
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	6839      	ldr	r1, [r7, #0]
 8005358:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	0018      	movs	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	b004      	add	sp, #16
 8005362:	bd80      	pop	{r7, pc}

08005364 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	2386      	movs	r3, #134	; 0x86
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	58d3      	ldr	r3, [r2, r3]
 8005374:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	2386      	movs	r3, #134	; 0x86
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	58d3      	ldr	r3, [r2, r3]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01c      	beq.n	80053bc <USBD_CDC_TransmitPacket+0x58>
  {
    if(hcdc->TxState == 0)
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	2385      	movs	r3, #133	; 0x85
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	58d3      	ldr	r3, [r2, r3]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d114      	bne.n	80053b8 <USBD_CDC_TransmitPacket+0x54>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	2385      	movs	r3, #133	; 0x85
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	2101      	movs	r1, #1
 8005396:	50d1      	str	r1, [r2, r3]
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	2382      	movs	r3, #130	; 0x82
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	58d1      	ldr	r1, [r2, r3]
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	2384      	movs	r3, #132	; 0x84
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev,
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	000a      	movs	r2, r1
 80053ae:	2181      	movs	r1, #129	; 0x81
 80053b0:	f002 fd1c 	bl	8007dec <USBD_LL_Transmit>
      
      return USBD_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	e002      	b.n	80053be <USBD_CDC_TransmitPacket+0x5a>
    }
    else
    {
      return USBD_BUSY;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <USBD_CDC_TransmitPacket+0x5a>
    }
  }
  else
  {
    return USBD_FAIL;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b004      	add	sp, #16
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	2386      	movs	r3, #134	; 0x86
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	58d3      	ldr	r3, [r2, r3]
 80053d6:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	2386      	movs	r3, #134	; 0x86
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	58d3      	ldr	r3, [r2, r3]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d019      	beq.n	8005418 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	7c1b      	ldrb	r3, [r3, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <USBD_CDC_ReceivePacket+0x3c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	2381      	movs	r3, #129	; 0x81
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	58d2      	ldr	r2, [r2, r3]
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	2101      	movs	r1, #1
 80053fc:	f002 fd2e 	bl	8007e5c <USBD_LL_PrepareReceive>
 8005400:	e008      	b.n	8005414 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	2381      	movs	r3, #129	; 0x81
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	58d2      	ldr	r2, [r2, r3]
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	2340      	movs	r3, #64	; 0x40
 800540e:	2101      	movs	r1, #1
 8005410:	f002 fd24 	bl	8007e5c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	e000      	b.n	800541a <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8005418:	2302      	movs	r3, #2
  }
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b004      	add	sp, #16
 8005420:	bd80      	pop	{r7, pc}

08005422 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	1dfb      	adds	r3, r7, #7
 800542e:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8005436:	2302      	movs	r3, #2
 8005438:	e020      	b.n	800547c <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	2385      	movs	r3, #133	; 0x85
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	58d3      	ldr	r3, [r2, r3]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d004      	beq.n	8005450 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	2385      	movs	r3, #133	; 0x85
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	2100      	movs	r1, #0
 800544e:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	2384      	movs	r3, #132	; 0x84
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	23fe      	movs	r3, #254	; 0xfe
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	2101      	movs	r1, #1
 8005468:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1dfa      	adds	r2, r7, #7
 800546e:	7812      	ldrb	r2, [r2, #0]
 8005470:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	0018      	movs	r0, r3
 8005476:	f002 fb17 	bl	8007aa8 <USBD_LL_Init>
  
  return USBD_OK; 
 800547a:	2300      	movs	r3, #0
}
 800547c:	0018      	movs	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	b004      	add	sp, #16
 8005482:	bd80      	pop	{r7, pc}

08005484 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800548e:	230f      	movs	r3, #15
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d009      	beq.n	80054b0 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	2385      	movs	r3, #133	; 0x85
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80054a6:	230f      	movs	r3, #15
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e003      	b.n	80054b8 <USBD_RegisterClass+0x34>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80054b0:	230f      	movs	r3, #15
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	2202      	movs	r2, #2
 80054b6:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 80054b8:	230f      	movs	r3, #15
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	781b      	ldrb	r3, [r3, #0]
}
 80054be:	0018      	movs	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b004      	add	sp, #16
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	0018      	movs	r0, r3
 80054d2:	f002 fb4d 	bl	8007b70 <USBD_LL_Start>
  
  return USBD_OK;  
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	0018      	movs	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b002      	add	sp, #8
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	000a      	movs	r2, r1
 80054fc:	1cfb      	adds	r3, r7, #3
 80054fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005500:	230f      	movs	r3, #15
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	2202      	movs	r2, #2
 8005506:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	2385      	movs	r3, #133	; 0x85
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	58d3      	ldr	r3, [r2, r3]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00f      	beq.n	8005534 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	2385      	movs	r3, #133	; 0x85
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	58d3      	ldr	r3, [r2, r3]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	1cfa      	adds	r2, r7, #3
 8005520:	7811      	ldrb	r1, [r2, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	0010      	movs	r0, r2
 8005526:	4798      	blx	r3
 8005528:	1e03      	subs	r3, r0, #0
 800552a:	d103      	bne.n	8005534 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 800552c:	230f      	movs	r3, #15
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	2200      	movs	r2, #0
 8005532:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 8005534:	230f      	movs	r3, #15
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	781b      	ldrb	r3, [r3, #0]
}
 800553a:	0018      	movs	r0, r3
 800553c:	46bd      	mov	sp, r7
 800553e:	b004      	add	sp, #16
 8005540:	bd80      	pop	{r7, pc}

08005542 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	000a      	movs	r2, r1
 800554c:	1cfb      	adds	r3, r7, #3
 800554e:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	2385      	movs	r3, #133	; 0x85
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	58d3      	ldr	r3, [r2, r3]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	1cfa      	adds	r2, r7, #3
 800555c:	7811      	ldrb	r1, [r2, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	0010      	movs	r0, r2
 8005562:	4798      	blx	r3
  return USBD_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b002      	add	sp, #8
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2282      	movs	r2, #130	; 0x82
 800557e:	0092      	lsls	r2, r2, #2
 8005580:	4694      	mov	ip, r2
 8005582:	4463      	add	r3, ip
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	0011      	movs	r1, r2
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fe34 	bl	80061f6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	23fa      	movs	r3, #250	; 0xfa
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	2101      	movs	r1, #1
 8005596:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a22      	ldr	r2, [pc, #136]	; (8005624 <USBD_LL_SetupStage+0xb4>)
 800559c:	5a9b      	ldrh	r3, [r3, r2]
 800559e:	0019      	movs	r1, r3
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	23fc      	movs	r3, #252	; 0xfc
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	2382      	movs	r3, #130	; 0x82
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	001a      	movs	r2, r3
 80055b2:	231f      	movs	r3, #31
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d00d      	beq.n	80055d6 <USBD_LL_SetupStage+0x66>
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d015      	beq.n	80055ea <USBD_LL_SetupStage+0x7a>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d11d      	bne.n	80055fe <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2282      	movs	r2, #130	; 0x82
 80055c6:	0092      	lsls	r2, r2, #2
 80055c8:	189a      	adds	r2, r3, r2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	0011      	movs	r1, r2
 80055ce:	0018      	movs	r0, r3
 80055d0:	f000 f9be 	bl	8005950 <USBD_StdDevReq>
    break;
 80055d4:	e020      	b.n	8005618 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2282      	movs	r2, #130	; 0x82
 80055da:	0092      	lsls	r2, r2, #2
 80055dc:	189a      	adds	r2, r3, r2
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	0011      	movs	r1, r2
 80055e2:	0018      	movs	r0, r3
 80055e4:	f000 fa08 	bl	80059f8 <USBD_StdItfReq>
    break;
 80055e8:	e016      	b.n	8005618 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2282      	movs	r2, #130	; 0x82
 80055ee:	0092      	lsls	r2, r2, #2
 80055f0:	189a      	adds	r2, r3, r2
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	0011      	movs	r1, r2
 80055f6:	0018      	movs	r0, r3
 80055f8:	f000 fa3d 	bl	8005a76 <USBD_StdEPReq>
    break;
 80055fc:	e00c      	b.n	8005618 <USBD_LL_SetupStage+0xa8>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	2382      	movs	r3, #130	; 0x82
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	5cd3      	ldrb	r3, [r2, r3]
 8005606:	227f      	movs	r2, #127	; 0x7f
 8005608:	4393      	bics	r3, r2
 800560a:	b2da      	uxtb	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0011      	movs	r1, r2
 8005610:	0018      	movs	r0, r3
 8005612:	f002 fb36 	bl	8007c82 <USBD_LL_StallEP>
    break;
 8005616:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 8005618:	2300      	movs	r3, #0
}
 800561a:	0018      	movs	r0, r3
 800561c:	46bd      	mov	sp, r7
 800561e:	b002      	add	sp, #8
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	0000020e 	.word	0x0000020e

08005628 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	200b      	movs	r0, #11
 8005634:	183b      	adds	r3, r7, r0
 8005636:	1c0a      	adds	r2, r1, #0
 8005638:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800563a:	183b      	adds	r3, r7, r0
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d13e      	bne.n	80056c0 <USBD_LL_DataOutStage+0x98>
  {
    pep = &pdev->ep_out[0];
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3305      	adds	r3, #5
 8005646:	33ff      	adds	r3, #255	; 0xff
 8005648:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	23fa      	movs	r3, #250	; 0xfa
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	58d3      	ldr	r3, [r2, r3]
 8005652:	2b03      	cmp	r3, #3
 8005654:	d14c      	bne.n	80056f0 <USBD_LL_DataOutStage+0xc8>
    {
      if(pep->rem_length > pep->maxpacket)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	429a      	cmp	r2, r3
 8005660:	d914      	bls.n	800568c <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -=  pep->maxpacket;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	d900      	bls.n	800567e <USBD_LL_DataOutStage+0x56>
 800567c:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 800567e:	b292      	uxth	r2, r2
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	0018      	movs	r0, r3
 8005686:	f000 fec8 	bl	800641a <USBD_CtlContinueRx>
 800568a:	e031      	b.n	80056f0 <USBD_LL_DataOutStage+0xc8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	2385      	movs	r3, #133	; 0x85
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	58d3      	ldr	r3, [r2, r3]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00d      	beq.n	80056b6 <USBD_LL_DataOutStage+0x8e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	23fe      	movs	r3, #254	; 0xfe
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d107      	bne.n	80056b6 <USBD_LL_DataOutStage+0x8e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	2385      	movs	r3, #133	; 0x85
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	58d3      	ldr	r3, [r2, r3]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	0010      	movs	r0, r2
 80056b4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f000 fec1 	bl	8006440 <USBD_CtlSendStatus>
 80056be:	e017      	b.n	80056f0 <USBD_LL_DataOutStage+0xc8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	2385      	movs	r3, #133	; 0x85
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	58d3      	ldr	r3, [r2, r3]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d010      	beq.n	80056f0 <USBD_LL_DataOutStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	23fe      	movs	r3, #254	; 0xfe
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d10a      	bne.n	80056f0 <USBD_LL_DataOutStage+0xc8>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	2385      	movs	r3, #133	; 0x85
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	58d3      	ldr	r3, [r2, r3]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	220b      	movs	r2, #11
 80056e6:	18ba      	adds	r2, r7, r2
 80056e8:	7811      	ldrb	r1, [r2, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	0010      	movs	r0, r2
 80056ee:	4798      	blx	r3
  }  
  return USBD_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	0018      	movs	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b006      	add	sp, #24
 80056f8:	bd80      	pop	{r7, pc}

080056fa <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	200b      	movs	r0, #11
 8005706:	183b      	adds	r3, r7, r0
 8005708:	1c0a      	adds	r2, r1, #0
 800570a:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800570c:	183b      	adds	r3, r7, r0
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d000      	beq.n	8005716 <USBD_LL_DataInStage+0x1c>
 8005714:	e077      	b.n	8005806 <USBD_LL_DataInStage+0x10c>
  {
    pep = &pdev->ep_in[0];
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3314      	adds	r3, #20
 800571a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	23fa      	movs	r3, #250	; 0xfa
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	58d3      	ldr	r3, [r2, r3]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d15e      	bne.n	80057e6 <USBD_LL_DataInStage+0xec>
    {
      if(pep->rem_length > pep->maxpacket)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	429a      	cmp	r2, r3
 8005732:	d915      	bls.n	8005760 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	1ad2      	subs	r2, r2, r3
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005746:	b29a      	uxth	r2, r3
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	0018      	movs	r0, r3
 800574e:	f000 fe2d 	bl	80063ac <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	2300      	movs	r3, #0
 8005756:	2200      	movs	r2, #0
 8005758:	2100      	movs	r1, #0
 800575a:	f002 fb7f 	bl	8007e5c <USBD_LL_PrepareReceive>
 800575e:	e042      	b.n	80057e6 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	0019      	movs	r1, r3
 800576a:	0010      	movs	r0, r2
 800576c:	f7fa fd52 	bl	8000214 <__aeabi_uidivmod>
 8005770:	1e0b      	subs	r3, r1, #0
 8005772:	d11f      	bne.n	80057b4 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800577c:	429a      	cmp	r2, r3
 800577e:	d319      	bcc.n	80057b4 <USBD_LL_DataInStage+0xba>
             (pep->total_length < pdev->ep0_data_len ))
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	68f9      	ldr	r1, [r7, #12]
 8005786:	23fc      	movs	r3, #252	; 0xfc
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 800578c:	429a      	cmp	r2, r3
 800578e:	d211      	bcs.n	80057b4 <USBD_LL_DataInStage+0xba>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	2100      	movs	r1, #0
 8005796:	0018      	movs	r0, r3
 8005798:	f000 fe08 	bl	80063ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	23fc      	movs	r3, #252	; 0xfc
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	2100      	movs	r1, #0
 80057a4:	50d1      	str	r1, [r2, r3]
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	2300      	movs	r3, #0
 80057aa:	2200      	movs	r2, #0
 80057ac:	2100      	movs	r1, #0
 80057ae:	f002 fb55 	bl	8007e5c <USBD_LL_PrepareReceive>
 80057b2:	e018      	b.n	80057e6 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	2385      	movs	r3, #133	; 0x85
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	58d3      	ldr	r3, [r2, r3]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	23fe      	movs	r3, #254	; 0xfe
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d107      	bne.n	80057de <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	2385      	movs	r3, #133	; 0x85
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	58d3      	ldr	r3, [r2, r3]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	0010      	movs	r0, r2
 80057dc:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	0018      	movs	r0, r3
 80057e2:	f000 fe41 	bl	8006468 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	5cd3      	ldrb	r3, [r2, r3]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d121      	bne.n	8005836 <USBD_LL_DataInStage+0x13c>
    {
      USBD_RunTestMode(pdev); 
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7ff fe73 	bl	80054e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	2100      	movs	r1, #0
 8005802:	54d1      	strb	r1, [r2, r3]
 8005804:	e017      	b.n	8005836 <USBD_LL_DataInStage+0x13c>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	2385      	movs	r3, #133	; 0x85
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	58d3      	ldr	r3, [r2, r3]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d010      	beq.n	8005836 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	23fe      	movs	r3, #254	; 0xfe
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 800581c:	2b03      	cmp	r3, #3
 800581e:	d10a      	bne.n	8005836 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	2385      	movs	r3, #133	; 0x85
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	58d3      	ldr	r3, [r2, r3]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	220b      	movs	r2, #11
 800582c:	18ba      	adds	r2, r7, r2
 800582e:	7811      	ldrb	r1, [r2, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	0010      	movs	r0, r2
 8005834:	4798      	blx	r3
  }  
  return USBD_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	0018      	movs	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	b006      	add	sp, #24
 800583e:	bd80      	pop	{r7, pc}

08005840 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	2340      	movs	r3, #64	; 0x40
 800584c:	2200      	movs	r2, #0
 800584e:	2100      	movs	r1, #0
 8005850:	f002 f9b4 	bl	8007bbc <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	2388      	movs	r3, #136	; 0x88
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	2140      	movs	r1, #64	; 0x40
 800585c:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	2200      	movs	r2, #0
 8005864:	2180      	movs	r1, #128	; 0x80
 8005866:	f002 f9a9 	bl	8007bbc <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2240      	movs	r2, #64	; 0x40
 800586e:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	23fe      	movs	r3, #254	; 0xfe
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	2101      	movs	r1, #1
 8005878:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	2386      	movs	r3, #134	; 0x86
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	58d3      	ldr	r3, [r2, r3]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	2385      	movs	r3, #133	; 0x85
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	58d3      	ldr	r3, [r2, r3]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	b2d9      	uxtb	r1, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	0018      	movs	r0, r3
 800589a:	4790      	blx	r2
 
  
  return USBD_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b002      	add	sp, #8
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	000a      	movs	r2, r1
 80058b0:	1cfb      	adds	r3, r7, #3
 80058b2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	1cfa      	adds	r2, r7, #3
 80058b8:	7812      	ldrb	r2, [r2, #0]
 80058ba:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	0018      	movs	r0, r3
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b002      	add	sp, #8
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	23fe      	movs	r3, #254	; 0xfe
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	5cd1      	ldrb	r1, [r2, r3]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	23fe      	movs	r3, #254	; 0xfe
 80058da:	33ff      	adds	r3, #255	; 0xff
 80058dc:	54d1      	strb	r1, [r2, r3]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	23fe      	movs	r3, #254	; 0xfe
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	2104      	movs	r1, #4
 80058e6:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	0018      	movs	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b002      	add	sp, #8
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	23fe      	movs	r3, #254	; 0xfe
 80058fe:	33ff      	adds	r3, #255	; 0xff
 8005900:	5cd1      	ldrb	r1, [r2, r3]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	23fe      	movs	r3, #254	; 0xfe
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	0018      	movs	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	b002      	add	sp, #8
 8005912:	bd80      	pop	{r7, pc}

08005914 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	23fe      	movs	r3, #254	; 0xfe
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	5cd3      	ldrb	r3, [r2, r3]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d10e      	bne.n	8005946 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	2385      	movs	r3, #133	; 0x85
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	58d3      	ldr	r3, [r2, r3]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	2385      	movs	r3, #133	; 0x85
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	58d3      	ldr	r3, [r2, r3]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	0010      	movs	r0, r2
 8005944:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	0018      	movs	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	b002      	add	sp, #8
 800594e:	bd80      	pop	{r7, pc}

08005950 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800595a:	230f      	movs	r3, #15
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	2b09      	cmp	r3, #9
 8005968:	d835      	bhi.n	80059d6 <USBD_StdDevReq+0x86>
 800596a:	009a      	lsls	r2, r3, #2
 800596c:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <USBD_StdDevReq+0xa4>)
 800596e:	18d3      	adds	r3, r2, r3
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0011      	movs	r1, r2
 800597a:	0018      	movs	r0, r3
 800597c:	f000 f992 	bl	8005ca4 <USBD_GetDescriptor>
    break;
 8005980:	e030      	b.n	80059e4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	0011      	movs	r1, r2
 8005988:	0018      	movs	r0, r3
 800598a:	f000 fa95 	bl	8005eb8 <USBD_SetAddress>
    break;
 800598e:	e029      	b.n	80059e4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	0011      	movs	r1, r2
 8005996:	0018      	movs	r0, r3
 8005998:	f000 fadc 	bl	8005f54 <USBD_SetConfig>
    break;
 800599c:	e022      	b.n	80059e4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	0011      	movs	r1, r2
 80059a4:	0018      	movs	r0, r3
 80059a6:	f000 fb71 	bl	800608c <USBD_GetConfig>
    break;
 80059aa:	e01b      	b.n	80059e4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	0011      	movs	r1, r2
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 fba2 	bl	80060fc <USBD_GetStatus>
    break;
 80059b8:	e014      	b.n	80059e4 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	0011      	movs	r1, r2
 80059c0:	0018      	movs	r0, r3
 80059c2:	f000 fbca 	bl	800615a <USBD_SetFeature>
    break;
 80059c6:	e00d      	b.n	80059e4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	0011      	movs	r1, r2
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 fbe2 	bl	8006198 <USBD_ClrFeature>
    break;
 80059d4:	e006      	b.n	80059e4 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	0011      	movs	r1, r2
 80059dc:	0018      	movs	r0, r3
 80059de:	f000 fc45 	bl	800626c <USBD_CtlError>
    break;
 80059e2:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 80059e4:	230f      	movs	r3, #15
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	781b      	ldrb	r3, [r3, #0]
}
 80059ea:	0018      	movs	r0, r3
 80059ec:	46bd      	mov	sp, r7
 80059ee:	b004      	add	sp, #16
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	08008334 	.word	0x08008334

080059f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005a02:	230f      	movs	r3, #15
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	23fe      	movs	r3, #254	; 0xfe
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	5cd3      	ldrb	r3, [r2, r3]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d122      	bne.n	8005a5c <USBD_StdItfReq+0x64>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	889b      	ldrh	r3, [r3, #4]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d816      	bhi.n	8005a4e <USBD_StdItfReq+0x56>
    {
      pdev->pClass->Setup (pdev, req); 
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	2385      	movs	r3, #133	; 0x85
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	58d3      	ldr	r3, [r2, r3]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	0010      	movs	r0, r2
 8005a30:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	88db      	ldrh	r3, [r3, #6]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d117      	bne.n	8005a6a <USBD_StdItfReq+0x72>
 8005a3a:	230f      	movs	r3, #15
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d112      	bne.n	8005a6a <USBD_StdItfReq+0x72>
      {
         USBD_CtlSendStatus(pdev);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	0018      	movs	r0, r3
 8005a48:	f000 fcfa 	bl	8006440 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005a4c:	e00d      	b.n	8005a6a <USBD_StdItfReq+0x72>
       USBD_CtlError(pdev , req);
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	0011      	movs	r1, r2
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 fc09 	bl	800626c <USBD_CtlError>
    break;
 8005a5a:	e006      	b.n	8005a6a <USBD_StdItfReq+0x72>
    
  default:
     USBD_CtlError(pdev , req);
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	0011      	movs	r1, r2
 8005a62:	0018      	movs	r0, r3
 8005a64:	f000 fc02 	bl	800626c <USBD_CtlError>
    break;
 8005a68:	e000      	b.n	8005a6c <USBD_StdItfReq+0x74>
    break;
 8005a6a:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	0018      	movs	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b004      	add	sp, #16
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005a80:	230f      	movs	r3, #15
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	2200      	movs	r2, #0
 8005a86:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	889a      	ldrh	r2, [r3, #4]
 8005a8c:	230e      	movs	r3, #14
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	701a      	strb	r2, [r3, #0]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	001a      	movs	r2, r3
 8005a98:	2360      	movs	r3, #96	; 0x60
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d10a      	bne.n	8005ab6 <USBD_StdEPReq+0x40>
  {
    pdev->pClass->Setup (pdev, req);
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	2385      	movs	r3, #133	; 0x85
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	58d3      	ldr	r3, [r2, r3]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	0010      	movs	r0, r2
 8005ab0:	4798      	blx	r3
    
    return USBD_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e0f1      	b.n	8005c9a <USBD_StdEPReq+0x224>
  }
  
  switch (req->bRequest) 
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	785b      	ldrb	r3, [r3, #1]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d04e      	beq.n	8005b5c <USBD_StdEPReq+0xe6>
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d003      	beq.n	8005aca <USBD_StdEPReq+0x54>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d100      	bne.n	8005ac8 <USBD_StdEPReq+0x52>
 8005ac6:	e090      	b.n	8005bea <USBD_StdEPReq+0x174>
      break;
    }
    break;
    
  default:
    break;
 8005ac8:	e0e4      	b.n	8005c94 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	23fe      	movs	r3, #254	; 0xfe
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	5cd3      	ldrb	r3, [r2, r3]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d002      	beq.n	8005adc <USBD_StdEPReq+0x66>
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d013      	beq.n	8005b02 <USBD_StdEPReq+0x8c>
 8005ada:	e036      	b.n	8005b4a <USBD_StdEPReq+0xd4>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005adc:	230e      	movs	r3, #14
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d038      	beq.n	8005b58 <USBD_StdEPReq+0xe2>
 8005ae6:	230e      	movs	r3, #14
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b80      	cmp	r3, #128	; 0x80
 8005aee:	d033      	beq.n	8005b58 <USBD_StdEPReq+0xe2>
        USBD_LL_StallEP(pdev , ep_addr);
 8005af0:	230e      	movs	r3, #14
 8005af2:	18fb      	adds	r3, r7, r3
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	0011      	movs	r1, r2
 8005afa:	0018      	movs	r0, r3
 8005afc:	f002 f8c1 	bl	8007c82 <USBD_LL_StallEP>
      break;	
 8005b00:	e02a      	b.n	8005b58 <USBD_StdEPReq+0xe2>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	885b      	ldrh	r3, [r3, #2]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d111      	bne.n	8005b2e <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005b0a:	230e      	movs	r3, #14
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00c      	beq.n	8005b2e <USBD_StdEPReq+0xb8>
 8005b14:	230e      	movs	r3, #14
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d007      	beq.n	8005b2e <USBD_StdEPReq+0xb8>
          USBD_LL_StallEP(pdev , ep_addr);
 8005b1e:	230e      	movs	r3, #14
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	781a      	ldrb	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	0011      	movs	r1, r2
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f002 f8aa 	bl	8007c82 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	2385      	movs	r3, #133	; 0x85
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	58d3      	ldr	r3, [r2, r3]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	0010      	movs	r0, r2
 8005b3e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 fc7c 	bl	8006440 <USBD_CtlSendStatus>
      break;
 8005b48:	e007      	b.n	8005b5a <USBD_StdEPReq+0xe4>
      USBD_CtlError(pdev , req);
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	0011      	movs	r1, r2
 8005b50:	0018      	movs	r0, r3
 8005b52:	f000 fb8b 	bl	800626c <USBD_CtlError>
      break;    
 8005b56:	e000      	b.n	8005b5a <USBD_StdEPReq+0xe4>
      break;	
 8005b58:	46c0      	nop			; (mov r8, r8)
    break;
 8005b5a:	e09b      	b.n	8005c94 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	23fe      	movs	r3, #254	; 0xfe
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	5cd3      	ldrb	r3, [r2, r3]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d002      	beq.n	8005b6e <USBD_StdEPReq+0xf8>
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d013      	beq.n	8005b94 <USBD_StdEPReq+0x11e>
 8005b6c:	e032      	b.n	8005bd4 <USBD_StdEPReq+0x15e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005b6e:	230e      	movs	r3, #14
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d034      	beq.n	8005be2 <USBD_StdEPReq+0x16c>
 8005b78:	230e      	movs	r3, #14
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d02f      	beq.n	8005be2 <USBD_StdEPReq+0x16c>
        USBD_LL_StallEP(pdev , ep_addr);
 8005b82:	230e      	movs	r3, #14
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	0011      	movs	r1, r2
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f002 f878 	bl	8007c82 <USBD_LL_StallEP>
      break;	
 8005b92:	e026      	b.n	8005be2 <USBD_StdEPReq+0x16c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	885b      	ldrh	r3, [r3, #2]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d124      	bne.n	8005be6 <USBD_StdEPReq+0x170>
        if ((ep_addr & 0x7F) != 0x00) 
 8005b9c:	230e      	movs	r3, #14
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	227f      	movs	r2, #127	; 0x7f
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d010      	beq.n	8005bca <USBD_StdEPReq+0x154>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005ba8:	230e      	movs	r3, #14
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	781a      	ldrb	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	0011      	movs	r1, r2
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f002 f891 	bl	8007cda <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	2385      	movs	r3, #133	; 0x85
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	58d3      	ldr	r3, [r2, r3]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	0010      	movs	r0, r2
 8005bc8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f000 fc37 	bl	8006440 <USBD_CtlSendStatus>
      break;
 8005bd2:	e008      	b.n	8005be6 <USBD_StdEPReq+0x170>
      USBD_CtlError(pdev , req);
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0011      	movs	r1, r2
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f000 fb46 	bl	800626c <USBD_CtlError>
      break;    
 8005be0:	e002      	b.n	8005be8 <USBD_StdEPReq+0x172>
      break;	
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	e056      	b.n	8005c94 <USBD_StdEPReq+0x21e>
      break;
 8005be6:	46c0      	nop			; (mov r8, r8)
    break;
 8005be8:	e054      	b.n	8005c94 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	23fe      	movs	r3, #254	; 0xfe
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	5cd3      	ldrb	r3, [r2, r3]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d002      	beq.n	8005bfc <USBD_StdEPReq+0x186>
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d00f      	beq.n	8005c1a <USBD_StdEPReq+0x1a4>
 8005bfa:	e042      	b.n	8005c82 <USBD_StdEPReq+0x20c>
      if ((ep_addr & 0x7F) != 0x00) 
 8005bfc:	230e      	movs	r3, #14
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	227f      	movs	r2, #127	; 0x7f
 8005c04:	4013      	ands	r3, r2
 8005c06:	d043      	beq.n	8005c90 <USBD_StdEPReq+0x21a>
        USBD_LL_StallEP(pdev , ep_addr);
 8005c08:	230e      	movs	r3, #14
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	0011      	movs	r1, r2
 8005c12:	0018      	movs	r0, r3
 8005c14:	f002 f835 	bl	8007c82 <USBD_LL_StallEP>
      break;	
 8005c18:	e03a      	b.n	8005c90 <USBD_StdEPReq+0x21a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005c1a:	230e      	movs	r3, #14
 8005c1c:	18fb      	adds	r3, r7, r3
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da0a      	bge.n	8005c3c <USBD_StdEPReq+0x1c6>
 8005c26:	230e      	movs	r3, #14
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	227f      	movs	r2, #127	; 0x7f
 8005c2e:	4013      	ands	r3, r2
 8005c30:	3301      	adds	r3, #1
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	18d3      	adds	r3, r2, r3
 8005c38:	3304      	adds	r3, #4
 8005c3a:	e009      	b.n	8005c50 <USBD_StdEPReq+0x1da>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8005c3c:	230e      	movs	r3, #14
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	227f      	movs	r2, #127	; 0x7f
 8005c44:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005c46:	3310      	adds	r3, #16
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	18d3      	adds	r3, r2, r3
 8005c4e:	3304      	adds	r3, #4
 8005c50:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005c52:	230e      	movs	r3, #14
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	0011      	movs	r1, r2
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f002 f868 	bl	8007d32 <USBD_LL_IsStallEP>
 8005c62:	1e03      	subs	r3, r0, #0
 8005c64:	d003      	beq.n	8005c6e <USBD_StdEPReq+0x1f8>
        pep->status = 0x0001;     
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e002      	b.n	8005c74 <USBD_StdEPReq+0x1fe>
        pep->status = 0x0000;  
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8005c74:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f000 fb76 	bl	800636c <USBD_CtlSendData>
      break;
 8005c80:	e007      	b.n	8005c92 <USBD_StdEPReq+0x21c>
      USBD_CtlError(pdev , req);
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	0011      	movs	r1, r2
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 faef 	bl	800626c <USBD_CtlError>
      break;
 8005c8e:	e000      	b.n	8005c92 <USBD_StdEPReq+0x21c>
      break;	
 8005c90:	46c0      	nop			; (mov r8, r8)
    break;
 8005c92:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8005c94:	230f      	movs	r3, #15
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	781b      	ldrb	r3, [r3, #0]
}
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b004      	add	sp, #16
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	885b      	ldrh	r3, [r3, #2]
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b07      	cmp	r3, #7
 8005cb8:	d900      	bls.n	8005cbc <USBD_GetDescriptor+0x18>
 8005cba:	e0ce      	b.n	8005e5a <USBD_GetDescriptor+0x1b6>
 8005cbc:	009a      	lsls	r2, r3, #2
 8005cbe:	4b7c      	ldr	r3, [pc, #496]	; (8005eb0 <USBD_GetDescriptor+0x20c>)
 8005cc0:	18d3      	adds	r3, r2, r3
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	2384      	movs	r3, #132	; 0x84
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	58d3      	ldr	r3, [r2, r3]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	7c12      	ldrb	r2, [r2, #16]
 8005cd4:	210a      	movs	r1, #10
 8005cd6:	1879      	adds	r1, r7, r1
 8005cd8:	0010      	movs	r0, r2
 8005cda:	4798      	blx	r3
 8005cdc:	0003      	movs	r3, r0
 8005cde:	60fb      	str	r3, [r7, #12]
    break;
 8005ce0:	e0c2      	b.n	8005e68 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	7c1b      	ldrb	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10f      	bne.n	8005d0a <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	2385      	movs	r3, #133	; 0x85
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	58d3      	ldr	r3, [r2, r3]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	220a      	movs	r2, #10
 8005cf6:	18ba      	adds	r2, r7, r2
 8005cf8:	0010      	movs	r0, r2
 8005cfa:	4798      	blx	r3
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	2202      	movs	r2, #2
 8005d06:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005d08:	e0ae      	b.n	8005e68 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	2385      	movs	r3, #133	; 0x85
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	58d3      	ldr	r3, [r2, r3]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	220a      	movs	r2, #10
 8005d16:	18ba      	adds	r2, r7, r2
 8005d18:	0010      	movs	r0, r2
 8005d1a:	4798      	blx	r3
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	2202      	movs	r2, #2
 8005d26:	701a      	strb	r2, [r3, #0]
    break;
 8005d28:	e09e      	b.n	8005e68 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	885b      	ldrh	r3, [r3, #2]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	d858      	bhi.n	8005de6 <USBD_GetDescriptor+0x142>
 8005d34:	009a      	lsls	r2, r3, #2
 8005d36:	4b5f      	ldr	r3, [pc, #380]	; (8005eb4 <USBD_GetDescriptor+0x210>)
 8005d38:	18d3      	adds	r3, r2, r3
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	2384      	movs	r3, #132	; 0x84
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	58d3      	ldr	r3, [r2, r3]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	210a      	movs	r1, #10
 8005d4e:	1879      	adds	r1, r7, r1
 8005d50:	0010      	movs	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	0003      	movs	r3, r0
 8005d56:	60fb      	str	r3, [r7, #12]
      break;
 8005d58:	e04c      	b.n	8005df4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	2384      	movs	r3, #132	; 0x84
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	58d3      	ldr	r3, [r2, r3]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	7c12      	ldrb	r2, [r2, #16]
 8005d68:	210a      	movs	r1, #10
 8005d6a:	1879      	adds	r1, r7, r1
 8005d6c:	0010      	movs	r0, r2
 8005d6e:	4798      	blx	r3
 8005d70:	0003      	movs	r3, r0
 8005d72:	60fb      	str	r3, [r7, #12]
      break;
 8005d74:	e03e      	b.n	8005df4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	2384      	movs	r3, #132	; 0x84
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	58d3      	ldr	r3, [r2, r3]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	7c12      	ldrb	r2, [r2, #16]
 8005d84:	210a      	movs	r1, #10
 8005d86:	1879      	adds	r1, r7, r1
 8005d88:	0010      	movs	r0, r2
 8005d8a:	4798      	blx	r3
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	60fb      	str	r3, [r7, #12]
      break;
 8005d90:	e030      	b.n	8005df4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	2384      	movs	r3, #132	; 0x84
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	58d3      	ldr	r3, [r2, r3]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	7c12      	ldrb	r2, [r2, #16]
 8005da0:	210a      	movs	r1, #10
 8005da2:	1879      	adds	r1, r7, r1
 8005da4:	0010      	movs	r0, r2
 8005da6:	4798      	blx	r3
 8005da8:	0003      	movs	r3, r0
 8005daa:	60fb      	str	r3, [r7, #12]
      break;
 8005dac:	e022      	b.n	8005df4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	2384      	movs	r3, #132	; 0x84
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	58d3      	ldr	r3, [r2, r3]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	7c12      	ldrb	r2, [r2, #16]
 8005dbc:	210a      	movs	r1, #10
 8005dbe:	1879      	adds	r1, r7, r1
 8005dc0:	0010      	movs	r0, r2
 8005dc2:	4798      	blx	r3
 8005dc4:	0003      	movs	r3, r0
 8005dc6:	60fb      	str	r3, [r7, #12]
      break;
 8005dc8:	e014      	b.n	8005df4 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	2384      	movs	r3, #132	; 0x84
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	58d3      	ldr	r3, [r2, r3]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	7c12      	ldrb	r2, [r2, #16]
 8005dd8:	210a      	movs	r1, #10
 8005dda:	1879      	adds	r1, r7, r1
 8005ddc:	0010      	movs	r0, r2
 8005dde:	4798      	blx	r3
 8005de0:	0003      	movs	r3, r0
 8005de2:	60fb      	str	r3, [r7, #12]
      break;
 8005de4:	e006      	b.n	8005df4 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0011      	movs	r1, r2
 8005dec:	0018      	movs	r0, r3
 8005dee:	f000 fa3d 	bl	800626c <USBD_CtlError>
      return;
 8005df2:	e059      	b.n	8005ea8 <USBD_GetDescriptor+0x204>
#endif   
    }
    break;
 8005df4:	e038      	b.n	8005e68 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7c1b      	ldrb	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10b      	bne.n	8005e16 <USBD_GetDescriptor+0x172>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	2385      	movs	r3, #133	; 0x85
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	58d3      	ldr	r3, [r2, r3]
 8005e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e08:	220a      	movs	r2, #10
 8005e0a:	18ba      	adds	r2, r7, r2
 8005e0c:	0010      	movs	r0, r2
 8005e0e:	4798      	blx	r3
 8005e10:	0003      	movs	r3, r0
 8005e12:	60fb      	str	r3, [r7, #12]
      break;
 8005e14:	e028      	b.n	8005e68 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	0011      	movs	r1, r2
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f000 fa25 	bl	800626c <USBD_CtlError>
      return;
 8005e22:	e041      	b.n	8005ea8 <USBD_GetDescriptor+0x204>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	7c1b      	ldrb	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10f      	bne.n	8005e4c <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	2385      	movs	r3, #133	; 0x85
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	58d3      	ldr	r3, [r2, r3]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	220a      	movs	r2, #10
 8005e38:	18ba      	adds	r2, r7, r2
 8005e3a:	0010      	movs	r0, r2
 8005e3c:	4798      	blx	r3
 8005e3e:	0003      	movs	r3, r0
 8005e40:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	2207      	movs	r2, #7
 8005e48:	701a      	strb	r2, [r3, #0]
      break; 
 8005e4a:	e00d      	b.n	8005e68 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	0011      	movs	r1, r2
 8005e52:	0018      	movs	r0, r3
 8005e54:	f000 fa0a 	bl	800626c <USBD_CtlError>
      return;
 8005e58:	e026      	b.n	8005ea8 <USBD_GetDescriptor+0x204>
    }

  default: 
     USBD_CtlError(pdev , req);
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	0011      	movs	r1, r2
 8005e60:	0018      	movs	r0, r3
 8005e62:	f000 fa03 	bl	800626c <USBD_CtlError>
    return;
 8005e66:	e01f      	b.n	8005ea8 <USBD_GetDescriptor+0x204>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8005e68:	230a      	movs	r3, #10
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01a      	beq.n	8005ea8 <USBD_GetDescriptor+0x204>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	88db      	ldrh	r3, [r3, #6]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d016      	beq.n	8005ea8 <USBD_GetDescriptor+0x204>
  {
    
    len = MIN(len , req->wLength);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	88da      	ldrh	r2, [r3, #6]
 8005e7e:	230a      	movs	r3, #10
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	1c18      	adds	r0, r3, #0
 8005e86:	1c11      	adds	r1, r2, #0
 8005e88:	b28a      	uxth	r2, r1
 8005e8a:	b283      	uxth	r3, r0
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d900      	bls.n	8005e92 <USBD_GetDescriptor+0x1ee>
 8005e90:	1c01      	adds	r1, r0, #0
 8005e92:	b28a      	uxth	r2, r1
 8005e94:	210a      	movs	r1, #10
 8005e96:	187b      	adds	r3, r7, r1
 8005e98:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 8005e9a:	187b      	adds	r3, r7, r1
 8005e9c:	881a      	ldrh	r2, [r3, #0]
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f000 fa62 	bl	800636c <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b004      	add	sp, #16
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	0800835c 	.word	0x0800835c
 8005eb4:	0800837c 	.word	0x0800837c

08005eb8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005eb8:	b590      	push	{r4, r7, lr}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	889b      	ldrh	r3, [r3, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d13a      	bne.n	8005f40 <USBD_SetAddress+0x88>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	88db      	ldrh	r3, [r3, #6]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d136      	bne.n	8005f40 <USBD_SetAddress+0x88>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	885b      	ldrh	r3, [r3, #2]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	230f      	movs	r3, #15
 8005eda:	18fb      	adds	r3, r7, r3
 8005edc:	217f      	movs	r1, #127	; 0x7f
 8005ede:	400a      	ands	r2, r1
 8005ee0:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	23fe      	movs	r3, #254	; 0xfe
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	5cd3      	ldrb	r3, [r2, r3]
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d106      	bne.n	8005efc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	0011      	movs	r1, r2
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f000 f9b9 	bl	800626c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005efa:	e027      	b.n	8005f4c <USBD_SetAddress+0x94>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	240f      	movs	r4, #15
 8005f00:	1939      	adds	r1, r7, r4
 8005f02:	23ff      	movs	r3, #255	; 0xff
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	7809      	ldrb	r1, [r1, #0]
 8005f08:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8005f0a:	193b      	adds	r3, r7, r4
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	0011      	movs	r1, r2
 8005f12:	0018      	movs	r0, r3
 8005f14:	f001 ff3e 	bl	8007d94 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f000 fa90 	bl	8006440 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8005f20:	193b      	adds	r3, r7, r4
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <USBD_SetAddress+0x7c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	23fe      	movs	r3, #254	; 0xfe
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	2102      	movs	r1, #2
 8005f30:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005f32:	e00b      	b.n	8005f4c <USBD_SetAddress+0x94>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	23fe      	movs	r3, #254	; 0xfe
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005f3e:	e005      	b.n	8005f4c <USBD_SetAddress+0x94>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	0011      	movs	r1, r2
 8005f46:	0018      	movs	r0, r3
 8005f48:	f000 f990 	bl	800626c <USBD_CtlError>
  } 
}
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b005      	add	sp, #20
 8005f52:	bd90      	pop	{r4, r7, pc}

08005f54 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	885b      	ldrh	r3, [r3, #2]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	4b48      	ldr	r3, [pc, #288]	; (8006088 <USBD_SetConfig+0x134>)
 8005f66:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005f68:	4b47      	ldr	r3, [pc, #284]	; (8006088 <USBD_SetConfig+0x134>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d906      	bls.n	8005f7e <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	0011      	movs	r1, r2
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 f978 	bl	800626c <USBD_CtlError>
 8005f7c:	e081      	b.n	8006082 <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	23fe      	movs	r3, #254	; 0xfe
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	5cd3      	ldrb	r3, [r2, r3]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d002      	beq.n	8005f90 <USBD_SetConfig+0x3c>
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d029      	beq.n	8005fe2 <USBD_SetConfig+0x8e>
 8005f8e:	e071      	b.n	8006074 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8005f90:	4b3d      	ldr	r3, [pc, #244]	; (8006088 <USBD_SetConfig+0x134>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01f      	beq.n	8005fd8 <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8005f98:	4b3b      	ldr	r3, [pc, #236]	; (8006088 <USBD_SetConfig+0x134>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	001a      	movs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	23fe      	movs	r3, #254	; 0xfe
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	2103      	movs	r1, #3
 8005faa:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005fac:	4b36      	ldr	r3, [pc, #216]	; (8006088 <USBD_SetConfig+0x134>)
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	0011      	movs	r1, r2
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f7ff fa9c 	bl	80054f2 <USBD_SetClassConfig>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d106      	bne.n	8005fce <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	0011      	movs	r1, r2
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f000 f950 	bl	800626c <USBD_CtlError>
          return;
 8005fcc:	e059      	b.n	8006082 <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f000 fa35 	bl	8006440 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8005fd6:	e054      	b.n	8006082 <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f000 fa30 	bl	8006440 <USBD_CtlSendStatus>
      break;
 8005fe0:	e04f      	b.n	8006082 <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005fe2:	4b29      	ldr	r3, [pc, #164]	; (8006088 <USBD_SetConfig+0x134>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d115      	bne.n	8006016 <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	23fe      	movs	r3, #254	; 0xfe
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 8005ff4:	4b24      	ldr	r3, [pc, #144]	; (8006088 <USBD_SetConfig+0x134>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005ffe:	4b22      	ldr	r3, [pc, #136]	; (8006088 <USBD_SetConfig+0x134>)
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0011      	movs	r1, r2
 8006006:	0018      	movs	r0, r3
 8006008:	f7ff fa9b 	bl	8005542 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	0018      	movs	r0, r3
 8006010:	f000 fa16 	bl	8006440 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006014:	e035      	b.n	8006082 <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 8006016:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <USBD_SetConfig+0x134>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	001a      	movs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d022      	beq.n	800606a <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	0011      	movs	r1, r2
 800602e:	0018      	movs	r0, r3
 8006030:	f7ff fa87 	bl	8005542 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <USBD_SetConfig+0x134>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	001a      	movs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <USBD_SetConfig+0x134>)
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	0011      	movs	r1, r2
 8006046:	0018      	movs	r0, r3
 8006048:	f7ff fa53 	bl	80054f2 <USBD_SetClassConfig>
 800604c:	0003      	movs	r3, r0
 800604e:	2b02      	cmp	r3, #2
 8006050:	d106      	bne.n	8006060 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	0011      	movs	r1, r2
 8006058:	0018      	movs	r0, r3
 800605a:	f000 f907 	bl	800626c <USBD_CtlError>
          return;
 800605e:	e010      	b.n	8006082 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	0018      	movs	r0, r3
 8006064:	f000 f9ec 	bl	8006440 <USBD_CtlSendStatus>
      break;
 8006068:	e00b      	b.n	8006082 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	0018      	movs	r0, r3
 800606e:	f000 f9e7 	bl	8006440 <USBD_CtlSendStatus>
      break;
 8006072:	e006      	b.n	8006082 <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	0011      	movs	r1, r2
 800607a:	0018      	movs	r0, r3
 800607c:	f000 f8f6 	bl	800626c <USBD_CtlError>
      break;
 8006080:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006082:	46bd      	mov	sp, r7
 8006084:	b002      	add	sp, #8
 8006086:	bd80      	pop	{r7, pc}
 8006088:	200001a5 	.word	0x200001a5

0800608c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	88db      	ldrh	r3, [r3, #6]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d006      	beq.n	80060ac <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	0011      	movs	r1, r2
 80060a4:	0018      	movs	r0, r3
 80060a6:	f000 f8e1 	bl	800626c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80060aa:	e023      	b.n	80060f4 <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	23fe      	movs	r3, #254	; 0xfe
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	5cd3      	ldrb	r3, [r2, r3]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d002      	beq.n	80060be <USBD_GetConfig+0x32>
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d00c      	beq.n	80060d6 <USBD_GetConfig+0x4a>
 80060bc:	e013      	b.n	80060e6 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3308      	adds	r3, #8
 80060c8:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 f94c 	bl	800636c <USBD_CtlSendData>
      break;
 80060d4:	e00e      	b.n	80060f4 <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 f944 	bl	800636c <USBD_CtlSendData>
      break;
 80060e4:	e006      	b.n	80060f4 <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	0011      	movs	r1, r2
 80060ec:	0018      	movs	r0, r3
 80060ee:	f000 f8bd 	bl	800626c <USBD_CtlError>
      break;
 80060f2:	46c0      	nop			; (mov r8, r8)
}
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b002      	add	sp, #8
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	23fe      	movs	r3, #254	; 0xfe
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	5cd3      	ldrb	r3, [r2, r3]
 800610e:	3b02      	subs	r3, #2
 8006110:	2b01      	cmp	r3, #1
 8006112:	d817      	bhi.n	8006144 <USBD_GetStatus+0x48>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	2381      	movs	r3, #129	; 0x81
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	58d3      	ldr	r3, [r2, r3]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d005      	beq.n	8006132 <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2202      	movs	r2, #2
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	330c      	adds	r3, #12
 8006136:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	0018      	movs	r0, r3
 800613e:	f000 f915 	bl	800636c <USBD_CtlSendData>
                      2);
    break;
 8006142:	e006      	b.n	8006152 <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	0011      	movs	r1, r2
 800614a:	0018      	movs	r0, r3
 800614c:	f000 f88e 	bl	800626c <USBD_CtlError>
    break;
 8006150:	46c0      	nop			; (mov r8, r8)
  }
}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	46bd      	mov	sp, r7
 8006156:	b002      	add	sp, #8
 8006158:	bd80      	pop	{r7, pc}

0800615a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	885b      	ldrh	r3, [r3, #2]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d111      	bne.n	8006190 <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	2381      	movs	r3, #129	; 0x81
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	2101      	movs	r1, #1
 8006174:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	2385      	movs	r3, #133	; 0x85
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	58d3      	ldr	r3, [r2, r3]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	0010      	movs	r0, r2
 8006186:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	0018      	movs	r0, r3
 800618c:	f000 f958 	bl	8006440 <USBD_CtlSendStatus>
  }

}
 8006190:	46c0      	nop			; (mov r8, r8)
 8006192:	46bd      	mov	sp, r7
 8006194:	b002      	add	sp, #8
 8006196:	bd80      	pop	{r7, pc}

08006198 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	23fe      	movs	r3, #254	; 0xfe
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	5cd3      	ldrb	r3, [r2, r3]
 80061aa:	3b02      	subs	r3, #2
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d816      	bhi.n	80061de <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	885b      	ldrh	r3, [r3, #2]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d119      	bne.n	80061ec <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	2381      	movs	r3, #129	; 0x81
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	2100      	movs	r1, #0
 80061c0:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	2385      	movs	r3, #133	; 0x85
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	58d3      	ldr	r3, [r2, r3]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	0010      	movs	r0, r2
 80061d2:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	0018      	movs	r0, r3
 80061d8:	f000 f932 	bl	8006440 <USBD_CtlSendStatus>
    }
    break;
 80061dc:	e006      	b.n	80061ec <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	0011      	movs	r1, r2
 80061e4:	0018      	movs	r0, r3
 80061e6:	f000 f841 	bl	800626c <USBD_CtlError>
    break;
 80061ea:	e000      	b.n	80061ee <USBD_ClrFeature+0x56>
    break;
 80061ec:	46c0      	nop			; (mov r8, r8)
  }
}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b002      	add	sp, #8
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781a      	ldrb	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	785a      	ldrb	r2, [r3, #1]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	3302      	adds	r3, #2
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b29a      	uxth	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	3303      	adds	r3, #3
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	b29b      	uxth	r3, r3
 8006224:	18d3      	adds	r3, r2, r3
 8006226:	b29a      	uxth	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	3304      	adds	r3, #4
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b29a      	uxth	r2, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	3305      	adds	r3, #5
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	b29b      	uxth	r3, r3
 8006240:	18d3      	adds	r3, r2, r3
 8006242:	b29a      	uxth	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	3306      	adds	r3, #6
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	b29a      	uxth	r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	3307      	adds	r3, #7
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	021b      	lsls	r3, r3, #8
 800625a:	b29b      	uxth	r3, r3
 800625c:	18d3      	adds	r3, r2, r3
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	80da      	strh	r2, [r3, #6]

}
 8006264:	46c0      	nop			; (mov r8, r8)
 8006266:	46bd      	mov	sp, r7
 8006268:	b002      	add	sp, #8
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2180      	movs	r1, #128	; 0x80
 800627a:	0018      	movs	r0, r3
 800627c:	f001 fd01 	bl	8007c82 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2100      	movs	r1, #0
 8006284:	0018      	movs	r0, r3
 8006286:	f001 fcfc 	bl	8007c82 <USBD_LL_StallEP>
}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b002      	add	sp, #8
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006292:	b590      	push	{r4, r7, lr}
 8006294:	b087      	sub	sp, #28
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800629e:	2317      	movs	r3, #23
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d03e      	beq.n	800632a <USBD_GetString+0x98>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 f83f 	bl	8006332 <USBD_GetLen>
 80062b4:	0003      	movs	r3, r0
 80062b6:	3301      	adds	r3, #1
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	18db      	adds	r3, r3, r3
 80062bc:	b29a      	uxth	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8819      	ldrh	r1, [r3, #0]
 80062c6:	2417      	movs	r4, #23
 80062c8:	193b      	adds	r3, r7, r4
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	193a      	adds	r2, r7, r4
 80062ce:	1c58      	adds	r0, r3, #1
 80062d0:	7010      	strb	r0, [r2, #0]
 80062d2:	001a      	movs	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	189b      	adds	r3, r3, r2
 80062d8:	b2ca      	uxtb	r2, r1
 80062da:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80062dc:	193b      	adds	r3, r7, r4
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	193a      	adds	r2, r7, r4
 80062e2:	1c59      	adds	r1, r3, #1
 80062e4:	7011      	strb	r1, [r2, #0]
 80062e6:	001a      	movs	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	189b      	adds	r3, r3, r2
 80062ec:	2203      	movs	r2, #3
 80062ee:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80062f0:	e017      	b.n	8006322 <USBD_GetString+0x90>
    {
      unicode[idx++] = *desc++;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	60fa      	str	r2, [r7, #12]
 80062f8:	2417      	movs	r4, #23
 80062fa:	193a      	adds	r2, r7, r4
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	1939      	adds	r1, r7, r4
 8006300:	1c50      	adds	r0, r2, #1
 8006302:	7008      	strb	r0, [r1, #0]
 8006304:	0011      	movs	r1, r2
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	1852      	adds	r2, r2, r1
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800630e:	193b      	adds	r3, r7, r4
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	193a      	adds	r2, r7, r4
 8006314:	1c59      	adds	r1, r3, #1
 8006316:	7011      	strb	r1, [r2, #0]
 8006318:	001a      	movs	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	189b      	adds	r3, r3, r2
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e3      	bne.n	80062f2 <USBD_GetString+0x60>
    }
  } 
}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	46bd      	mov	sp, r7
 800632e:	b007      	add	sp, #28
 8006330:	bd90      	pop	{r4, r7, pc}

08006332 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800633a:	230f      	movs	r3, #15
 800633c:	18fb      	adds	r3, r7, r3
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 8006342:	e008      	b.n	8006356 <USBD_GetLen+0x24>
    {
        len++;
 8006344:	210f      	movs	r1, #15
 8006346:	187b      	adds	r3, r7, r1
 8006348:	781a      	ldrb	r2, [r3, #0]
 800634a:	187b      	adds	r3, r7, r1
 800634c:	3201      	adds	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
        buf++;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3301      	adds	r3, #1
 8006354:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f2      	bne.n	8006344 <USBD_GetLen+0x12>
    }

    return len;
 800635e:	230f      	movs	r3, #15
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	781b      	ldrb	r3, [r3, #0]
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b004      	add	sp, #16
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	1dbb      	adds	r3, r7, #6
 8006378:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	23fa      	movs	r3, #250	; 0xfa
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	2102      	movs	r1, #2
 8006382:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006384:	1dbb      	adds	r3, r7, #6
 8006386:	881a      	ldrh	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800638c:	1dbb      	adds	r3, r7, #6
 800638e:	881a      	ldrh	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8006394:	1dbb      	adds	r3, r7, #6
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	2100      	movs	r1, #0
 800639e:	f001 fd25 	bl	8007dec <USBD_LL_Transmit>
  
  return USBD_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	0018      	movs	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b004      	add	sp, #16
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	1dbb      	adds	r3, r7, #6
 80063b8:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80063ba:	1dbb      	adds	r3, r7, #6
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	2100      	movs	r1, #0
 80063c4:	f001 fd12 	bl	8007dec <USBD_LL_Transmit>
  
  return USBD_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	0018      	movs	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b004      	add	sp, #16
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	1dbb      	adds	r3, r7, #6
 80063de:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	23fa      	movs	r3, #250	; 0xfa
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	2103      	movs	r1, #3
 80063e8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80063ea:	1dbb      	adds	r3, r7, #6
 80063ec:	8819      	ldrh	r1, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	2384      	movs	r3, #132	; 0x84
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80063f6:	1dbb      	adds	r3, r7, #6
 80063f8:	8819      	ldrh	r1, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	2386      	movs	r3, #134	; 0x86
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	50d1      	str	r1, [r2, r3]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8006402:	1dbb      	adds	r3, r7, #6
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	2100      	movs	r1, #0
 800640c:	f001 fd26 	bl	8007e5c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	0018      	movs	r0, r3
 8006414:	46bd      	mov	sp, r7
 8006416:	b004      	add	sp, #16
 8006418:	bd80      	pop	{r7, pc}

0800641a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	1dbb      	adds	r3, r7, #6
 8006426:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 8006428:	1dbb      	adds	r3, r7, #6
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	2100      	movs	r1, #0
 8006432:	f001 fd13 	bl	8007e5c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	0018      	movs	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	b004      	add	sp, #16
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	23fa      	movs	r3, #250	; 0xfa
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	2104      	movs	r1, #4
 8006450:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	2300      	movs	r3, #0
 8006456:	2200      	movs	r2, #0
 8006458:	2100      	movs	r1, #0
 800645a:	f001 fcc7 	bl	8007dec <USBD_LL_Transmit>
  
  return USBD_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b002      	add	sp, #8
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	23fa      	movs	r3, #250	; 0xfa
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	2105      	movs	r1, #5
 8006478:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	2300      	movs	r3, #0
 800647e:	2200      	movs	r2, #0
 8006480:	2100      	movs	r1, #0
 8006482:	f001 fceb 	bl	8007e5c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	0018      	movs	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	b002      	add	sp, #8
 800648e:	bd80      	pop	{r7, pc}

08006490 <initialize_expanders>:
 *
 * @param  I2C Handle
 * @retval 0 on success
 */
int initialize_expanders(I2C_HandleTypeDef hi2c)
{
 8006490:	b084      	sub	sp, #16
 8006492:	b5b0      	push	{r4, r5, r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af02      	add	r7, sp, #8
 8006498:	2518      	movs	r5, #24
 800649a:	197c      	adds	r4, r7, r5
 800649c:	6020      	str	r0, [r4, #0]
 800649e:	6061      	str	r1, [r4, #4]
 80064a0:	60a2      	str	r2, [r4, #8]
 80064a2:	60e3      	str	r3, [r4, #12]
	uint8_t tmp_buf[3];

	if(HAL_I2C_IsDeviceReady(&hi2c,EXP_OUT_ADDR,10,1000) == HAL_OK)
 80064a4:	23fa      	movs	r3, #250	; 0xfa
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	1978      	adds	r0, r7, r5
 80064aa:	220a      	movs	r2, #10
 80064ac:	2142      	movs	r1, #66	; 0x42
 80064ae:	f7fa fc69 	bl	8000d84 <HAL_I2C_IsDeviceReady>
 80064b2:	1e03      	subs	r3, r0, #0
 80064b4:	d12a      	bne.n	800650c <initialize_expanders+0x7c>
	{
		/*------------------- Outputs Expander ----------------------*/

		//Set logic level of the two output ports to LOW
		tmp_buf[0] = OUTPUT_PORT_0;
 80064b6:	1d3b      	adds	r3, r7, #4
 80064b8:	2202      	movs	r2, #2
 80064ba:	701a      	strb	r2, [r3, #0]
		tmp_buf[1] = 0x00;
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	2200      	movs	r2, #0
 80064c0:	705a      	strb	r2, [r3, #1]
		tmp_buf[2] = 0x00;
 80064c2:	1d3b      	adds	r3, r7, #4
 80064c4:	2200      	movs	r2, #0
 80064c6:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c, EXP_OUT_ADDR, tmp_buf, 3, 1000);
 80064c8:	1d3a      	adds	r2, r7, #4
 80064ca:	2418      	movs	r4, #24
 80064cc:	1938      	adds	r0, r7, r4
 80064ce:	23fa      	movs	r3, #250	; 0xfa
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2303      	movs	r3, #3
 80064d6:	2142      	movs	r1, #66	; 0x42
 80064d8:	f7fa fa2c 	bl	8000934 <HAL_I2C_Master_Transmit>

		HAL_Delay(10);
 80064dc:	200a      	movs	r0, #10
 80064de:	f7f9 fee5 	bl	80002ac <HAL_Delay>

		//Configure the direction of the two ports as outputs
		tmp_buf[0] = CONFIGURATION_PORT_0;
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	2206      	movs	r2, #6
 80064e6:	701a      	strb	r2, [r3, #0]
		tmp_buf[1] = 0x00;
 80064e8:	1d3b      	adds	r3, r7, #4
 80064ea:	2200      	movs	r2, #0
 80064ec:	705a      	strb	r2, [r3, #1]
		tmp_buf[2] = 0x00;
 80064ee:	1d3b      	adds	r3, r7, #4
 80064f0:	2200      	movs	r2, #0
 80064f2:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c, EXP_OUT_ADDR, tmp_buf, 3, 1000);
 80064f4:	1d3a      	adds	r2, r7, #4
 80064f6:	1938      	adds	r0, r7, r4
 80064f8:	23fa      	movs	r3, #250	; 0xfa
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	2303      	movs	r3, #3
 8006500:	2142      	movs	r1, #66	; 0x42
 8006502:	f7fa fa17 	bl	8000934 <HAL_I2C_Master_Transmit>

		HAL_Delay(10);
 8006506:	200a      	movs	r0, #10
 8006508:	f7f9 fed0 	bl	80002ac <HAL_Delay>
	}

		//TODO Push pull or open drain configuration on output register

	if(HAL_I2C_IsDeviceReady(&hi2c,EXP_IN_ADDR,10,1000) == HAL_OK)
 800650c:	23fa      	movs	r3, #250	; 0xfa
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	2218      	movs	r2, #24
 8006512:	18b8      	adds	r0, r7, r2
 8006514:	220a      	movs	r2, #10
 8006516:	2140      	movs	r1, #64	; 0x40
 8006518:	f7fa fc34 	bl	8000d84 <HAL_I2C_IsDeviceReady>
 800651c:	1e03      	subs	r3, r0, #0
 800651e:	d12a      	bne.n	8006576 <initialize_expanders+0xe6>
	{
		/*------------------- Inputs Expander ----------------------*/

		//Configure the direction of the 2 ports as inputs
		tmp_buf[0] = CONFIGURATION_PORT_1;
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	2207      	movs	r2, #7
 8006524:	701a      	strb	r2, [r3, #0]
		tmp_buf[1] = 0xff;
 8006526:	1d3b      	adds	r3, r7, #4
 8006528:	22ff      	movs	r2, #255	; 0xff
 800652a:	705a      	strb	r2, [r3, #1]
		tmp_buf[2] = 0xff;
 800652c:	1d3b      	adds	r3, r7, #4
 800652e:	22ff      	movs	r2, #255	; 0xff
 8006530:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c, EXP_IN_ADDR, tmp_buf, 3, 1000);
 8006532:	1d3a      	adds	r2, r7, #4
 8006534:	2418      	movs	r4, #24
 8006536:	1938      	adds	r0, r7, r4
 8006538:	23fa      	movs	r3, #250	; 0xfa
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	2303      	movs	r3, #3
 8006540:	2140      	movs	r1, #64	; 0x40
 8006542:	f7fa f9f7 	bl	8000934 <HAL_I2C_Master_Transmit>

		HAL_Delay(10);
 8006546:	200a      	movs	r0, #10
 8006548:	f7f9 feb0 	bl	80002ac <HAL_Delay>

		//Enable the interrupts
		tmp_buf[0] = INTERRUPT_MASK_REG_1;
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	224b      	movs	r2, #75	; 0x4b
 8006550:	701a      	strb	r2, [r3, #0]
		tmp_buf[1] = 0x00;
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	2200      	movs	r2, #0
 8006556:	705a      	strb	r2, [r3, #1]
		tmp_buf[2] = 0x00;
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	2200      	movs	r2, #0
 800655c:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c, EXP_IN_ADDR, tmp_buf, 3, 1000);
 800655e:	1d3a      	adds	r2, r7, #4
 8006560:	1938      	adds	r0, r7, r4
 8006562:	23fa      	movs	r3, #250	; 0xfa
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2303      	movs	r3, #3
 800656a:	2140      	movs	r1, #64	; 0x40
 800656c:	f7fa f9e2 	bl	8000934 <HAL_I2C_Master_Transmit>

		HAL_Delay(10);
 8006570:	200a      	movs	r0, #10
 8006572:	f7f9 fe9b 	bl	80002ac <HAL_Delay>

		//TODO ISR for the inputs
	}

	return 0;
 8006576:	2300      	movs	r3, #0
}
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bcb0      	pop	{r4, r5, r7}
 8006580:	bc08      	pop	{r3}
 8006582:	b004      	add	sp, #16
 8006584:	4718      	bx	r3

08006586 <configure_outputs>:
 * @param  I2C Handle
 * @param  Desired configuration for outputs
 * @retval 0 on success
 */
int configure_outputs(I2C_HandleTypeDef hi2c, uint16_t outputs)
{
 8006586:	b084      	sub	sp, #16
 8006588:	b5b0      	push	{r4, r5, r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af02      	add	r7, sp, #8
 800658e:	2518      	movs	r5, #24
 8006590:	197c      	adds	r4, r7, r5
 8006592:	6020      	str	r0, [r4, #0]
 8006594:	6061      	str	r1, [r4, #4]
 8006596:	60a2      	str	r2, [r4, #8]
 8006598:	60e3      	str	r3, [r4, #12]
	uint8_t tmp_buf[3];

	uint16_t tmp_outputs = aligned_data(outputs);
 800659a:	1dbc      	adds	r4, r7, #6
 800659c:	234c      	movs	r3, #76	; 0x4c
 800659e:	2218      	movs	r2, #24
 80065a0:	4694      	mov	ip, r2
 80065a2:	44bc      	add	ip, r7
 80065a4:	4463      	add	r3, ip
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	0018      	movs	r0, r3
 80065aa:	f000 f8b4 	bl	8006716 <aligned_data>
 80065ae:	0003      	movs	r3, r0
 80065b0:	8023      	strh	r3, [r4, #0]

	tmp_buf[0] = OUTPUT_PORT_1;
 80065b2:	003b      	movs	r3, r7
 80065b4:	2203      	movs	r2, #3
 80065b6:	701a      	strb	r2, [r3, #0]
	tmp_buf[1] = (uint8_t)(tmp_outputs>>8);
 80065b8:	1dbb      	adds	r3, r7, #6
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	0a1b      	lsrs	r3, r3, #8
 80065be:	b29b      	uxth	r3, r3
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	003b      	movs	r3, r7
 80065c4:	705a      	strb	r2, [r3, #1]
	tmp_buf[2] = (uint8_t) tmp_outputs;
 80065c6:	1dbb      	adds	r3, r7, #6
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	003b      	movs	r3, r7
 80065ce:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c, EXP_OUT_ADDR, tmp_buf, 3, 1000);
 80065d0:	003a      	movs	r2, r7
 80065d2:	1978      	adds	r0, r7, r5
 80065d4:	23fa      	movs	r3, #250	; 0xfa
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	2303      	movs	r3, #3
 80065dc:	2142      	movs	r1, #66	; 0x42
 80065de:	f7fa f9a9 	bl	8000934 <HAL_I2C_Master_Transmit>
	return 0;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	0018      	movs	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b002      	add	sp, #8
 80065ea:	bcb0      	pop	{r4, r5, r7}
 80065ec:	bc08      	pop	{r3}
 80065ee:	b004      	add	sp, #16
 80065f0:	4718      	bx	r3

080065f2 <read_all_inputs>:
 * @brief Read all the inputs of the INPUTS EXPANDER
 * @param  I2C Handle
 * @retval Inputs in 16-bit value
 */
uint16_t read_all_inputs(I2C_HandleTypeDef hi2c)
{
 80065f2:	b084      	sub	sp, #16
 80065f4:	b5b0      	push	{r4, r5, r7, lr}
 80065f6:	b092      	sub	sp, #72	; 0x48
 80065f8:	af12      	add	r7, sp, #72	; 0x48
 80065fa:	2510      	movs	r5, #16
 80065fc:	197c      	adds	r4, r7, r5
 80065fe:	6020      	str	r0, [r4, #0]
 8006600:	6061      	str	r1, [r4, #4]
 8006602:	60a2      	str	r2, [r4, #8]
 8006604:	60e3      	str	r3, [r4, #12]
	return receive_data_from_pointer(hi2c, EXP_IN_ADDR, INPUT_PORT_1);
 8006606:	197c      	adds	r4, r7, r5
 8006608:	2301      	movs	r3, #1
 800660a:	9310      	str	r3, [sp, #64]	; 0x40
 800660c:	2340      	movs	r3, #64	; 0x40
 800660e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006610:	466b      	mov	r3, sp
 8006612:	0018      	movs	r0, r3
 8006614:	0023      	movs	r3, r4
 8006616:	3310      	adds	r3, #16
 8006618:	223c      	movs	r2, #60	; 0x3c
 800661a:	0019      	movs	r1, r3
 800661c:	f001 fe38 	bl	8008290 <memcpy>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	6861      	ldr	r1, [r4, #4]
 8006624:	68a2      	ldr	r2, [r4, #8]
 8006626:	68e3      	ldr	r3, [r4, #12]
 8006628:	f000 f82f 	bl	800668a <receive_data_from_pointer>
 800662c:	0003      	movs	r3, r0
}
 800662e:	0018      	movs	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	bcb0      	pop	{r4, r5, r7}
 8006634:	bc08      	pop	{r3}
 8006636:	b004      	add	sp, #16
 8006638:	4718      	bx	r3

0800663a <read_all_outputs>:
 * @brief Get the current state of the outputs
 * @param I2C Handle
 * @retval Outputs in 16-bit value
 */
uint16_t read_all_outputs(I2C_HandleTypeDef hi2c)
{
 800663a:	b084      	sub	sp, #16
 800663c:	b5b0      	push	{r4, r5, r7, lr}
 800663e:	b092      	sub	sp, #72	; 0x48
 8006640:	af12      	add	r7, sp, #72	; 0x48
 8006642:	2510      	movs	r5, #16
 8006644:	197c      	adds	r4, r7, r5
 8006646:	6020      	str	r0, [r4, #0]
 8006648:	6061      	str	r1, [r4, #4]
 800664a:	60a2      	str	r2, [r4, #8]
 800664c:	60e3      	str	r3, [r4, #12]
	return aligned_data(receive_data_from_pointer(hi2c, EXP_OUT_ADDR, OUTPUT_PORT_1));
 800664e:	197c      	adds	r4, r7, r5
 8006650:	2303      	movs	r3, #3
 8006652:	9310      	str	r3, [sp, #64]	; 0x40
 8006654:	2342      	movs	r3, #66	; 0x42
 8006656:	930f      	str	r3, [sp, #60]	; 0x3c
 8006658:	466b      	mov	r3, sp
 800665a:	0018      	movs	r0, r3
 800665c:	0023      	movs	r3, r4
 800665e:	3310      	adds	r3, #16
 8006660:	223c      	movs	r2, #60	; 0x3c
 8006662:	0019      	movs	r1, r3
 8006664:	f001 fe14 	bl	8008290 <memcpy>
 8006668:	6820      	ldr	r0, [r4, #0]
 800666a:	6861      	ldr	r1, [r4, #4]
 800666c:	68a2      	ldr	r2, [r4, #8]
 800666e:	68e3      	ldr	r3, [r4, #12]
 8006670:	f000 f80b 	bl	800668a <receive_data_from_pointer>
 8006674:	0003      	movs	r3, r0
 8006676:	0018      	movs	r0, r3
 8006678:	f000 f84d 	bl	8006716 <aligned_data>
 800667c:	0003      	movs	r3, r0
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	bcb0      	pop	{r4, r5, r7}
 8006684:	bc08      	pop	{r3}
 8006686:	b004      	add	sp, #16
 8006688:	4718      	bx	r3

0800668a <receive_data_from_pointer>:
 * register bits) we want to access and then re-establish communication, this time
 * with the R/W bit set to "1" in order to start reception data from the register.
 *
 */
uint16_t receive_data_from_pointer(I2C_HandleTypeDef hi2c, uint8_t DevAddr, uint8_t pointer_register)
{
 800668a:	b084      	sub	sp, #16
 800668c:	b5b0      	push	{r4, r5, r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af02      	add	r7, sp, #8
 8006692:	2518      	movs	r5, #24
 8006694:	197c      	adds	r4, r7, r5
 8006696:	6020      	str	r0, [r4, #0]
 8006698:	6061      	str	r1, [r4, #4]
 800669a:	60a2      	str	r2, [r4, #8]
 800669c:	60e3      	str	r3, [r4, #12]
	uint8_t tmp_buf[2];

	tmp_buf[0] = pointer_register;
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	2250      	movs	r2, #80	; 0x50
 80066a2:	2118      	movs	r1, #24
 80066a4:	468c      	mov	ip, r1
 80066a6:	44bc      	add	ip, r7
 80066a8:	4462      	add	r2, ip
 80066aa:	7812      	ldrb	r2, [r2, #0]
 80066ac:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80066ae:	b672      	cpsid	i

	__disable_irq();

	HAL_I2C_Master_Transmit(&hi2c, DevAddr, tmp_buf, 1, 1000);
 80066b0:	234c      	movs	r3, #76	; 0x4c
 80066b2:	2218      	movs	r2, #24
 80066b4:	4694      	mov	ip, r2
 80066b6:	44bc      	add	ip, r7
 80066b8:	4463      	add	r3, ip
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	b299      	uxth	r1, r3
 80066be:	1d3a      	adds	r2, r7, #4
 80066c0:	1978      	adds	r0, r7, r5
 80066c2:	23fa      	movs	r3, #250	; 0xfa
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	2301      	movs	r3, #1
 80066ca:	f7fa f933 	bl	8000934 <HAL_I2C_Master_Transmit>

	//HAL_Delay(50);

	HAL_I2C_Master_Receive(&hi2c, DevAddr, tmp_buf, 2, 1000);
 80066ce:	234c      	movs	r3, #76	; 0x4c
 80066d0:	2218      	movs	r2, #24
 80066d2:	4694      	mov	ip, r2
 80066d4:	44bc      	add	ip, r7
 80066d6:	4463      	add	r3, ip
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	b299      	uxth	r1, r3
 80066dc:	1d3a      	adds	r2, r7, #4
 80066de:	1978      	adds	r0, r7, r5
 80066e0:	23fa      	movs	r3, #250	; 0xfa
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	2302      	movs	r3, #2
 80066e8:	f7fa fa38 	bl	8000b5c <HAL_I2C_Master_Receive>
  __ASM volatile ("cpsie i" : : : "memory");
 80066ec:	b662      	cpsie	i

	__enable_irq();

	uint16_t data = (tmp_buf[0] << 8) | tmp_buf[1];
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	b21a      	sxth	r2, r3
 80066f6:	1d3b      	adds	r3, r7, #4
 80066f8:	785b      	ldrb	r3, [r3, #1]
 80066fa:	b21b      	sxth	r3, r3
 80066fc:	4313      	orrs	r3, r2
 80066fe:	b21a      	sxth	r2, r3
 8006700:	1dbb      	adds	r3, r7, #6
 8006702:	801a      	strh	r2, [r3, #0]

	return data;
 8006704:	1dbb      	adds	r3, r7, #6
 8006706:	881b      	ldrh	r3, [r3, #0]
}
 8006708:	0018      	movs	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	b002      	add	sp, #8
 800670e:	bcb0      	pop	{r4, r5, r7}
 8006710:	bc08      	pop	{r3}
 8006712:	b004      	add	sp, #16
 8006714:	4718      	bx	r3

08006716 <aligned_data>:
 * In order for the controls in the computer application to be aligned with the
 * correct header pins, the data need to be handled. This is because the header
 * is connected differently to each expander.
 */
uint16_t aligned_data(uint16_t data)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	0002      	movs	r2, r0
 800671e:	1dbb      	adds	r3, r7, #6
 8006720:	801a      	strh	r2, [r3, #0]
	uint16_t rev;
	uint16_t temp_data;

	temp_data = data;
 8006722:	230c      	movs	r3, #12
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	1dba      	adds	r2, r7, #6
 8006728:	8812      	ldrh	r2, [r2, #0]
 800672a:	801a      	strh	r2, [r3, #0]

	for(int i=0;i<16;i++)
 800672c:	2300      	movs	r3, #0
 800672e:	60bb      	str	r3, [r7, #8]
 8006730:	e01b      	b.n	800676a <aligned_data+0x54>
	{
		rev <<= 1;
 8006732:	230e      	movs	r3, #14
 8006734:	18fa      	adds	r2, r7, r3
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	18db      	adds	r3, r3, r3
 800673c:	8013      	strh	r3, [r2, #0]

		if((temp_data & 1)==1)
 800673e:	230c      	movs	r3, #12
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
 8006748:	d006      	beq.n	8006758 <aligned_data+0x42>
		{
			rev ^= 1;
 800674a:	220e      	movs	r2, #14
 800674c:	18bb      	adds	r3, r7, r2
 800674e:	18ba      	adds	r2, r7, r2
 8006750:	8812      	ldrh	r2, [r2, #0]
 8006752:	2101      	movs	r1, #1
 8006754:	404a      	eors	r2, r1
 8006756:	801a      	strh	r2, [r3, #0]
		}

		temp_data >>= 1;
 8006758:	220c      	movs	r2, #12
 800675a:	18bb      	adds	r3, r7, r2
 800675c:	18ba      	adds	r2, r7, r2
 800675e:	8812      	ldrh	r2, [r2, #0]
 8006760:	0852      	lsrs	r2, r2, #1
 8006762:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	3301      	adds	r3, #1
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b0f      	cmp	r3, #15
 800676e:	dde0      	ble.n	8006732 <aligned_data+0x1c>
	}

	return rev;
 8006770:	230e      	movs	r3, #14
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	881b      	ldrh	r3, [r3, #0]
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b004      	add	sp, #16
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006782:	b097      	sub	sp, #92	; 0x5c
 8006784:	af10      	add	r7, sp, #64	; 0x40
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006786:	f7f9 fd4b 	bl	8000220 <HAL_Init>

  /* USER CODE BEGIN Init */

  is_USB_Connected = 0;
 800678a:	4bac      	ldr	r3, [pc, #688]	; (8006a3c <main+0x2bc>)
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
  transmit_inputs = 0;
 8006790:	4bab      	ldr	r3, [pc, #684]	; (8006a40 <main+0x2c0>)
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
  flush_data_buffer();
 8006796:	f000 fcd3 	bl	8007140 <flush_data_buffer>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800679a:	f000 f969 	bl	8006a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800679e:	f000 fb3b 	bl	8006e18 <MX_GPIO_Init>
  MX_I2C1_Init();
 80067a2:	f000 fa07 	bl	8006bb4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80067a6:	f000 faff 	bl	8006da8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80067aa:	f000 ff7b 	bl	80076a4 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80067ae:	f000 fa41 	bl	8006c34 <MX_TIM6_Init>
  MX_TIM7_Init();
 80067b2:	f000 fa85 	bl	8006cc0 <MX_TIM7_Init>
  MX_TIM14_Init();
 80067b6:	f000 fac7 	bl	8006d48 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  LED_Quick_Flash();
 80067ba:	f000 fc71 	bl	80070a0 <LED_Quick_Flash>

  HAL_Delay(1000);
 80067be:	23fa      	movs	r3, #250	; 0xfa
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	0018      	movs	r0, r3
 80067c4:	f7f9 fd72 	bl	80002ac <HAL_Delay>

  Reset_Expanders();
 80067c8:	f000 fd7e 	bl	80072c8 <Reset_Expanders>

  I2C_Peripherals_available();
 80067cc:	f000 fc9a 	bl	8007104 <I2C_Peripherals_available>

  initialize_expanders(hi2c1);
 80067d0:	4c9c      	ldr	r4, [pc, #624]	; (8006a44 <main+0x2c4>)
 80067d2:	466b      	mov	r3, sp
 80067d4:	0018      	movs	r0, r3
 80067d6:	0023      	movs	r3, r4
 80067d8:	3310      	adds	r3, #16
 80067da:	223c      	movs	r2, #60	; 0x3c
 80067dc:	0019      	movs	r1, r3
 80067de:	f001 fd57 	bl	8008290 <memcpy>
 80067e2:	6820      	ldr	r0, [r4, #0]
 80067e4:	6861      	ldr	r1, [r4, #4]
 80067e6:	68a2      	ldr	r2, [r4, #8]
 80067e8:	68e3      	ldr	r3, [r4, #12]
 80067ea:	f7ff fe51 	bl	8006490 <initialize_expanders>
  /*Test code here*/
  //configure_pupd_enable_registers(hi2c1, EXP_INPUTS_ADDR, 0xff);
  //configure_pupd_selection_registers(hi2c1, EXP_INPUTS_ADDR, 0x00);
  /*Test code above*/

  enable_interrupt_handlers();
 80067ee:	f000 fcbf 	bl	8007170 <enable_interrupt_handlers>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // For debugging info used with STMStudio
	  timer6_counter = TIM6->CNT;
 80067f2:	4b95      	ldr	r3, [pc, #596]	; (8006a48 <main+0x2c8>)
 80067f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067f6:	4b95      	ldr	r3, [pc, #596]	; (8006a4c <main+0x2cc>)
 80067f8:	601a      	str	r2, [r3, #0]
	  timer7_counter = TIM7->CNT;
 80067fa:	4b95      	ldr	r3, [pc, #596]	; (8006a50 <main+0x2d0>)
 80067fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067fe:	4b95      	ldr	r3, [pc, #596]	; (8006a54 <main+0x2d4>)
 8006800:	601a      	str	r2, [r3, #0]
	  timer14_counter = TIM14->CNT;
 8006802:	4b95      	ldr	r3, [pc, #596]	; (8006a58 <main+0x2d8>)
 8006804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006806:	4b95      	ldr	r3, [pc, #596]	; (8006a5c <main+0x2dc>)
 8006808:	601a      	str	r2, [r3, #0]


	  if(data_available == 1)
 800680a:	4b95      	ldr	r3, [pc, #596]	; (8006a60 <main+0x2e0>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d000      	beq.n	8006814 <main+0x94>
 8006812:	e0da      	b.n	80069ca <main+0x24a>
	  {
		  if(data_buffer[0] == 0x00 || data_buffer[0] == 0xCB)
 8006814:	4b93      	ldr	r3, [pc, #588]	; (8006a64 <main+0x2e4>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d004      	beq.n	8006826 <main+0xa6>
 800681c:	4b91      	ldr	r3, [pc, #580]	; (8006a64 <main+0x2e4>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2bcb      	cmp	r3, #203	; 0xcb
 8006822:	d000      	beq.n	8006826 <main+0xa6>
 8006824:	e0cc      	b.n	80069c0 <main+0x240>
		  {
			  // Command 0xA1 -> Configure Outputs
			  if(data_buffer[1] == encoded_command_byte_2[0])
 8006826:	4b8f      	ldr	r3, [pc, #572]	; (8006a64 <main+0x2e4>)
 8006828:	785a      	ldrb	r2, [r3, #1]
 800682a:	4b8f      	ldr	r3, [pc, #572]	; (8006a68 <main+0x2e8>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d11e      	bne.n	8006870 <main+0xf0>
			  {
				  uint16_t tmp = ((data_buffer[2] <<8)| data_buffer[3]);
 8006832:	4b8c      	ldr	r3, [pc, #560]	; (8006a64 <main+0x2e4>)
 8006834:	789b      	ldrb	r3, [r3, #2]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	b21a      	sxth	r2, r3
 800683a:	4b8a      	ldr	r3, [pc, #552]	; (8006a64 <main+0x2e4>)
 800683c:	78db      	ldrb	r3, [r3, #3]
 800683e:	b21b      	sxth	r3, r3
 8006840:	4313      	orrs	r3, r2
 8006842:	b21a      	sxth	r2, r3
 8006844:	2112      	movs	r1, #18
 8006846:	187b      	adds	r3, r7, r1
 8006848:	801a      	strh	r2, [r3, #0]
				  configure_outputs(hi2c1, tmp);
 800684a:	4c7e      	ldr	r4, [pc, #504]	; (8006a44 <main+0x2c4>)
 800684c:	187b      	adds	r3, r7, r1
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	930f      	str	r3, [sp, #60]	; 0x3c
 8006852:	466b      	mov	r3, sp
 8006854:	0018      	movs	r0, r3
 8006856:	0023      	movs	r3, r4
 8006858:	3310      	adds	r3, #16
 800685a:	223c      	movs	r2, #60	; 0x3c
 800685c:	0019      	movs	r1, r3
 800685e:	f001 fd17 	bl	8008290 <memcpy>
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	6861      	ldr	r1, [r4, #4]
 8006866:	68a2      	ldr	r2, [r4, #8]
 8006868:	68e3      	ldr	r3, [r4, #12]
 800686a:	f7ff fe8c 	bl	8006586 <configure_outputs>
 800686e:	e0a7      	b.n	80069c0 <main+0x240>
			  }

			  // Command 0xA2 -> Read Outputs State
			  else if(data_buffer[1] == encoded_command_byte_2[1])
 8006870:	4b7c      	ldr	r3, [pc, #496]	; (8006a64 <main+0x2e4>)
 8006872:	785a      	ldrb	r2, [r3, #1]
 8006874:	4b7c      	ldr	r3, [pc, #496]	; (8006a68 <main+0x2e8>)
 8006876:	785b      	ldrb	r3, [r3, #1]
 8006878:	429a      	cmp	r2, r3
 800687a:	d128      	bne.n	80068ce <main+0x14e>
			  {
				  uint16_t output_states;
				  output_states = read_all_outputs(hi2c1);
 800687c:	2614      	movs	r6, #20
 800687e:	19bd      	adds	r5, r7, r6
 8006880:	4c70      	ldr	r4, [pc, #448]	; (8006a44 <main+0x2c4>)
 8006882:	466b      	mov	r3, sp
 8006884:	0018      	movs	r0, r3
 8006886:	0023      	movs	r3, r4
 8006888:	3310      	adds	r3, #16
 800688a:	223c      	movs	r2, #60	; 0x3c
 800688c:	0019      	movs	r1, r3
 800688e:	f001 fcff 	bl	8008290 <memcpy>
 8006892:	6820      	ldr	r0, [r4, #0]
 8006894:	6861      	ldr	r1, [r4, #4]
 8006896:	68a2      	ldr	r2, [r4, #8]
 8006898:	68e3      	ldr	r3, [r4, #12]
 800689a:	f7ff fece 	bl	800663a <read_all_outputs>
 800689e:	0003      	movs	r3, r0
 80068a0:	802b      	strh	r3, [r5, #0]
				  uint8_t output_states_buffer[2];

				  /* To identify that the transmitted data are outputs
				   * we send as first byte the byte 0xB2
				   */
				  output_states_buffer[0] = 0xB2;
 80068a2:	210c      	movs	r1, #12
 80068a4:	187b      	adds	r3, r7, r1
 80068a6:	22b2      	movs	r2, #178	; 0xb2
 80068a8:	701a      	strb	r2, [r3, #0]

				  output_states_buffer[1] = ((output_states)>>8);	//High Byte
 80068aa:	19bb      	adds	r3, r7, r6
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	0a1b      	lsrs	r3, r3, #8
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	187b      	adds	r3, r7, r1
 80068b6:	705a      	strb	r2, [r3, #1]
				  output_states_buffer[2] = output_states;			//Low Byte
 80068b8:	19bb      	adds	r3, r7, r6
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	187b      	adds	r3, r7, r1
 80068c0:	709a      	strb	r2, [r3, #2]

				  CDC_Transmit_FS(output_states_buffer, 3);
 80068c2:	187b      	adds	r3, r7, r1
 80068c4:	2103      	movs	r1, #3
 80068c6:	0018      	movs	r0, r3
 80068c8:	f000 ffd6 	bl	8007878 <CDC_Transmit_FS>
 80068cc:	e078      	b.n	80069c0 <main+0x240>
			  }

			  // Command 0xA3 -> Read Inputs State
			  else if(data_buffer[1] == encoded_command_byte_2[2])
 80068ce:	4b65      	ldr	r3, [pc, #404]	; (8006a64 <main+0x2e4>)
 80068d0:	785a      	ldrb	r2, [r3, #1]
 80068d2:	4b65      	ldr	r3, [pc, #404]	; (8006a68 <main+0x2e8>)
 80068d4:	789b      	ldrb	r3, [r3, #2]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d128      	bne.n	800692c <main+0x1ac>
			  {
				  uint16_t inputs_states;
				  inputs_states = read_all_inputs(hi2c1);
 80068da:	2616      	movs	r6, #22
 80068dc:	19bd      	adds	r5, r7, r6
 80068de:	4c59      	ldr	r4, [pc, #356]	; (8006a44 <main+0x2c4>)
 80068e0:	466b      	mov	r3, sp
 80068e2:	0018      	movs	r0, r3
 80068e4:	0023      	movs	r3, r4
 80068e6:	3310      	adds	r3, #16
 80068e8:	223c      	movs	r2, #60	; 0x3c
 80068ea:	0019      	movs	r1, r3
 80068ec:	f001 fcd0 	bl	8008290 <memcpy>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	6861      	ldr	r1, [r4, #4]
 80068f4:	68a2      	ldr	r2, [r4, #8]
 80068f6:	68e3      	ldr	r3, [r4, #12]
 80068f8:	f7ff fe7b 	bl	80065f2 <read_all_inputs>
 80068fc:	0003      	movs	r3, r0
 80068fe:	802b      	strh	r3, [r5, #0]
				  uint8_t inputs_states_buffer[3];

				  /* To identify that the transmitted data are inputs
				   * we send as first byte the byte 0xB1
				   */
				  inputs_states_buffer[0] = 0xB1;
 8006900:	2108      	movs	r1, #8
 8006902:	187b      	adds	r3, r7, r1
 8006904:	22b1      	movs	r2, #177	; 0xb1
 8006906:	701a      	strb	r2, [r3, #0]

				  inputs_states_buffer[1] = ((inputs_states)>>8); //High byte
 8006908:	19bb      	adds	r3, r7, r6
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	0a1b      	lsrs	r3, r3, #8
 800690e:	b29b      	uxth	r3, r3
 8006910:	b2da      	uxtb	r2, r3
 8006912:	187b      	adds	r3, r7, r1
 8006914:	705a      	strb	r2, [r3, #1]
				  inputs_states_buffer[2] =   inputs_states;	  //Low  byte
 8006916:	19bb      	adds	r3, r7, r6
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	187b      	adds	r3, r7, r1
 800691e:	709a      	strb	r2, [r3, #2]
				  CDC_Transmit_FS(inputs_states_buffer, 3);
 8006920:	187b      	adds	r3, r7, r1
 8006922:	2103      	movs	r1, #3
 8006924:	0018      	movs	r0, r3
 8006926:	f000 ffa7 	bl	8007878 <CDC_Transmit_FS>
 800692a:	e049      	b.n	80069c0 <main+0x240>
			  }

			  // Command 0xA4 -> Generate clock pulse
			  else if(data_buffer[1] == encoded_command_byte_2[3])
 800692c:	4b4d      	ldr	r3, [pc, #308]	; (8006a64 <main+0x2e4>)
 800692e:	785a      	ldrb	r2, [r3, #1]
 8006930:	4b4d      	ldr	r3, [pc, #308]	; (8006a68 <main+0x2e8>)
 8006932:	78db      	ldrb	r3, [r3, #3]
 8006934:	429a      	cmp	r2, r3
 8006936:	d10b      	bne.n	8006950 <main+0x1d0>
			  {
				  /* Start the countdown timer */
				  HAL_GPIO_WritePin(GEN_GPIO_Port, GEN_Pin, GPIO_PIN_SET);
 8006938:	2390      	movs	r3, #144	; 0x90
 800693a:	05db      	lsls	r3, r3, #23
 800693c:	2201      	movs	r2, #1
 800693e:	2110      	movs	r1, #16
 8006940:	0018      	movs	r0, r3
 8006942:	f7f9 ff27 	bl	8000794 <HAL_GPIO_WritePin>
				  HAL_TIM_Base_Start(&htim6);
 8006946:	4b49      	ldr	r3, [pc, #292]	; (8006a6c <main+0x2ec>)
 8006948:	0018      	movs	r0, r3
 800694a:	f7fd fd15 	bl	8004378 <HAL_TIM_Base_Start>
 800694e:	e037      	b.n	80069c0 <main+0x240>
			  }

			  // Command 0xA5 -> Establish Connection
			  else if(data_buffer[1] == encoded_command_byte_2[4])
 8006950:	4b44      	ldr	r3, [pc, #272]	; (8006a64 <main+0x2e4>)
 8006952:	785a      	ldrb	r2, [r3, #1]
 8006954:	4b44      	ldr	r3, [pc, #272]	; (8006a68 <main+0x2e8>)
 8006956:	791b      	ldrb	r3, [r3, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	d112      	bne.n	8006982 <main+0x202>
			  {
				  if(data_buffer[2] == 0x75 && data_buffer[3] == 0x31)
 800695c:	4b41      	ldr	r3, [pc, #260]	; (8006a64 <main+0x2e4>)
 800695e:	789b      	ldrb	r3, [r3, #2]
 8006960:	2b75      	cmp	r3, #117	; 0x75
 8006962:	d12d      	bne.n	80069c0 <main+0x240>
 8006964:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <main+0x2e4>)
 8006966:	78db      	ldrb	r3, [r3, #3]
 8006968:	2b31      	cmp	r3, #49	; 0x31
 800696a:	d129      	bne.n	80069c0 <main+0x240>
				  {
					/* Refresh the "Lost connection with PC" timer */
					TIM14->CNT = 0;
 800696c:	4b3a      	ldr	r3, [pc, #232]	; (8006a58 <main+0x2d8>)
 800696e:	2200      	movs	r2, #0
 8006970:	625a      	str	r2, [r3, #36]	; 0x24

					  is_USB_Connected = 1;
 8006972:	4b32      	ldr	r3, [pc, #200]	; (8006a3c <main+0x2bc>)
 8006974:	2201      	movs	r2, #1
 8006976:	701a      	strb	r2, [r3, #0]
					  status_led_control(USB_STATUS_LED, ON);
 8006978:	2101      	movs	r1, #1
 800697a:	2002      	movs	r0, #2
 800697c:	f000 fc54 	bl	8007228 <status_led_control>
 8006980:	e01e      	b.n	80069c0 <main+0x240>
				  }
			  }

			  // Command 0xA6 -> Connection OK Report Message
			  else if(data_buffer[1] == encoded_command_byte_2[5])
 8006982:	4b38      	ldr	r3, [pc, #224]	; (8006a64 <main+0x2e4>)
 8006984:	785a      	ldrb	r2, [r3, #1]
 8006986:	4b38      	ldr	r3, [pc, #224]	; (8006a68 <main+0x2e8>)
 8006988:	795b      	ldrb	r3, [r3, #5]
 800698a:	429a      	cmp	r2, r3
 800698c:	d106      	bne.n	800699c <main+0x21c>
			  {
				  TIM14->CNT = 0;
 800698e:	4b32      	ldr	r3, [pc, #200]	; (8006a58 <main+0x2d8>)
 8006990:	2200      	movs	r2, #0
 8006992:	625a      	str	r2, [r3, #36]	; 0x24
				  is_USB_Connected = 1;
 8006994:	4b29      	ldr	r3, [pc, #164]	; (8006a3c <main+0x2bc>)
 8006996:	2201      	movs	r2, #1
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	e011      	b.n	80069c0 <main+0x240>
			  }

			  // Command 0xA7 -> Disconnect Dev Board
			  else if(data_buffer[1] == encoded_command_byte_2[6])
 800699c:	4b31      	ldr	r3, [pc, #196]	; (8006a64 <main+0x2e4>)
 800699e:	785a      	ldrb	r2, [r3, #1]
 80069a0:	4b31      	ldr	r3, [pc, #196]	; (8006a68 <main+0x2e8>)
 80069a2:	799b      	ldrb	r3, [r3, #6]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d107      	bne.n	80069b8 <main+0x238>
			  {
				  is_USB_Connected = 0;
 80069a8:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <main+0x2bc>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	701a      	strb	r2, [r3, #0]
				  status_led_control(USB_STATUS_LED, OFF);
 80069ae:	2100      	movs	r1, #0
 80069b0:	2002      	movs	r0, #2
 80069b2:	f000 fc39 	bl	8007228 <status_led_control>
 80069b6:	e003      	b.n	80069c0 <main+0x240>
			  }

			  else if(data_buffer[1] == encoded_command_byte_2[7])
 80069b8:	4b2a      	ldr	r3, [pc, #168]	; (8006a64 <main+0x2e4>)
 80069ba:	785a      	ldrb	r2, [r3, #1]
 80069bc:	4b2a      	ldr	r3, [pc, #168]	; (8006a68 <main+0x2e8>)
 80069be:	79db      	ldrb	r3, [r3, #7]
			  }

		  }


		  data_available = 0;
 80069c0:	4b27      	ldr	r3, [pc, #156]	; (8006a60 <main+0x2e0>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]
		  flush_data_buffer();
 80069c6:	f000 fbbb 	bl	8007140 <flush_data_buffer>
	  }


	  if(transmit_inputs == 1 && is_USB_Connected==1)
 80069ca:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <main+0x2c0>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d000      	beq.n	80069d4 <main+0x254>
 80069d2:	e70e      	b.n	80067f2 <main+0x72>
 80069d4:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <main+0x2bc>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d000      	beq.n	80069de <main+0x25e>
 80069dc:	e709      	b.n	80067f2 <main+0x72>
	  {
	  	  uint16_t inputs_states;
	  	  inputs_states = read_all_inputs(hi2c1);
 80069de:	2610      	movs	r6, #16
 80069e0:	19bd      	adds	r5, r7, r6
 80069e2:	4c18      	ldr	r4, [pc, #96]	; (8006a44 <main+0x2c4>)
 80069e4:	466b      	mov	r3, sp
 80069e6:	0018      	movs	r0, r3
 80069e8:	0023      	movs	r3, r4
 80069ea:	3310      	adds	r3, #16
 80069ec:	223c      	movs	r2, #60	; 0x3c
 80069ee:	0019      	movs	r1, r3
 80069f0:	f001 fc4e 	bl	8008290 <memcpy>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	6861      	ldr	r1, [r4, #4]
 80069f8:	68a2      	ldr	r2, [r4, #8]
 80069fa:	68e3      	ldr	r3, [r4, #12]
 80069fc:	f7ff fdf9 	bl	80065f2 <read_all_inputs>
 8006a00:	0003      	movs	r3, r0
 8006a02:	802b      	strh	r3, [r5, #0]
	  	  uint8_t inputs_states_buffer[3];

	  	  /* To identify we send back the state of the inputs
	  	   * we send the byte 0xB1
	  	   */
	  	  inputs_states_buffer[0] = 0xB1;
 8006a04:	1d3b      	adds	r3, r7, #4
 8006a06:	22b1      	movs	r2, #177	; 0xb1
 8006a08:	701a      	strb	r2, [r3, #0]

	  	  inputs_states_buffer[1] = ((inputs_states)>>8); //High byte
 8006a0a:	19bb      	adds	r3, r7, r6
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	1d3b      	adds	r3, r7, #4
 8006a16:	705a      	strb	r2, [r3, #1]
	  	  inputs_states_buffer[2] =   inputs_states;	  //Low  byte
 8006a18:	19bb      	adds	r3, r7, r6
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	1d3b      	adds	r3, r7, #4
 8006a20:	709a      	strb	r2, [r3, #2]
	  	  CDC_Transmit_FS(inputs_states_buffer, 3);
 8006a22:	1d3b      	adds	r3, r7, #4
 8006a24:	2103      	movs	r1, #3
 8006a26:	0018      	movs	r0, r3
 8006a28:	f000 ff26 	bl	8007878 <CDC_Transmit_FS>

	  	  transmit_inputs = 0;
 8006a2c:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <main+0x2c0>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	701a      	strb	r2, [r3, #0]

	  	  /* Debounce time when input is unstable
	  	   * to avoid system congestion (by 
         * flooding the communication channel) */
	  	  HAL_Delay(20);
 8006a32:	2014      	movs	r0, #20
 8006a34:	f7f9 fc3a 	bl	80002ac <HAL_Delay>
	  timer6_counter = TIM6->CNT;
 8006a38:	e6db      	b.n	80067f2 <main+0x72>
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	2000046c 	.word	0x2000046c
 8006a40:	20000420 	.word	0x20000420
 8006a44:	200003d0 	.word	0x200003d0
 8006a48:	40001000 	.word	0x40001000
 8006a4c:	20000464 	.word	0x20000464
 8006a50:	40001400 	.word	0x40001400
 8006a54:	2000041c 	.word	0x2000041c
 8006a58:	40002000 	.word	0x40002000
 8006a5c:	200003cc 	.word	0x200003cc
 8006a60:	20000468 	.word	0x20000468
 8006a64:	20000560 	.word	0x20000560
 8006a68:	20000110 	.word	0x20000110
 8006a6c:	20000424 	.word	0x20000424

08006a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b0a1      	sub	sp, #132	; 0x84
 8006a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a76:	244c      	movs	r4, #76	; 0x4c
 8006a78:	193b      	adds	r3, r7, r4
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	2334      	movs	r3, #52	; 0x34
 8006a7e:	001a      	movs	r2, r3
 8006a80:	2100      	movs	r1, #0
 8006a82:	f001 fc0e 	bl	80082a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a86:	233c      	movs	r3, #60	; 0x3c
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	001a      	movs	r2, r3
 8006a90:	2100      	movs	r1, #0
 8006a92:	f001 fc06 	bl	80082a2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006a96:	2320      	movs	r3, #32
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	231c      	movs	r3, #28
 8006a9e:	001a      	movs	r2, r3
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	f001 fbfe 	bl	80082a2 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	18fb      	adds	r3, r7, r3
 8006aaa:	0018      	movs	r0, r3
 8006aac:	2318      	movs	r3, #24
 8006aae:	001a      	movs	r2, r3
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	f001 fbf6 	bl	80082a2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8006ab6:	0021      	movs	r1, r4
 8006ab8:	187b      	adds	r3, r7, r1
 8006aba:	2222      	movs	r2, #34	; 0x22
 8006abc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006abe:	187b      	adds	r3, r7, r1
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006ac4:	187b      	adds	r3, r7, r1
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006aca:	187b      	adds	r3, r7, r1
 8006acc:	2210      	movs	r2, #16
 8006ace:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006ad6:	187b      	adds	r3, r7, r1
 8006ad8:	2280      	movs	r2, #128	; 0x80
 8006ada:	0212      	lsls	r2, r2, #8
 8006adc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8006ade:	187b      	adds	r3, r7, r1
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	0352      	lsls	r2, r2, #13
 8006ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8006ae6:	187b      	adds	r3, r7, r1
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006aec:	187b      	adds	r3, r7, r1
 8006aee:	0018      	movs	r0, r3
 8006af0:	f7fc fdc6 	bl	8003680 <HAL_RCC_OscConfig>
 8006af4:	1e03      	subs	r3, r0, #0
 8006af6:	d001      	beq.n	8006afc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8006af8:	f000 fc0c 	bl	8007314 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006afc:	213c      	movs	r1, #60	; 0x3c
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	2207      	movs	r2, #7
 8006b02:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	2202      	movs	r2, #2
 8006b08:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006b10:	187b      	adds	r3, r7, r1
 8006b12:	2200      	movs	r2, #0
 8006b14:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006b16:	187b      	adds	r3, r7, r1
 8006b18:	2101      	movs	r1, #1
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7fd f910 	bl	8003d40 <HAL_RCC_ClockConfig>
 8006b20:	1e03      	subs	r3, r0, #0
 8006b22:	d001      	beq.n	8006b28 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8006b24:	f000 fbf6 	bl	8007314 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8006b28:	2120      	movs	r1, #32
 8006b2a:	187b      	adds	r3, r7, r1
 8006b2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <SystemClock_Config+0x138>)
 8006b2e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006b30:	187b      	adds	r3, r7, r1
 8006b32:	2200      	movs	r2, #0
 8006b34:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8006b36:	187b      	adds	r3, r7, r1
 8006b38:	2200      	movs	r2, #0
 8006b3a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006b3c:	187b      	adds	r3, r7, r1
 8006b3e:	2200      	movs	r2, #0
 8006b40:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b42:	187b      	adds	r3, r7, r1
 8006b44:	0018      	movs	r0, r3
 8006b46:	f7fd faa3 	bl	8004090 <HAL_RCCEx_PeriphCLKConfig>
 8006b4a:	1e03      	subs	r3, r0, #0
 8006b4c:	d001      	beq.n	8006b52 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8006b4e:	f000 fbe1 	bl	8007314 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock 
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8006b52:	4b16      	ldr	r3, [pc, #88]	; (8006bac <SystemClock_Config+0x13c>)
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	4b15      	ldr	r3, [pc, #84]	; (8006bac <SystemClock_Config+0x13c>)
 8006b58:	2180      	movs	r1, #128	; 0x80
 8006b5a:	0509      	lsls	r1, r1, #20
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	61da      	str	r2, [r3, #28]
 8006b60:	4b12      	ldr	r3, [pc, #72]	; (8006bac <SystemClock_Config+0x13c>)
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	2380      	movs	r3, #128	; 0x80
 8006b66:	051b      	lsls	r3, r3, #20
 8006b68:	4013      	ands	r3, r2
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
  /** Configures CRS 
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8006b6e:	2108      	movs	r1, #8
 8006b70:	187b      	adds	r3, r7, r1
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8006b76:	187b      	adds	r3, r7, r1
 8006b78:	2280      	movs	r2, #128	; 0x80
 8006b7a:	0592      	lsls	r2, r2, #22
 8006b7c:	605a      	str	r2, [r3, #4]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8006b7e:	187b      	adds	r3, r7, r1
 8006b80:	2200      	movs	r2, #0
 8006b82:	609a      	str	r2, [r3, #8]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8006b84:	187b      	adds	r3, r7, r1
 8006b86:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <SystemClock_Config+0x140>)
 8006b88:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8006b8a:	187b      	adds	r3, r7, r1
 8006b8c:	2222      	movs	r2, #34	; 0x22
 8006b8e:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8006b90:	187b      	adds	r3, r7, r1
 8006b92:	2220      	movs	r2, #32
 8006b94:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8006b96:	187b      	adds	r3, r7, r1
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7fd fb79 	bl	8004290 <HAL_RCCEx_CRSConfig>
}
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	b021      	add	sp, #132	; 0x84
 8006ba4:	bd90      	pop	{r4, r7, pc}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	00020022 	.word	0x00020022
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	0000bb7f 	.word	0x0000bb7f

08006bb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006bb8:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006bba:	4a1c      	ldr	r2, [pc, #112]	; (8006c2c <MX_I2C1_Init+0x78>)
 8006bbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006bc0:	4a1b      	ldr	r2, [pc, #108]	; (8006c30 <MX_I2C1_Init+0x7c>)
 8006bc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006bc4:	4b18      	ldr	r3, [pc, #96]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006bca:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006bcc:	2201      	movs	r2, #1
 8006bce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006bd0:	4b15      	ldr	r3, [pc, #84]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006bdc:	4b12      	ldr	r3, [pc, #72]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006be2:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006be8:	4b0f      	ldr	r3, [pc, #60]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006bee:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7f9 fe09 	bl	8000808 <HAL_I2C_Init>
 8006bf6:	1e03      	subs	r3, r0, #0
 8006bf8:	d001      	beq.n	8006bfe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006bfa:	f000 fb8b 	bl	8007314 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006c00:	2100      	movs	r1, #0
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7fa fb6e 	bl	80012e4 <HAL_I2CEx_ConfigAnalogFilter>
 8006c08:	1e03      	subs	r3, r0, #0
 8006c0a:	d001      	beq.n	8006c10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006c0c:	f000 fb82 	bl	8007314 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <MX_I2C1_Init+0x74>)
 8006c12:	2100      	movs	r1, #0
 8006c14:	0018      	movs	r0, r3
 8006c16:	f7fa fbb1 	bl	800137c <HAL_I2CEx_ConfigDigitalFilter>
 8006c1a:	1e03      	subs	r3, r0, #0
 8006c1c:	d001      	beq.n	8006c22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006c1e:	f000 fb79 	bl	8007314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	200003d0 	.word	0x200003d0
 8006c2c:	40005400 	.word	0x40005400
 8006c30:	0000020b 	.word	0x0000020b

08006c34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c3a:	003b      	movs	r3, r7
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	2308      	movs	r3, #8
 8006c40:	001a      	movs	r2, r3
 8006c42:	2100      	movs	r1, #0
 8006c44:	f001 fb2d 	bl	80082a2 <memset>

  //Prescaler value : 100-1
  //Period value : 480-1

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006c48:	4b1b      	ldr	r3, [pc, #108]	; (8006cb8 <MX_TIM6_Init+0x84>)
 8006c4a:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <MX_TIM6_Init+0x88>)
 8006c4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8006c4e:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <MX_TIM6_Init+0x84>)
 8006c50:	2263      	movs	r2, #99	; 0x63
 8006c52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c54:	4b18      	ldr	r3, [pc, #96]	; (8006cb8 <MX_TIM6_Init+0x84>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 480-1;
 8006c5a:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <MX_TIM6_Init+0x84>)
 8006c5c:	22e0      	movs	r2, #224	; 0xe0
 8006c5e:	32ff      	adds	r2, #255	; 0xff
 8006c60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c62:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <MX_TIM6_Init+0x84>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006c68:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <MX_TIM6_Init+0x84>)
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7fd fb58 	bl	8004320 <HAL_TIM_Base_Init>
 8006c70:	1e03      	subs	r3, r0, #0
 8006c72:	d001      	beq.n	8006c78 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8006c74:	f000 fb4e 	bl	8007314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c78:	003b      	movs	r3, r7
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c7e:	003b      	movs	r3, r7
 8006c80:	2200      	movs	r2, #0
 8006c82:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006c84:	003a      	movs	r2, r7
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <MX_TIM6_Init+0x84>)
 8006c88:	0011      	movs	r1, r2
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f7fd fd8a 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006c90:	1e03      	subs	r3, r0, #0
 8006c92:	d001      	beq.n	8006c98 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8006c94:	f000 fb3e 	bl	8007314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <MX_TIM6_Init+0x84>)
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f7fd fbb0 	bl	8004400 <HAL_TIM_Base_Start_IT>
 8006ca0:	1e03      	subs	r3, r0, #0
 8006ca2:	d001      	beq.n	8006ca8 <MX_TIM6_Init+0x74>
  {
  	  /* Starting Error */
  	  Error_Handler();
 8006ca4:	f000 fb36 	bl	8007314 <Error_Handler>

  /* Initially we want the CLK Generation timer
   * to be deactivated. It's activated when the
   * generation command arrives from the PC.
   */
  HAL_TIM_Base_Stop(&htim6);
 8006ca8:	4b03      	ldr	r3, [pc, #12]	; (8006cb8 <MX_TIM6_Init+0x84>)
 8006caa:	0018      	movs	r0, r3
 8006cac:	f7fd fb7e 	bl	80043ac <HAL_TIM_Base_Stop>

  /* USER CODE END TIM6_Init 2 */

}
 8006cb0:	46c0      	nop			; (mov r8, r8)
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	b002      	add	sp, #8
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20000424 	.word	0x20000424
 8006cbc:	40001000 	.word	0x40001000

08006cc0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cc6:	003b      	movs	r3, r7
 8006cc8:	0018      	movs	r0, r3
 8006cca:	2308      	movs	r3, #8
 8006ccc:	001a      	movs	r2, r3
 8006cce:	2100      	movs	r1, #0
 8006cd0:	f001 fae7 	bl	80082a2 <memset>

  //Prescaler value : 500-1
    //Period value : 4800-1

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006cd4:	4b19      	ldr	r3, [pc, #100]	; (8006d3c <MX_TIM7_Init+0x7c>)
 8006cd6:	4a1a      	ldr	r2, [pc, #104]	; (8006d40 <MX_TIM7_Init+0x80>)
 8006cd8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 500-1;
 8006cda:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <MX_TIM7_Init+0x7c>)
 8006cdc:	22f4      	movs	r2, #244	; 0xf4
 8006cde:	32ff      	adds	r2, #255	; 0xff
 8006ce0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ce2:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <MX_TIM7_Init+0x7c>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4800-1;
 8006ce8:	4b14      	ldr	r3, [pc, #80]	; (8006d3c <MX_TIM7_Init+0x7c>)
 8006cea:	4a16      	ldr	r2, [pc, #88]	; (8006d44 <MX_TIM7_Init+0x84>)
 8006cec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <MX_TIM7_Init+0x7c>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006cf4:	4b11      	ldr	r3, [pc, #68]	; (8006d3c <MX_TIM7_Init+0x7c>)
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f7fd fb12 	bl	8004320 <HAL_TIM_Base_Init>
 8006cfc:	1e03      	subs	r3, r0, #0
 8006cfe:	d001      	beq.n	8006d04 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 8006d00:	f000 fb08 	bl	8007314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d04:	003b      	movs	r3, r7
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d0a:	003b      	movs	r3, r7
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006d10:	003a      	movs	r2, r7
 8006d12:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <MX_TIM7_Init+0x7c>)
 8006d14:	0011      	movs	r1, r2
 8006d16:	0018      	movs	r0, r3
 8006d18:	f7fd fd44 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006d1c:	1e03      	subs	r3, r0, #0
 8006d1e:	d001      	beq.n	8006d24 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 8006d20:	f000 faf8 	bl	8007314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <MX_TIM7_Init+0x7c>)
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7fd fb6a 	bl	8004400 <HAL_TIM_Base_Start_IT>
 8006d2c:	1e03      	subs	r3, r0, #0
 8006d2e:	d001      	beq.n	8006d34 <MX_TIM7_Init+0x74>
  {
  	  /* Starting Error */
  	  Error_Handler();
 8006d30:	f000 faf0 	bl	8007314 <Error_Handler>
  }

  /* USER CODE END TIM7_Init 2 */

}
 8006d34:	46c0      	nop			; (mov r8, r8)
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b002      	add	sp, #8
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20000520 	.word	0x20000520
 8006d40:	40001400 	.word	0x40001400
 8006d44:	000012bf 	.word	0x000012bf

08006d48 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0

	//Presc Value : 10000
	//Period Value : 24000

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006d4c:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <MX_TIM14_Init+0x50>)
 8006d4e:	4a13      	ldr	r2, [pc, #76]	; (8006d9c <MX_TIM14_Init+0x54>)
 8006d50:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10000-1;
 8006d52:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <MX_TIM14_Init+0x50>)
 8006d54:	4a12      	ldr	r2, [pc, #72]	; (8006da0 <MX_TIM14_Init+0x58>)
 8006d56:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d58:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <MX_TIM14_Init+0x50>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <MX_TIM14_Init+0x50>)
 8006d60:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <MX_TIM14_Init+0x5c>)
 8006d62:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <MX_TIM14_Init+0x50>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <MX_TIM14_Init+0x50>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <MX_TIM14_Init+0x50>)
 8006d72:	0018      	movs	r0, r3
 8006d74:	f7fd fad4 	bl	8004320 <HAL_TIM_Base_Init>
 8006d78:	1e03      	subs	r3, r0, #0
 8006d7a:	d001      	beq.n	8006d80 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8006d7c:	f000 faca 	bl	8007314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  if (HAL_TIM_Base_Start_IT(&htim14) != HAL_OK)
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <MX_TIM14_Init+0x50>)
 8006d82:	0018      	movs	r0, r3
 8006d84:	f7fd fb3c 	bl	8004400 <HAL_TIM_Base_Start_IT>
 8006d88:	1e03      	subs	r3, r0, #0
 8006d8a:	d001      	beq.n	8006d90 <MX_TIM14_Init+0x48>
  {
  	  /* Starting Error */
  	  Error_Handler();
 8006d8c:	f000 fac2 	bl	8007314 <Error_Handler>
  }

  /* USER CODE END TIM14_Init 2 */

}
 8006d90:	46c0      	nop			; (mov r8, r8)
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	200004e0 	.word	0x200004e0
 8006d9c:	40002000 	.word	0x40002000
 8006da0:	0000270f 	.word	0x0000270f
 8006da4:	00005dbf 	.word	0x00005dbf

08006da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006dac:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006dae:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <MX_USART2_UART_Init+0x6c>)
 8006db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 0x9600;
 8006db2:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006db4:	2296      	movs	r2, #150	; 0x96
 8006db6:	0212      	lsls	r2, r2, #8
 8006db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006dba:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006dc0:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006dc6:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006dcc:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006dce:	220c      	movs	r2, #12
 8006dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006dd8:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8006de4:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006de6:	2240      	movs	r2, #64	; 0x40
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8006dea:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006dec:	2280      	movs	r2, #128	; 0x80
 8006dee:	0352      	lsls	r2, r2, #13
 8006df0:	641a      	str	r2, [r3, #64]	; 0x40
  huart2.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <MX_USART2_UART_Init+0x68>)
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	f7fd fd26 	bl	800484c <HAL_UART_Init>
 8006e00:	1e03      	subs	r3, r0, #0
 8006e02:	d001      	beq.n	8006e08 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8006e04:	f000 fa86 	bl	8007314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006e08:	46c0      	nop			; (mov r8, r8)
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	20000470 	.word	0x20000470
 8006e14:	40004400 	.word	0x40004400

08006e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006e18:	b590      	push	{r4, r7, lr}
 8006e1a:	b08b      	sub	sp, #44	; 0x2c
 8006e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e1e:	2414      	movs	r4, #20
 8006e20:	193b      	adds	r3, r7, r4
 8006e22:	0018      	movs	r0, r3
 8006e24:	2314      	movs	r3, #20
 8006e26:	001a      	movs	r2, r3
 8006e28:	2100      	movs	r1, #0
 8006e2a:	f001 fa3a 	bl	80082a2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e2e:	4b91      	ldr	r3, [pc, #580]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	4b90      	ldr	r3, [pc, #576]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	0309      	lsls	r1, r1, #12
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	615a      	str	r2, [r3, #20]
 8006e3c:	4b8d      	ldr	r3, [pc, #564]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e3e:	695a      	ldr	r2, [r3, #20]
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	031b      	lsls	r3, r3, #12
 8006e44:	4013      	ands	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006e4a:	4b8a      	ldr	r3, [pc, #552]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	4b89      	ldr	r3, [pc, #548]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e50:	2180      	movs	r1, #128	; 0x80
 8006e52:	03c9      	lsls	r1, r1, #15
 8006e54:	430a      	orrs	r2, r1
 8006e56:	615a      	str	r2, [r3, #20]
 8006e58:	4b86      	ldr	r3, [pc, #536]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e5a:	695a      	ldr	r2, [r3, #20]
 8006e5c:	2380      	movs	r3, #128	; 0x80
 8006e5e:	03db      	lsls	r3, r3, #15
 8006e60:	4013      	ands	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e66:	4b83      	ldr	r3, [pc, #524]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e68:	695a      	ldr	r2, [r3, #20]
 8006e6a:	4b82      	ldr	r3, [pc, #520]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e6c:	2180      	movs	r1, #128	; 0x80
 8006e6e:	0289      	lsls	r1, r1, #10
 8006e70:	430a      	orrs	r2, r1
 8006e72:	615a      	str	r2, [r3, #20]
 8006e74:	4b7f      	ldr	r3, [pc, #508]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	2380      	movs	r3, #128	; 0x80
 8006e7a:	029b      	lsls	r3, r3, #10
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	60bb      	str	r3, [r7, #8]
 8006e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e82:	4b7c      	ldr	r3, [pc, #496]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	4b7b      	ldr	r3, [pc, #492]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e88:	2180      	movs	r1, #128	; 0x80
 8006e8a:	02c9      	lsls	r1, r1, #11
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	615a      	str	r2, [r3, #20]
 8006e90:	4b78      	ldr	r3, [pc, #480]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006e92:	695a      	ldr	r2, [r3, #20]
 8006e94:	2380      	movs	r3, #128	; 0x80
 8006e96:	02db      	lsls	r3, r3, #11
 8006e98:	4013      	ands	r3, r2
 8006e9a:	607b      	str	r3, [r7, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e9e:	4b75      	ldr	r3, [pc, #468]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	4b74      	ldr	r3, [pc, #464]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006ea4:	2180      	movs	r1, #128	; 0x80
 8006ea6:	0349      	lsls	r1, r1, #13
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	615a      	str	r2, [r3, #20]
 8006eac:	4b71      	ldr	r3, [pc, #452]	; (8007074 <MX_GPIO_Init+0x25c>)
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	2380      	movs	r3, #128	; 0x80
 8006eb2:	035b      	lsls	r3, r3, #13
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8006eba:	4b6f      	ldr	r3, [pc, #444]	; (8007078 <MX_GPIO_Init+0x260>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	2107      	movs	r1, #7
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f7f9 fc67 	bl	8000794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GEN_GPIO_Port, GEN_Pin, GPIO_PIN_RESET);
 8006ec6:	2390      	movs	r3, #144	; 0x90
 8006ec8:	05db      	lsls	r3, r3, #23
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2110      	movs	r1, #16
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f7f9 fc60 	bl	8000794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ERST_1_Pin|ERST_2_Pin, GPIO_PIN_RESET);
 8006ed4:	2381      	movs	r3, #129	; 0x81
 8006ed6:	015b      	lsls	r3, r3, #5
 8006ed8:	4867      	ldr	r0, [pc, #412]	; (8007078 <MX_GPIO_Init+0x260>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	0019      	movs	r1, r3
 8006ede:	f7f9 fc59 	bl	8000794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG_1_Pin|DBG_2_Pin|DBG_3_Pin|DBG_4_Pin, GPIO_PIN_RESET);
 8006ee2:	23f0      	movs	r3, #240	; 0xf0
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	4865      	ldr	r0, [pc, #404]	; (800707c <MX_GPIO_Init+0x264>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	0019      	movs	r1, r3
 8006eec:	f7f9 fc52 	bl	8000794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4 
                           PC6 PC7 PC8 PC9 
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4 
 8006ef0:	193b      	adds	r3, r7, r4
 8006ef2:	4a63      	ldr	r2, [pc, #396]	; (8007080 <MX_GPIO_Init+0x268>)
 8006ef4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ef6:	193b      	adds	r3, r7, r4
 8006ef8:	2203      	movs	r2, #3
 8006efa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efc:	193b      	adds	r3, r7, r4
 8006efe:	2200      	movs	r2, #0
 8006f00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f02:	193b      	adds	r3, r7, r4
 8006f04:	4a5c      	ldr	r2, [pc, #368]	; (8007078 <MX_GPIO_Init+0x260>)
 8006f06:	0019      	movs	r1, r3
 8006f08:	0010      	movs	r0, r2
 8006f0a:	f7f9 fac7 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006f0e:	193b      	adds	r3, r7, r4
 8006f10:	2202      	movs	r2, #2
 8006f12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f14:	193b      	adds	r3, r7, r4
 8006f16:	2203      	movs	r2, #3
 8006f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f1a:	193b      	adds	r3, r7, r4
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006f20:	193b      	adds	r3, r7, r4
 8006f22:	4a58      	ldr	r2, [pc, #352]	; (8007084 <MX_GPIO_Init+0x26c>)
 8006f24:	0019      	movs	r1, r3
 8006f26:	0010      	movs	r0, r2
 8006f28:	f7f9 fab8 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin ERST_1_Pin 
                           ERST_2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|ERST_1_Pin 
 8006f2c:	193b      	adds	r3, r7, r4
 8006f2e:	4a56      	ldr	r2, [pc, #344]	; (8007088 <MX_GPIO_Init+0x270>)
 8006f30:	601a      	str	r2, [r3, #0]
                          |ERST_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006f32:	193b      	adds	r3, r7, r4
 8006f34:	2211      	movs	r2, #17
 8006f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f38:	193b      	adds	r3, r7, r4
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f3e:	193b      	adds	r3, r7, r4
 8006f40:	2200      	movs	r2, #0
 8006f42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f44:	193b      	adds	r3, r7, r4
 8006f46:	4a4c      	ldr	r2, [pc, #304]	; (8007078 <MX_GPIO_Init+0x260>)
 8006f48:	0019      	movs	r1, r3
 8006f4a:	0010      	movs	r0, r2
 8006f4c:	f7f9 faa6 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_1_Pin INT_2_Pin */
  GPIO_InitStruct.Pin = INT_1_Pin|INT_2_Pin;
 8006f50:	193b      	adds	r3, r7, r4
 8006f52:	4a4e      	ldr	r2, [pc, #312]	; (800708c <MX_GPIO_Init+0x274>)
 8006f54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006f56:	193b      	adds	r3, r7, r4
 8006f58:	4a4d      	ldr	r2, [pc, #308]	; (8007090 <MX_GPIO_Init+0x278>)
 8006f5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5c:	193b      	adds	r3, r7, r4
 8006f5e:	2200      	movs	r2, #0
 8006f60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f62:	193b      	adds	r3, r7, r4
 8006f64:	4a44      	ldr	r2, [pc, #272]	; (8007078 <MX_GPIO_Init+0x260>)
 8006f66:	0019      	movs	r1, r3
 8006f68:	0010      	movs	r0, r2
 8006f6a:	f7f9 fa97 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA6 
                           PA7 PA8 PA9 PA10 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6 
 8006f6e:	193b      	adds	r3, r7, r4
 8006f70:	4a48      	ldr	r2, [pc, #288]	; (8007094 <MX_GPIO_Init+0x27c>)
 8006f72:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f74:	193b      	adds	r3, r7, r4
 8006f76:	2203      	movs	r2, #3
 8006f78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f80:	193a      	adds	r2, r7, r4
 8006f82:	2390      	movs	r3, #144	; 0x90
 8006f84:	05db      	lsls	r3, r3, #23
 8006f86:	0011      	movs	r1, r2
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7f9 fa87 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pin : GEN_Pin */
  GPIO_InitStruct.Pin = GEN_Pin;
 8006f8e:	193b      	adds	r3, r7, r4
 8006f90:	2210      	movs	r2, #16
 8006f92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f94:	193b      	adds	r3, r7, r4
 8006f96:	2201      	movs	r2, #1
 8006f98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f9a:	193b      	adds	r3, r7, r4
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006fa0:	193b      	adds	r3, r7, r4
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GEN_GPIO_Port, &GPIO_InitStruct);
 8006fa6:	193a      	adds	r2, r7, r4
 8006fa8:	2390      	movs	r3, #144	; 0x90
 8006faa:	05db      	lsls	r3, r3, #23
 8006fac:	0011      	movs	r1, r2
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7f9 fa74 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006fb4:	193b      	adds	r3, r7, r4
 8006fb6:	4a38      	ldr	r2, [pc, #224]	; (8007098 <MX_GPIO_Init+0x280>)
 8006fb8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fba:	193b      	adds	r3, r7, r4
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc0:	193b      	adds	r3, r7, r4
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fc6:	193b      	adds	r3, r7, r4
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <MX_GPIO_Init+0x264>)
 8006fca:	0019      	movs	r1, r3
 8006fcc:	0010      	movs	r0, r2
 8006fce:	f7f9 fa65 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8006fd2:	0021      	movs	r1, r4
 8006fd4:	187b      	adds	r3, r7, r1
 8006fd6:	22c0      	movs	r2, #192	; 0xc0
 8006fd8:	0112      	lsls	r2, r2, #4
 8006fda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fdc:	187b      	adds	r3, r7, r1
 8006fde:	2212      	movs	r2, #18
 8006fe0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fe2:	187b      	adds	r3, r7, r1
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006fe8:	187b      	adds	r3, r7, r1
 8006fea:	2203      	movs	r2, #3
 8006fec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8006fee:	187b      	adds	r3, r7, r1
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ff4:	000c      	movs	r4, r1
 8006ff6:	187b      	adds	r3, r7, r1
 8006ff8:	4a20      	ldr	r2, [pc, #128]	; (800707c <MX_GPIO_Init+0x264>)
 8006ffa:	0019      	movs	r1, r3
 8006ffc:	0010      	movs	r0, r2
 8006ffe:	f7f9 fa4d 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_1_Pin DBG_2_Pin DBG_3_Pin DBG_4_Pin */
  GPIO_InitStruct.Pin = DBG_1_Pin|DBG_2_Pin|DBG_3_Pin|DBG_4_Pin;
 8007002:	0021      	movs	r1, r4
 8007004:	187b      	adds	r3, r7, r1
 8007006:	22f0      	movs	r2, #240	; 0xf0
 8007008:	0212      	lsls	r2, r2, #8
 800700a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800700c:	187b      	adds	r3, r7, r1
 800700e:	2201      	movs	r2, #1
 8007010:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007012:	187b      	adds	r3, r7, r1
 8007014:	2200      	movs	r2, #0
 8007016:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007018:	187b      	adds	r3, r7, r1
 800701a:	2200      	movs	r2, #0
 800701c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800701e:	000c      	movs	r4, r1
 8007020:	187b      	adds	r3, r7, r1
 8007022:	4a16      	ldr	r2, [pc, #88]	; (800707c <MX_GPIO_Init+0x264>)
 8007024:	0019      	movs	r1, r3
 8007026:	0010      	movs	r0, r2
 8007028:	f7f9 fa38 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800702c:	0021      	movs	r1, r4
 800702e:	187b      	adds	r3, r7, r1
 8007030:	2204      	movs	r2, #4
 8007032:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007034:	187b      	adds	r3, r7, r1
 8007036:	2203      	movs	r2, #3
 8007038:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800703a:	187b      	adds	r3, r7, r1
 800703c:	2200      	movs	r2, #0
 800703e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007040:	187b      	adds	r3, r7, r1
 8007042:	4a16      	ldr	r2, [pc, #88]	; (800709c <MX_GPIO_Init+0x284>)
 8007044:	0019      	movs	r1, r3
 8007046:	0010      	movs	r0, r2
 8007048:	f7f9 fa28 	bl	800049c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800704c:	2200      	movs	r2, #0
 800704e:	2100      	movs	r1, #0
 8007050:	2006      	movs	r0, #6
 8007052:	f7f9 f9f1 	bl	8000438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8007056:	2006      	movs	r0, #6
 8007058:	f7f9 fa03 	bl	8000462 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800705c:	2200      	movs	r2, #0
 800705e:	2100      	movs	r1, #0
 8007060:	2007      	movs	r0, #7
 8007062:	f7f9 f9e9 	bl	8000438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007066:	2007      	movs	r0, #7
 8007068:	f7f9 f9fb 	bl	8000462 <HAL_NVIC_EnableIRQ>

}
 800706c:	46c0      	nop			; (mov r8, r8)
 800706e:	46bd      	mov	sp, r7
 8007070:	b00b      	add	sp, #44	; 0x2c
 8007072:	bd90      	pop	{r4, r7, pc}
 8007074:	40021000 	.word	0x40021000
 8007078:	48000800 	.word	0x48000800
 800707c:	48000400 	.word	0x48000400
 8007080:	0000e7d0 	.word	0x0000e7d0
 8007084:	48001400 	.word	0x48001400
 8007088:	00001027 	.word	0x00001027
 800708c:	00000808 	.word	0x00000808
 8007090:	10210000 	.word	0x10210000
 8007094:	000087e3 	.word	0x000087e3
 8007098:	0000033f 	.word	0x0000033f
 800709c:	48000c00 	.word	0x48000c00

080070a0 <LED_Quick_Flash>:
/*
 * @brief Flashes all the LEDs 3 times at a rate of 400ms
 *
 */
void LED_Quick_Flash()
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
	for(int i=0;i<3;i++)
 80070a6:	2300      	movs	r3, #0
 80070a8:	607b      	str	r3, [r7, #4]
 80070aa:	e024      	b.n	80070f6 <LED_Quick_Flash+0x56>
	{
		status_led_control(ERROR_LED, ON);
 80070ac:	2101      	movs	r1, #1
 80070ae:	2003      	movs	r0, #3
 80070b0:	f000 f8ba 	bl	8007228 <status_led_control>
		status_led_control(I2C_BUS_STATUS_LED, ON);
 80070b4:	2101      	movs	r1, #1
 80070b6:	2001      	movs	r0, #1
 80070b8:	f000 f8b6 	bl	8007228 <status_led_control>
		status_led_control(USB_STATUS_LED, ON);
 80070bc:	2101      	movs	r1, #1
 80070be:	2002      	movs	r0, #2
 80070c0:	f000 f8b2 	bl	8007228 <status_led_control>

		HAL_Delay(400);
 80070c4:	23c8      	movs	r3, #200	; 0xc8
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	0018      	movs	r0, r3
 80070ca:	f7f9 f8ef 	bl	80002ac <HAL_Delay>

		status_led_control(ERROR_LED, OFF);
 80070ce:	2100      	movs	r1, #0
 80070d0:	2003      	movs	r0, #3
 80070d2:	f000 f8a9 	bl	8007228 <status_led_control>
		status_led_control(I2C_BUS_STATUS_LED, OFF);
 80070d6:	2100      	movs	r1, #0
 80070d8:	2001      	movs	r0, #1
 80070da:	f000 f8a5 	bl	8007228 <status_led_control>
		status_led_control(USB_STATUS_LED, OFF);
 80070de:	2100      	movs	r1, #0
 80070e0:	2002      	movs	r0, #2
 80070e2:	f000 f8a1 	bl	8007228 <status_led_control>

		HAL_Delay(400);
 80070e6:	23c8      	movs	r3, #200	; 0xc8
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	0018      	movs	r0, r3
 80070ec:	f7f9 f8de 	bl	80002ac <HAL_Delay>
	for(int i=0;i<3;i++)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3301      	adds	r3, #1
 80070f4:	607b      	str	r3, [r7, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	ddd7      	ble.n	80070ac <LED_Quick_Flash+0xc>
	}
}
 80070fc:	46c0      	nop			; (mov r8, r8)
 80070fe:	46bd      	mov	sp, r7
 8007100:	b002      	add	sp, #8
 8007102:	bd80      	pop	{r7, pc}

08007104 <I2C_Peripherals_available>:
 * @brief Checks that the I/O Expanders are up and reachable
 * 		  If the I/O Expanders are ready and listening
 * 		  the function turns on the I2C_BUS_STATUS_LED
 */
int I2C_Peripherals_available()
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1,EXP_INPUTS_ADDR,10,1000) == HAL_OK \
 8007108:	23fa      	movs	r3, #250	; 0xfa
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	480b      	ldr	r0, [pc, #44]	; (800713c <I2C_Peripherals_available+0x38>)
 800710e:	220a      	movs	r2, #10
 8007110:	2140      	movs	r1, #64	; 0x40
 8007112:	f7f9 fe37 	bl	8000d84 <HAL_I2C_IsDeviceReady>
 8007116:	1e03      	subs	r3, r0, #0
 8007118:	d10c      	bne.n	8007134 <I2C_Peripherals_available+0x30>
			&& HAL_I2C_IsDeviceReady(&hi2c1,EXP_OUTPUTS_ADDR,10,1000) == HAL_OK)
 800711a:	23fa      	movs	r3, #250	; 0xfa
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4807      	ldr	r0, [pc, #28]	; (800713c <I2C_Peripherals_available+0x38>)
 8007120:	220a      	movs	r2, #10
 8007122:	2142      	movs	r1, #66	; 0x42
 8007124:	f7f9 fe2e 	bl	8000d84 <HAL_I2C_IsDeviceReady>
 8007128:	1e03      	subs	r3, r0, #0
 800712a:	d103      	bne.n	8007134 <I2C_Peripherals_available+0x30>
	{
		status_led_control(I2C_BUS_STATUS_LED, ON);
 800712c:	2101      	movs	r1, #1
 800712e:	2001      	movs	r0, #1
 8007130:	f000 f87a 	bl	8007228 <status_led_control>

		//FOR DEBUG PURPOSES
		//HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
	}

	return 0;
 8007134:	2300      	movs	r3, #0
}
 8007136:	0018      	movs	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	200003d0 	.word	0x200003d0

08007140 <flush_data_buffer>:
/*
 * @brief Clears the data (buffer) received from the USB
 * 		  Usually called after a successful reception
 */
void flush_data_buffer()
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
	for(int j=0;j<BUF_LENGTH;j++)
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	e007      	b.n	800715c <flush_data_buffer+0x1c>
	{
		data_buffer[j] = 0x00;
 800714c:	4a07      	ldr	r2, [pc, #28]	; (800716c <flush_data_buffer+0x2c>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	18d3      	adds	r3, r2, r3
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<BUF_LENGTH;j++)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3301      	adds	r3, #1
 800715a:	607b      	str	r3, [r7, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b03      	cmp	r3, #3
 8007160:	ddf4      	ble.n	800714c <flush_data_buffer+0xc>
	}
}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	46bd      	mov	sp, r7
 8007166:	b002      	add	sp, #8
 8007168:	bd80      	pop	{r7, pc}
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	20000560 	.word	0x20000560

08007170 <enable_interrupt_handlers>:

/*
 * @brief Enable the interrupt handlers
 */
void enable_interrupt_handlers()
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 8007174:	2200      	movs	r2, #0
 8007176:	2102      	movs	r1, #2
 8007178:	2006      	movs	r0, #6
 800717a:	f7f9 f95d 	bl	8000438 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800717e:	2006      	movs	r0, #6
 8007180:	f7f9 f96f 	bl	8000462 <HAL_NVIC_EnableIRQ>
}
 8007184:	46c0      	nop			; (mov r8, r8)
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <HAL_GPIO_EXTI_Callback>:
 * 		  to notify that there's been an update on the Dev Board
 *
 * @param GPIO_Pin : The source (External GPIO pin) of the Interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	0002      	movs	r2, r0
 8007194:	1dbb      	adds	r3, r7, #6
 8007196:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == INT_1_Pin)
 8007198:	1dbb      	adds	r3, r7, #6
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	2b08      	cmp	r3, #8
 800719e:	d102      	bne.n	80071a6 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		transmit_inputs = 1;
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <HAL_GPIO_EXTI_Callback+0x24>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]

    /* Toggle LED3 */
	/* Debug Purposes*/
	//HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);

}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b002      	add	sp, #8
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	20000420 	.word	0x20000420

080071b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	// Create a 1msec pulse
	if(htim->Instance == TIM6)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a13      	ldr	r2, [pc, #76]	; (8007210 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d10b      	bne.n	80071de <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		HAL_TIM_Base_Stop(&htim6);
 80071c6:	4b13      	ldr	r3, [pc, #76]	; (8007214 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80071c8:	0018      	movs	r0, r3
 80071ca:	f7fd f8ef 	bl	80043ac <HAL_TIM_Base_Stop>
		HAL_GPIO_WritePin(GEN_GPIO_Port, GEN_Pin, GPIO_PIN_RESET);
 80071ce:	2390      	movs	r3, #144	; 0x90
 80071d0:	05db      	lsls	r3, r3, #23
 80071d2:	2200      	movs	r2, #0
 80071d4:	2110      	movs	r1, #16
 80071d6:	0018      	movs	r0, r3
 80071d8:	f7f9 fadc 	bl	8000794 <HAL_GPIO_WritePin>
	else if(htim->Instance == TIM14)
	{
		is_USB_Connected = 0;
		status_led_control(USB_STATUS_LED, OFF);
	}
}
 80071dc:	e014      	b.n	8007208 <HAL_TIM_PeriodElapsedCallback+0x54>
	else if(htim->Instance == TIM7)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a0d      	ldr	r2, [pc, #52]	; (8007218 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d103      	bne.n	80071f0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		transmit_inputs = 1;
 80071e8:	4b0c      	ldr	r3, [pc, #48]	; (800721c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80071ea:	2201      	movs	r2, #1
 80071ec:	701a      	strb	r2, [r3, #0]
}
 80071ee:	e00b      	b.n	8007208 <HAL_TIM_PeriodElapsedCallback+0x54>
	else if(htim->Instance == TIM14)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a0a      	ldr	r2, [pc, #40]	; (8007220 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d106      	bne.n	8007208 <HAL_TIM_PeriodElapsedCallback+0x54>
		is_USB_Connected = 0;
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	701a      	strb	r2, [r3, #0]
		status_led_control(USB_STATUS_LED, OFF);
 8007200:	2100      	movs	r1, #0
 8007202:	2002      	movs	r0, #2
 8007204:	f000 f810 	bl	8007228 <status_led_control>
}
 8007208:	46c0      	nop			; (mov r8, r8)
 800720a:	46bd      	mov	sp, r7
 800720c:	b002      	add	sp, #8
 800720e:	bd80      	pop	{r7, pc}
 8007210:	40001000 	.word	0x40001000
 8007214:	20000424 	.word	0x20000424
 8007218:	40001400 	.word	0x40001400
 800721c:	20000420 	.word	0x20000420
 8007220:	40002000 	.word	0x40002000
 8007224:	2000046c 	.word	0x2000046c

08007228 <status_led_control>:
 * @param  The state to be switched which
 * 		   can be either ON or OFF
 * @retval None
 */
void status_led_control(int led, int state)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
	 * activates the N-MOS (and current is flowing to ground)
	 * whereas a "1" in the Output register leaves the port
	 * in Hi-Z mode. So to activate the LED's we need to set
	 * a "0" (GPIO_PIN_RESET) on the Output register
	 */
	if(led == ERROR_LED)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b03      	cmp	r3, #3
 8007236:	d113      	bne.n	8007260 <status_led_control+0x38>
	{
		if(state == ON)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d106      	bne.n	800724c <status_led_control+0x24>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800723e:	4b21      	ldr	r3, [pc, #132]	; (80072c4 <status_led_control+0x9c>)
 8007240:	2200      	movs	r2, #0
 8007242:	2101      	movs	r1, #1
 8007244:	0018      	movs	r0, r3
 8007246:	f7f9 faa5 	bl	8000794 <HAL_GPIO_WritePin>

			/* Debug purposes */
			//HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
		}
	}
}
 800724a:	e036      	b.n	80072ba <status_led_control+0x92>
		else if(state == OFF)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d133      	bne.n	80072ba <status_led_control+0x92>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007252:	4b1c      	ldr	r3, [pc, #112]	; (80072c4 <status_led_control+0x9c>)
 8007254:	2201      	movs	r2, #1
 8007256:	2101      	movs	r1, #1
 8007258:	0018      	movs	r0, r3
 800725a:	f7f9 fa9b 	bl	8000794 <HAL_GPIO_WritePin>
}
 800725e:	e02c      	b.n	80072ba <status_led_control+0x92>
	else if(led == I2C_BUS_STATUS_LED)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d113      	bne.n	800728e <status_led_control+0x66>
		if(state == ON)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d106      	bne.n	800727a <status_led_control+0x52>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800726c:	4b15      	ldr	r3, [pc, #84]	; (80072c4 <status_led_control+0x9c>)
 800726e:	2200      	movs	r2, #0
 8007270:	2102      	movs	r1, #2
 8007272:	0018      	movs	r0, r3
 8007274:	f7f9 fa8e 	bl	8000794 <HAL_GPIO_WritePin>
}
 8007278:	e01f      	b.n	80072ba <status_led_control+0x92>
		else if(state == OFF)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11c      	bne.n	80072ba <status_led_control+0x92>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8007280:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <status_led_control+0x9c>)
 8007282:	2201      	movs	r2, #1
 8007284:	2102      	movs	r1, #2
 8007286:	0018      	movs	r0, r3
 8007288:	f7f9 fa84 	bl	8000794 <HAL_GPIO_WritePin>
}
 800728c:	e015      	b.n	80072ba <status_led_control+0x92>
	else if(led == USB_STATUS_LED)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d112      	bne.n	80072ba <status_led_control+0x92>
		if(state == ON)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d106      	bne.n	80072a8 <status_led_control+0x80>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800729a:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <status_led_control+0x9c>)
 800729c:	2200      	movs	r2, #0
 800729e:	2104      	movs	r1, #4
 80072a0:	0018      	movs	r0, r3
 80072a2:	f7f9 fa77 	bl	8000794 <HAL_GPIO_WritePin>
}
 80072a6:	e008      	b.n	80072ba <status_led_control+0x92>
		else if(state == OFF)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d105      	bne.n	80072ba <status_led_control+0x92>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80072ae:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <status_led_control+0x9c>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	2104      	movs	r1, #4
 80072b4:	0018      	movs	r0, r3
 80072b6:	f7f9 fa6d 	bl	8000794 <HAL_GPIO_WritePin>
}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	46bd      	mov	sp, r7
 80072be:	b002      	add	sp, #8
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	48000800 	.word	0x48000800

080072c8 <Reset_Expanders>:
/*
 * @brief Pull down the external RESET line
 * of the I/O expanders
 */
void Reset_Expanders()
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERST_1_GPIO_Port, ERST_1_Pin, GPIO_PIN_RESET);
 80072cc:	4b10      	ldr	r3, [pc, #64]	; (8007310 <Reset_Expanders+0x48>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	2120      	movs	r1, #32
 80072d2:	0018      	movs	r0, r3
 80072d4:	f7f9 fa5e 	bl	8000794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ERST_2_GPIO_Port, ERST_2_Pin, GPIO_PIN_RESET);
 80072d8:	2380      	movs	r3, #128	; 0x80
 80072da:	015b      	lsls	r3, r3, #5
 80072dc:	480c      	ldr	r0, [pc, #48]	; (8007310 <Reset_Expanders+0x48>)
 80072de:	2200      	movs	r2, #0
 80072e0:	0019      	movs	r1, r3
 80072e2:	f7f9 fa57 	bl	8000794 <HAL_GPIO_WritePin>
	 *  Expander Reset signal is connected to HIGH through a high-value
	 *  pull-up resistor (100kOhm) so the reset signal is slow
	 *  We handle the slow signal by adding a small delay to ensure
	 *  the expanders are actually Reset
	 */
	HAL_Delay(1000);
 80072e6:	23fa      	movs	r3, #250	; 0xfa
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	0018      	movs	r0, r3
 80072ec:	f7f8 ffde 	bl	80002ac <HAL_Delay>

	HAL_GPIO_WritePin(ERST_1_GPIO_Port, ERST_1_Pin, GPIO_PIN_SET);
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <Reset_Expanders+0x48>)
 80072f2:	2201      	movs	r2, #1
 80072f4:	2120      	movs	r1, #32
 80072f6:	0018      	movs	r0, r3
 80072f8:	f7f9 fa4c 	bl	8000794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ERST_2_GPIO_Port, ERST_2_Pin, GPIO_PIN_SET);
 80072fc:	2380      	movs	r3, #128	; 0x80
 80072fe:	015b      	lsls	r3, r3, #5
 8007300:	4803      	ldr	r0, [pc, #12]	; (8007310 <Reset_Expanders+0x48>)
 8007302:	2201      	movs	r2, #1
 8007304:	0019      	movs	r1, r3
 8007306:	f7f9 fa45 	bl	8000794 <HAL_GPIO_WritePin>
}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	48000800 	.word	0x48000800

08007314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	status_led_control(ERROR_LED, ON);
 8007318:	2101      	movs	r1, #1
 800731a:	2003      	movs	r0, #3
 800731c:	f7ff ff84 	bl	8007228 <status_led_control>
  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
  /* USER CODE END Error_Handler_Debug */
}
 8007320:	46c0      	nop			; (mov r8, r8)
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800732e:	4b0f      	ldr	r3, [pc, #60]	; (800736c <HAL_MspInit+0x44>)
 8007330:	699a      	ldr	r2, [r3, #24]
 8007332:	4b0e      	ldr	r3, [pc, #56]	; (800736c <HAL_MspInit+0x44>)
 8007334:	2101      	movs	r1, #1
 8007336:	430a      	orrs	r2, r1
 8007338:	619a      	str	r2, [r3, #24]
 800733a:	4b0c      	ldr	r3, [pc, #48]	; (800736c <HAL_MspInit+0x44>)
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	2201      	movs	r2, #1
 8007340:	4013      	ands	r3, r2
 8007342:	607b      	str	r3, [r7, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <HAL_MspInit+0x44>)
 8007348:	69da      	ldr	r2, [r3, #28]
 800734a:	4b08      	ldr	r3, [pc, #32]	; (800736c <HAL_MspInit+0x44>)
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	0549      	lsls	r1, r1, #21
 8007350:	430a      	orrs	r2, r1
 8007352:	61da      	str	r2, [r3, #28]
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <HAL_MspInit+0x44>)
 8007356:	69da      	ldr	r2, [r3, #28]
 8007358:	2380      	movs	r3, #128	; 0x80
 800735a:	055b      	lsls	r3, r3, #21
 800735c:	4013      	ands	r3, r2
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007362:	46c0      	nop			; (mov r8, r8)
 8007364:	46bd      	mov	sp, r7
 8007366:	b002      	add	sp, #8
 8007368:	bd80      	pop	{r7, pc}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	40021000 	.word	0x40021000

08007370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	; 0x28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007378:	2314      	movs	r3, #20
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	0018      	movs	r0, r3
 800737e:	2314      	movs	r3, #20
 8007380:	001a      	movs	r2, r3
 8007382:	2100      	movs	r1, #0
 8007384:	f000 ff8d 	bl	80082a2 <memset>
  if(hi2c->Instance==I2C1)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a1c      	ldr	r2, [pc, #112]	; (8007400 <HAL_I2C_MspInit+0x90>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d131      	bne.n	80073f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <HAL_I2C_MspInit+0x94>)
 8007394:	695a      	ldr	r2, [r3, #20]
 8007396:	4b1b      	ldr	r3, [pc, #108]	; (8007404 <HAL_I2C_MspInit+0x94>)
 8007398:	2180      	movs	r1, #128	; 0x80
 800739a:	02c9      	lsls	r1, r1, #11
 800739c:	430a      	orrs	r2, r1
 800739e:	615a      	str	r2, [r3, #20]
 80073a0:	4b18      	ldr	r3, [pc, #96]	; (8007404 <HAL_I2C_MspInit+0x94>)
 80073a2:	695a      	ldr	r2, [r3, #20]
 80073a4:	2380      	movs	r3, #128	; 0x80
 80073a6:	02db      	lsls	r3, r3, #11
 80073a8:	4013      	ands	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073ae:	2114      	movs	r1, #20
 80073b0:	187b      	adds	r3, r7, r1
 80073b2:	22c0      	movs	r2, #192	; 0xc0
 80073b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073b6:	187b      	adds	r3, r7, r1
 80073b8:	2212      	movs	r2, #18
 80073ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073bc:	187b      	adds	r3, r7, r1
 80073be:	2201      	movs	r2, #1
 80073c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80073c2:	187b      	adds	r3, r7, r1
 80073c4:	2203      	movs	r2, #3
 80073c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80073c8:	187b      	adds	r3, r7, r1
 80073ca:	2201      	movs	r2, #1
 80073cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073ce:	187b      	adds	r3, r7, r1
 80073d0:	4a0d      	ldr	r2, [pc, #52]	; (8007408 <HAL_I2C_MspInit+0x98>)
 80073d2:	0019      	movs	r1, r3
 80073d4:	0010      	movs	r0, r2
 80073d6:	f7f9 f861 	bl	800049c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80073da:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <HAL_I2C_MspInit+0x94>)
 80073dc:	69da      	ldr	r2, [r3, #28]
 80073de:	4b09      	ldr	r3, [pc, #36]	; (8007404 <HAL_I2C_MspInit+0x94>)
 80073e0:	2180      	movs	r1, #128	; 0x80
 80073e2:	0389      	lsls	r1, r1, #14
 80073e4:	430a      	orrs	r2, r1
 80073e6:	61da      	str	r2, [r3, #28]
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <HAL_I2C_MspInit+0x94>)
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	039b      	lsls	r3, r3, #14
 80073f0:	4013      	ands	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b00a      	add	sp, #40	; 0x28
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	40005400 	.word	0x40005400
 8007404:	40021000 	.word	0x40021000
 8007408:	48000400 	.word	0x48000400

0800740c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a28      	ldr	r2, [pc, #160]	; (80074bc <HAL_TIM_Base_MspInit+0xb0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d114      	bne.n	8007448 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800741e:	4b28      	ldr	r3, [pc, #160]	; (80074c0 <HAL_TIM_Base_MspInit+0xb4>)
 8007420:	69da      	ldr	r2, [r3, #28]
 8007422:	4b27      	ldr	r3, [pc, #156]	; (80074c0 <HAL_TIM_Base_MspInit+0xb4>)
 8007424:	2110      	movs	r1, #16
 8007426:	430a      	orrs	r2, r1
 8007428:	61da      	str	r2, [r3, #28]
 800742a:	4b25      	ldr	r3, [pc, #148]	; (80074c0 <HAL_TIM_Base_MspInit+0xb4>)
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	2210      	movs	r2, #16
 8007430:	4013      	ands	r3, r2
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007436:	2200      	movs	r2, #0
 8007438:	2100      	movs	r1, #0
 800743a:	2011      	movs	r0, #17
 800743c:	f7f8 fffc 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007440:	2011      	movs	r0, #17
 8007442:	f7f9 f80e 	bl	8000462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8007446:	e034      	b.n	80074b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1d      	ldr	r2, [pc, #116]	; (80074c4 <HAL_TIM_Base_MspInit+0xb8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d114      	bne.n	800747c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007452:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <HAL_TIM_Base_MspInit+0xb4>)
 8007454:	69da      	ldr	r2, [r3, #28]
 8007456:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <HAL_TIM_Base_MspInit+0xb4>)
 8007458:	2120      	movs	r1, #32
 800745a:	430a      	orrs	r2, r1
 800745c:	61da      	str	r2, [r3, #28]
 800745e:	4b18      	ldr	r3, [pc, #96]	; (80074c0 <HAL_TIM_Base_MspInit+0xb4>)
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	2220      	movs	r2, #32
 8007464:	4013      	ands	r3, r2
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800746a:	2200      	movs	r2, #0
 800746c:	2100      	movs	r1, #0
 800746e:	2012      	movs	r0, #18
 8007470:	f7f8 ffe2 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007474:	2012      	movs	r0, #18
 8007476:	f7f8 fff4 	bl	8000462 <HAL_NVIC_EnableIRQ>
}
 800747a:	e01a      	b.n	80074b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a11      	ldr	r2, [pc, #68]	; (80074c8 <HAL_TIM_Base_MspInit+0xbc>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d115      	bne.n	80074b2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007486:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <HAL_TIM_Base_MspInit+0xb4>)
 8007488:	69da      	ldr	r2, [r3, #28]
 800748a:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <HAL_TIM_Base_MspInit+0xb4>)
 800748c:	2180      	movs	r1, #128	; 0x80
 800748e:	0049      	lsls	r1, r1, #1
 8007490:	430a      	orrs	r2, r1
 8007492:	61da      	str	r2, [r3, #28]
 8007494:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <HAL_TIM_Base_MspInit+0xb4>)
 8007496:	69da      	ldr	r2, [r3, #28]
 8007498:	2380      	movs	r3, #128	; 0x80
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	4013      	ands	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80074a2:	2200      	movs	r2, #0
 80074a4:	2100      	movs	r1, #0
 80074a6:	2013      	movs	r0, #19
 80074a8:	f7f8 ffc6 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80074ac:	2013      	movs	r0, #19
 80074ae:	f7f8 ffd8 	bl	8000462 <HAL_NVIC_EnableIRQ>
}
 80074b2:	46c0      	nop			; (mov r8, r8)
 80074b4:	46bd      	mov	sp, r7
 80074b6:	b006      	add	sp, #24
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	40001000 	.word	0x40001000
 80074c0:	40021000 	.word	0x40021000
 80074c4:	40001400 	.word	0x40001400
 80074c8:	40002000 	.word	0x40002000

080074cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	; 0x28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074d4:	2314      	movs	r3, #20
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	0018      	movs	r0, r3
 80074da:	2314      	movs	r3, #20
 80074dc:	001a      	movs	r2, r3
 80074de:	2100      	movs	r1, #0
 80074e0:	f000 fedf 	bl	80082a2 <memset>
  if(huart->Instance==USART2)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1c      	ldr	r2, [pc, #112]	; (800755c <HAL_UART_MspInit+0x90>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d132      	bne.n	8007554 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80074ee:	4b1c      	ldr	r3, [pc, #112]	; (8007560 <HAL_UART_MspInit+0x94>)
 80074f0:	69da      	ldr	r2, [r3, #28]
 80074f2:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <HAL_UART_MspInit+0x94>)
 80074f4:	2180      	movs	r1, #128	; 0x80
 80074f6:	0289      	lsls	r1, r1, #10
 80074f8:	430a      	orrs	r2, r1
 80074fa:	61da      	str	r2, [r3, #28]
 80074fc:	4b18      	ldr	r3, [pc, #96]	; (8007560 <HAL_UART_MspInit+0x94>)
 80074fe:	69da      	ldr	r2, [r3, #28]
 8007500:	2380      	movs	r3, #128	; 0x80
 8007502:	029b      	lsls	r3, r3, #10
 8007504:	4013      	ands	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800750a:	4b15      	ldr	r3, [pc, #84]	; (8007560 <HAL_UART_MspInit+0x94>)
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	4b14      	ldr	r3, [pc, #80]	; (8007560 <HAL_UART_MspInit+0x94>)
 8007510:	2180      	movs	r1, #128	; 0x80
 8007512:	0289      	lsls	r1, r1, #10
 8007514:	430a      	orrs	r2, r1
 8007516:	615a      	str	r2, [r3, #20]
 8007518:	4b11      	ldr	r3, [pc, #68]	; (8007560 <HAL_UART_MspInit+0x94>)
 800751a:	695a      	ldr	r2, [r3, #20]
 800751c:	2380      	movs	r3, #128	; 0x80
 800751e:	029b      	lsls	r3, r3, #10
 8007520:	4013      	ands	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007526:	2114      	movs	r1, #20
 8007528:	187b      	adds	r3, r7, r1
 800752a:	220c      	movs	r2, #12
 800752c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800752e:	187b      	adds	r3, r7, r1
 8007530:	2202      	movs	r2, #2
 8007532:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007534:	187b      	adds	r3, r7, r1
 8007536:	2200      	movs	r2, #0
 8007538:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800753a:	187b      	adds	r3, r7, r1
 800753c:	2203      	movs	r2, #3
 800753e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007540:	187b      	adds	r3, r7, r1
 8007542:	2201      	movs	r2, #1
 8007544:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007546:	187a      	adds	r2, r7, r1
 8007548:	2390      	movs	r3, #144	; 0x90
 800754a:	05db      	lsls	r3, r3, #23
 800754c:	0011      	movs	r1, r2
 800754e:	0018      	movs	r0, r3
 8007550:	f7f8 ffa4 	bl	800049c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007554:	46c0      	nop			; (mov r8, r8)
 8007556:	46bd      	mov	sp, r7
 8007558:	b00a      	add	sp, #40	; 0x28
 800755a:	bd80      	pop	{r7, pc}
 800755c:	40004400 	.word	0x40004400
 8007560:	40021000 	.word	0x40021000

08007564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007568:	46c0      	nop			; (mov r8, r8)
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007572:	e7fe      	b.n	8007572 <HardFault_Handler+0x4>

08007574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007578:	46c0      	nop			; (mov r8, r8)
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800758c:	f7f8 fe78 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007590:	46c0      	nop			; (mov r8, r8)
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800759a:	2008      	movs	r0, #8
 800759c:	f7f9 f918 	bl	80007d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80075a0:	46c0      	nop			; (mov r8, r8)
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80075aa:	2380      	movs	r3, #128	; 0x80
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	0018      	movs	r0, r3
 80075b0:	f7f9 f90e 	bl	80007d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80075b4:	46c0      	nop			; (mov r8, r8)
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80075c0:	4b03      	ldr	r3, [pc, #12]	; (80075d0 <TIM6_DAC_IRQHandler+0x14>)
 80075c2:	0018      	movs	r0, r3
 80075c4:	f7fc ff35 	bl	8004432 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80075c8:	46c0      	nop			; (mov r8, r8)
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	20000424 	.word	0x20000424

080075d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80075d8:	4b03      	ldr	r3, [pc, #12]	; (80075e8 <TIM7_IRQHandler+0x14>)
 80075da:	0018      	movs	r0, r3
 80075dc:	f7fc ff29 	bl	8004432 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80075e0:	46c0      	nop			; (mov r8, r8)
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	20000520 	.word	0x20000520

080075ec <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80075f0:	4b03      	ldr	r3, [pc, #12]	; (8007600 <TIM14_IRQHandler+0x14>)
 80075f2:	0018      	movs	r0, r3
 80075f4:	f7fc ff1d 	bl	8004432 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80075f8:	46c0      	nop			; (mov r8, r8)
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	200004e0 	.word	0x200004e0

08007604 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007608:	4b03      	ldr	r3, [pc, #12]	; (8007618 <USB_IRQHandler+0x14>)
 800760a:	0018      	movs	r0, r3
 800760c:	f7fa f80c 	bl	8001628 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8007610:	46c0      	nop			; (mov r8, r8)
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	20000f58 	.word	0x20000f58

0800761c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8007620:	4b1a      	ldr	r3, [pc, #104]	; (800768c <SystemInit+0x70>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4b19      	ldr	r3, [pc, #100]	; (800768c <SystemInit+0x70>)
 8007626:	2101      	movs	r1, #1
 8007628:	430a      	orrs	r2, r1
 800762a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800762c:	4b17      	ldr	r3, [pc, #92]	; (800768c <SystemInit+0x70>)
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	4b16      	ldr	r3, [pc, #88]	; (800768c <SystemInit+0x70>)
 8007632:	4917      	ldr	r1, [pc, #92]	; (8007690 <SystemInit+0x74>)
 8007634:	400a      	ands	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8007638:	4b14      	ldr	r3, [pc, #80]	; (800768c <SystemInit+0x70>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	4b13      	ldr	r3, [pc, #76]	; (800768c <SystemInit+0x70>)
 800763e:	4915      	ldr	r1, [pc, #84]	; (8007694 <SystemInit+0x78>)
 8007640:	400a      	ands	r2, r1
 8007642:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8007644:	4b11      	ldr	r3, [pc, #68]	; (800768c <SystemInit+0x70>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	4b10      	ldr	r3, [pc, #64]	; (800768c <SystemInit+0x70>)
 800764a:	4913      	ldr	r1, [pc, #76]	; (8007698 <SystemInit+0x7c>)
 800764c:	400a      	ands	r2, r1
 800764e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8007650:	4b0e      	ldr	r3, [pc, #56]	; (800768c <SystemInit+0x70>)
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	4b0d      	ldr	r3, [pc, #52]	; (800768c <SystemInit+0x70>)
 8007656:	4911      	ldr	r1, [pc, #68]	; (800769c <SystemInit+0x80>)
 8007658:	400a      	ands	r2, r1
 800765a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800765c:	4b0b      	ldr	r3, [pc, #44]	; (800768c <SystemInit+0x70>)
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <SystemInit+0x70>)
 8007662:	210f      	movs	r1, #15
 8007664:	438a      	bics	r2, r1
 8007666:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8007668:	4b08      	ldr	r3, [pc, #32]	; (800768c <SystemInit+0x70>)
 800766a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800766c:	4b07      	ldr	r3, [pc, #28]	; (800768c <SystemInit+0x70>)
 800766e:	490c      	ldr	r1, [pc, #48]	; (80076a0 <SystemInit+0x84>)
 8007670:	400a      	ands	r2, r1
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <SystemInit+0x70>)
 8007676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007678:	4b04      	ldr	r3, [pc, #16]	; (800768c <SystemInit+0x70>)
 800767a:	2101      	movs	r1, #1
 800767c:	438a      	bics	r2, r1
 800767e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8007680:	4b02      	ldr	r3, [pc, #8]	; (800768c <SystemInit+0x70>)
 8007682:	2200      	movs	r2, #0
 8007684:	609a      	str	r2, [r3, #8]

}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40021000 	.word	0x40021000
 8007690:	08ffb80c 	.word	0x08ffb80c
 8007694:	fef6ffff 	.word	0xfef6ffff
 8007698:	fffbffff 	.word	0xfffbffff
 800769c:	ffc0ffff 	.word	0xffc0ffff
 80076a0:	fffcfe2c 	.word	0xfffcfe2c

080076a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076a8:	4914      	ldr	r1, [pc, #80]	; (80076fc <MX_USB_DEVICE_Init+0x58>)
 80076aa:	4b15      	ldr	r3, [pc, #84]	; (8007700 <MX_USB_DEVICE_Init+0x5c>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	0018      	movs	r0, r3
 80076b0:	f7fd feb7 	bl	8005422 <USBD_Init>
 80076b4:	1e03      	subs	r3, r0, #0
 80076b6:	d001      	beq.n	80076bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80076b8:	f7ff fe2c 	bl	8007314 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076bc:	4a11      	ldr	r2, [pc, #68]	; (8007704 <MX_USB_DEVICE_Init+0x60>)
 80076be:	4b10      	ldr	r3, [pc, #64]	; (8007700 <MX_USB_DEVICE_Init+0x5c>)
 80076c0:	0011      	movs	r1, r2
 80076c2:	0018      	movs	r0, r3
 80076c4:	f7fd fede 	bl	8005484 <USBD_RegisterClass>
 80076c8:	1e03      	subs	r3, r0, #0
 80076ca:	d001      	beq.n	80076d0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80076cc:	f7ff fe22 	bl	8007314 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076d0:	4a0d      	ldr	r2, [pc, #52]	; (8007708 <MX_USB_DEVICE_Init+0x64>)
 80076d2:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <MX_USB_DEVICE_Init+0x5c>)
 80076d4:	0011      	movs	r1, r2
 80076d6:	0018      	movs	r0, r3
 80076d8:	f7fd fdf8 	bl	80052cc <USBD_CDC_RegisterInterface>
 80076dc:	1e03      	subs	r3, r0, #0
 80076de:	d001      	beq.n	80076e4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80076e0:	f7ff fe18 	bl	8007314 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076e4:	4b06      	ldr	r3, [pc, #24]	; (8007700 <MX_USB_DEVICE_Init+0x5c>)
 80076e6:	0018      	movs	r0, r3
 80076e8:	f7fd feed 	bl	80054c6 <USBD_Start>
 80076ec:	1e03      	subs	r3, r0, #0
 80076ee:	d001      	beq.n	80076f4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80076f0:	f7ff fe10 	bl	8007314 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076f4:	46c0      	nop			; (mov r8, r8)
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	20000138 	.word	0x20000138
 8007700:	20000564 	.word	0x20000564
 8007704:	2000000c 	.word	0x2000000c
 8007708:	20000128 	.word	0x20000128

0800770c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007710:	4907      	ldr	r1, [pc, #28]	; (8007730 <CDC_Init_FS+0x24>)
 8007712:	4b08      	ldr	r3, [pc, #32]	; (8007734 <CDC_Init_FS+0x28>)
 8007714:	2200      	movs	r2, #0
 8007716:	0018      	movs	r0, r3
 8007718:	f7fd fdf4 	bl	8005304 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800771c:	4a06      	ldr	r2, [pc, #24]	; (8007738 <CDC_Init_FS+0x2c>)
 800771e:	4b05      	ldr	r3, [pc, #20]	; (8007734 <CDC_Init_FS+0x28>)
 8007720:	0011      	movs	r1, r2
 8007722:	0018      	movs	r0, r3
 8007724:	f7fd fe0a 	bl	800533c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007728:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800772a:	0018      	movs	r0, r3
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000b70 	.word	0x20000b70
 8007734:	20000564 	.word	0x20000564
 8007738:	20000788 	.word	0x20000788

0800773c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007740:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007742:	0018      	movs	r0, r3
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6039      	str	r1, [r7, #0]
 8007750:	0011      	movs	r1, r2
 8007752:	1dfb      	adds	r3, r7, #7
 8007754:	1c02      	adds	r2, r0, #0
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	1c0a      	adds	r2, r1, #0
 800775c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800775e:	1dfb      	adds	r3, r7, #7
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b23      	cmp	r3, #35	; 0x23
 8007764:	d850      	bhi.n	8007808 <CDC_Control_FS+0xc0>
 8007766:	009a      	lsls	r2, r3, #2
 8007768:	4b2a      	ldr	r3, [pc, #168]	; (8007814 <CDC_Control_FS+0xcc>)
 800776a:	18d3      	adds	r3, r2, r3
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	469f      	mov	pc, r3
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:

    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	001a      	movs	r2, r3
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	431a      	orrs	r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	3302      	adds	r3, #2
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	041b      	lsls	r3, r3, #16
 8007788:	431a      	orrs	r2, r3
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	3303      	adds	r3, #3
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	061b      	lsls	r3, r3, #24
 8007792:	4313      	orrs	r3, r2
 8007794:	001a      	movs	r2, r3
 8007796:	4b20      	ldr	r3, [pc, #128]	; (8007818 <CDC_Control_FS+0xd0>)
 8007798:	601a      	str	r2, [r3, #0]
    	LineCoding.format     = pbuf[4];
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	791a      	ldrb	r2, [r3, #4]
 800779e:	4b1e      	ldr	r3, [pc, #120]	; (8007818 <CDC_Control_FS+0xd0>)
 80077a0:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	795a      	ldrb	r2, [r3, #5]
 80077a6:	4b1c      	ldr	r3, [pc, #112]	; (8007818 <CDC_Control_FS+0xd0>)
 80077a8:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	799a      	ldrb	r2, [r3, #6]
 80077ae:	4b1a      	ldr	r3, [pc, #104]	; (8007818 <CDC_Control_FS+0xd0>)
 80077b0:	719a      	strb	r2, [r3, #6]

    break;
 80077b2:	e02a      	b.n	800780a <CDC_Control_FS+0xc2>

    case CDC_GET_LINE_CODING:

    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80077b4:	4b18      	ldr	r3, [pc, #96]	; (8007818 <CDC_Control_FS+0xd0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80077be:	4b16      	ldr	r3, [pc, #88]	; (8007818 <CDC_Control_FS+0xd0>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	0a1a      	lsrs	r2, r3, #8
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	3301      	adds	r3, #1
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80077cc:	4b12      	ldr	r3, [pc, #72]	; (8007818 <CDC_Control_FS+0xd0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	0c1a      	lsrs	r2, r3, #16
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	3302      	adds	r3, #2
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80077da:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <CDC_Control_FS+0xd0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	0e1a      	lsrs	r2, r3, #24
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	3303      	adds	r3, #3
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <CDC_Control_FS+0xd0>)
 80077ee:	7912      	ldrb	r2, [r2, #4]
 80077f0:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	3305      	adds	r3, #5
 80077f6:	4a08      	ldr	r2, [pc, #32]	; (8007818 <CDC_Control_FS+0xd0>)
 80077f8:	7952      	ldrb	r2, [r2, #5]
 80077fa:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	3306      	adds	r3, #6
 8007800:	4a05      	ldr	r2, [pc, #20]	; (8007818 <CDC_Control_FS+0xd0>)
 8007802:	7992      	ldrb	r2, [r2, #6]
 8007804:	701a      	strb	r2, [r3, #0]

    break;
 8007806:	e000      	b.n	800780a <CDC_Control_FS+0xc2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007808:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800780a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800780c:	0018      	movs	r0, r3
 800780e:	46bd      	mov	sp, r7
 8007810:	b002      	add	sp, #8
 8007812:	bd80      	pop	{r7, pc}
 8007814:	080083ac 	.word	0x080083ac
 8007818:	20000120 	.word	0x20000120

0800781c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4b10      	ldr	r3, [pc, #64]	; (800786c <CDC_Receive_FS+0x50>)
 800782a:	0011      	movs	r1, r2
 800782c:	0018      	movs	r0, r3
 800782e:	f7fd fd85 	bl	800533c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007832:	4b0e      	ldr	r3, [pc, #56]	; (800786c <CDC_Receive_FS+0x50>)
 8007834:	0018      	movs	r0, r3
 8007836:	f7fd fdc6 	bl	80053c6 <USBD_CDC_ReceivePacket>
  data_buffer[0] = Buf[0];
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	781a      	ldrb	r2, [r3, #0]
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <CDC_Receive_FS+0x54>)
 8007840:	701a      	strb	r2, [r3, #0]
  data_buffer[1] = Buf[1];
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	785a      	ldrb	r2, [r3, #1]
 8007846:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <CDC_Receive_FS+0x54>)
 8007848:	705a      	strb	r2, [r3, #1]
  data_buffer[2] = Buf[2];
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	789a      	ldrb	r2, [r3, #2]
 800784e:	4b08      	ldr	r3, [pc, #32]	; (8007870 <CDC_Receive_FS+0x54>)
 8007850:	709a      	strb	r2, [r3, #2]
  data_buffer[3] = Buf[3];
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	78da      	ldrb	r2, [r3, #3]
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <CDC_Receive_FS+0x54>)
 8007858:	70da      	strb	r2, [r3, #3]
  data_available = 1;
 800785a:	4b06      	ldr	r3, [pc, #24]	; (8007874 <CDC_Receive_FS+0x58>)
 800785c:	2201      	movs	r2, #1
 800785e:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8007860:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007862:	0018      	movs	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	b002      	add	sp, #8
 8007868:	bd80      	pop	{r7, pc}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	20000564 	.word	0x20000564
 8007870:	20000560 	.word	0x20000560
 8007874:	20000468 	.word	0x20000468

08007878 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007878:	b5b0      	push	{r4, r5, r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	000a      	movs	r2, r1
 8007882:	1cbb      	adds	r3, r7, #2
 8007884:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8007886:	230f      	movs	r3, #15
 8007888:	18fb      	adds	r3, r7, r3
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800788e:	4a11      	ldr	r2, [pc, #68]	; (80078d4 <CDC_Transmit_FS+0x5c>)
 8007890:	2386      	movs	r3, #134	; 0x86
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	58d3      	ldr	r3, [r2, r3]
 8007896:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	2385      	movs	r3, #133	; 0x85
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	58d3      	ldr	r3, [r2, r3]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e010      	b.n	80078ca <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078a8:	1cbb      	adds	r3, r7, #2
 80078aa:	881a      	ldrh	r2, [r3, #0]
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <CDC_Transmit_FS+0x5c>)
 80078b0:	0018      	movs	r0, r3
 80078b2:	f7fd fd27 	bl	8005304 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80078b6:	250f      	movs	r5, #15
 80078b8:	197c      	adds	r4, r7, r5
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <CDC_Transmit_FS+0x5c>)
 80078bc:	0018      	movs	r0, r3
 80078be:	f7fd fd51 	bl	8005364 <USBD_CDC_TransmitPacket>
 80078c2:	0003      	movs	r3, r0
 80078c4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80078c6:	197b      	adds	r3, r7, r5
 80078c8:	781b      	ldrb	r3, [r3, #0]
}
 80078ca:	0018      	movs	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b004      	add	sp, #16
 80078d0:	bdb0      	pop	{r4, r5, r7, pc}
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	20000564 	.word	0x20000564

080078d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a0e      	ldr	r2, [pc, #56]	; (8007920 <HAL_PCD_MspInit+0x48>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d115      	bne.n	8007916 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80078ea:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <HAL_PCD_MspInit+0x4c>)
 80078ec:	69da      	ldr	r2, [r3, #28]
 80078ee:	4b0d      	ldr	r3, [pc, #52]	; (8007924 <HAL_PCD_MspInit+0x4c>)
 80078f0:	2180      	movs	r1, #128	; 0x80
 80078f2:	0409      	lsls	r1, r1, #16
 80078f4:	430a      	orrs	r2, r1
 80078f6:	61da      	str	r2, [r3, #28]
 80078f8:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <HAL_PCD_MspInit+0x4c>)
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	2380      	movs	r3, #128	; 0x80
 80078fe:	041b      	lsls	r3, r3, #16
 8007900:	4013      	ands	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007906:	2200      	movs	r2, #0
 8007908:	2100      	movs	r1, #0
 800790a:	201f      	movs	r0, #31
 800790c:	f7f8 fd94 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007910:	201f      	movs	r0, #31
 8007912:	f7f8 fda6 	bl	8000462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	46bd      	mov	sp, r7
 800791a:	b004      	add	sp, #16
 800791c:	bd80      	pop	{r7, pc}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	40005c00 	.word	0x40005c00
 8007924:	40021000 	.word	0x40021000

08007928 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	2387      	movs	r3, #135	; 0x87
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	58d2      	ldr	r2, [r2, r3]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	33ed      	adds	r3, #237	; 0xed
 800793c:	33ff      	adds	r3, #255	; 0xff
 800793e:	0019      	movs	r1, r3
 8007940:	0010      	movs	r0, r2
 8007942:	f7fd fe15 	bl	8005570 <USBD_LL_SetupStage>
}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	46bd      	mov	sp, r7
 800794a:	b002      	add	sp, #8
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794e:	b590      	push	{r4, r7, lr}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	000a      	movs	r2, r1
 8007958:	1cfb      	adds	r3, r7, #3
 800795a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	2387      	movs	r3, #135	; 0x87
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	58d4      	ldr	r4, [r2, r3]
 8007964:	1cfb      	adds	r3, r7, #3
 8007966:	781a      	ldrb	r2, [r3, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	238c      	movs	r3, #140	; 0x8c
 800796c:	0059      	lsls	r1, r3, #1
 800796e:	0013      	movs	r3, r2
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	1a9b      	subs	r3, r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	18c3      	adds	r3, r0, r3
 8007978:	185b      	adds	r3, r3, r1
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	1cfb      	adds	r3, r7, #3
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	0019      	movs	r1, r3
 8007982:	0020      	movs	r0, r4
 8007984:	f7fd fe50 	bl	8005628 <USBD_LL_DataOutStage>
}
 8007988:	46c0      	nop			; (mov r8, r8)
 800798a:	46bd      	mov	sp, r7
 800798c:	b003      	add	sp, #12
 800798e:	bd90      	pop	{r4, r7, pc}

08007990 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	000a      	movs	r2, r1
 800799a:	1cfb      	adds	r3, r7, #3
 800799c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	2387      	movs	r3, #135	; 0x87
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	58d0      	ldr	r0, [r2, r3]
 80079a6:	1cfb      	adds	r3, r7, #3
 80079a8:	781a      	ldrb	r2, [r3, #0]
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	0013      	movs	r3, r2
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	18cb      	adds	r3, r1, r3
 80079b6:	3338      	adds	r3, #56	; 0x38
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	1cfb      	adds	r3, r7, #3
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	0019      	movs	r1, r3
 80079c0:	f7fd fe9b 	bl	80056fa <USBD_LL_DataInStage>
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b002      	add	sp, #8
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	2387      	movs	r3, #135	; 0x87
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	58d3      	ldr	r3, [r2, r3]
 80079dc:	0018      	movs	r0, r3
 80079de:	f7fd ff99 	bl	8005914 <USBD_LL_SOF>
}
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	46bd      	mov	sp, r7
 80079e6:	b002      	add	sp, #8
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079f2:	230f      	movs	r3, #15
 80079f4:	18fb      	adds	r3, r7, r3
 80079f6:	2201      	movs	r2, #1
 80079f8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d001      	beq.n	8007a06 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007a02:	f7ff fc87 	bl	8007314 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	2387      	movs	r3, #135	; 0x87
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	58d2      	ldr	r2, [r2, r3]
 8007a0e:	230f      	movs	r3, #15
 8007a10:	18fb      	adds	r3, r7, r3
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	0019      	movs	r1, r3
 8007a16:	0010      	movs	r0, r2
 8007a18:	f7fd ff45 	bl	80058a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	2387      	movs	r3, #135	; 0x87
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	58d3      	ldr	r3, [r2, r3]
 8007a24:	0018      	movs	r0, r3
 8007a26:	f7fd ff0b 	bl	8005840 <USBD_LL_Reset>
}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	b004      	add	sp, #16
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	2387      	movs	r3, #135	; 0x87
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	58d3      	ldr	r3, [r2, r3]
 8007a44:	0018      	movs	r0, r3
 8007a46:	f7fd ff3e 	bl	80058c6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d005      	beq.n	8007a5e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <HAL_PCD_SuspendCallback+0x34>)
 8007a54:	691a      	ldr	r2, [r3, #16]
 8007a56:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <HAL_PCD_SuspendCallback+0x34>)
 8007a58:	2106      	movs	r1, #6
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	46bd      	mov	sp, r7
 8007a62:	b002      	add	sp, #8
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	e000ed00 	.word	0xe000ed00

08007a6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d007      	beq.n	8007a8c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <HAL_PCD_ResumeCallback+0x38>)
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <HAL_PCD_ResumeCallback+0x38>)
 8007a82:	2106      	movs	r1, #6
 8007a84:	438a      	bics	r2, r1
 8007a86:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007a88:	f000 fa4a 	bl	8007f20 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	2387      	movs	r3, #135	; 0x87
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	58d3      	ldr	r3, [r2, r3]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f7fd ff2c 	bl	80058f2 <USBD_LL_Resume>
}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b002      	add	sp, #8
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	e000ed00 	.word	0xe000ed00

08007aa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ab0:	4a2d      	ldr	r2, [pc, #180]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007ab2:	2387      	movs	r3, #135	; 0x87
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	2388      	movs	r3, #136	; 0x88
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4929      	ldr	r1, [pc, #164]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007ac2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007ac4:	4b28      	ldr	r3, [pc, #160]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007ac6:	4a29      	ldr	r2, [pc, #164]	; (8007b6c <USBD_LL_Init+0xc4>)
 8007ac8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007aca:	4b27      	ldr	r3, [pc, #156]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007acc:	2208      	movs	r2, #8
 8007ace:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ad0:	4b25      	ldr	r3, [pc, #148]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ad6:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007ad8:	2202      	movs	r2, #2
 8007ada:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007adc:	4b22      	ldr	r3, [pc, #136]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007ae2:	4b21      	ldr	r3, [pc, #132]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ae8:	4b1f      	ldr	r3, [pc, #124]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007aee:	4b1e      	ldr	r3, [pc, #120]	; (8007b68 <USBD_LL_Init+0xc0>)
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7f9 fc91 	bl	8001418 <HAL_PCD_Init>
 8007af6:	1e03      	subs	r3, r0, #0
 8007af8:	d001      	beq.n	8007afe <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007afa:	f7ff fc0b 	bl	8007314 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	2388      	movs	r3, #136	; 0x88
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	58d0      	ldr	r0, [r2, r3]
 8007b06:	2318      	movs	r3, #24
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	f7fb fd6a 	bl	80035e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	2388      	movs	r3, #136	; 0x88
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	58d0      	ldr	r0, [r2, r3]
 8007b18:	2358      	movs	r3, #88	; 0x58
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2180      	movs	r1, #128	; 0x80
 8007b1e:	f7fb fd61 	bl	80035e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	2388      	movs	r3, #136	; 0x88
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	58d0      	ldr	r0, [r2, r3]
 8007b2a:	23c0      	movs	r3, #192	; 0xc0
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2181      	movs	r1, #129	; 0x81
 8007b30:	f7fb fd58 	bl	80035e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	2388      	movs	r3, #136	; 0x88
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	58d0      	ldr	r0, [r2, r3]
 8007b3c:	2388      	movs	r3, #136	; 0x88
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	2200      	movs	r2, #0
 8007b42:	2101      	movs	r1, #1
 8007b44:	f7fb fd4e 	bl	80035e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	2388      	movs	r3, #136	; 0x88
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	58d0      	ldr	r0, [r2, r3]
 8007b50:	2380      	movs	r3, #128	; 0x80
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	2200      	movs	r2, #0
 8007b56:	2182      	movs	r1, #130	; 0x82
 8007b58:	f7fb fd44 	bl	80035e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	0018      	movs	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b002      	add	sp, #8
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	20000f58 	.word	0x20000f58
 8007b6c:	40005c00 	.word	0x40005c00

08007b70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b78:	210f      	movs	r1, #15
 8007b7a:	187b      	adds	r3, r7, r1
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b80:	260e      	movs	r6, #14
 8007b82:	19bb      	adds	r3, r7, r6
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	2388      	movs	r3, #136	; 0x88
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	58d3      	ldr	r3, [r2, r3]
 8007b90:	000d      	movs	r5, r1
 8007b92:	187c      	adds	r4, r7, r1
 8007b94:	0018      	movs	r0, r3
 8007b96:	f7f9 fd2f 	bl	80015f8 <HAL_PCD_Start>
 8007b9a:	0003      	movs	r3, r0
 8007b9c:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9e:	19bc      	adds	r4, r7, r6
 8007ba0:	0029      	movs	r1, r5
 8007ba2:	187b      	adds	r3, r7, r1
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f000 f9c1 	bl	8007f2e <USBD_Get_USB_Status>
 8007bac:	0003      	movs	r3, r0
 8007bae:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 8007bb0:	19bb      	adds	r3, r7, r6
 8007bb2:	781b      	ldrb	r3, [r3, #0]
}
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b005      	add	sp, #20
 8007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bbc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	000c      	movs	r4, r1
 8007bc6:	0010      	movs	r0, r2
 8007bc8:	0019      	movs	r1, r3
 8007bca:	1cfb      	adds	r3, r7, #3
 8007bcc:	1c22      	adds	r2, r4, #0
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	1cbb      	adds	r3, r7, #2
 8007bd2:	1c02      	adds	r2, r0, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	003b      	movs	r3, r7
 8007bd8:	1c0a      	adds	r2, r1, #0
 8007bda:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bdc:	260f      	movs	r6, #15
 8007bde:	19bb      	adds	r3, r7, r6
 8007be0:	2200      	movs	r2, #0
 8007be2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be4:	250e      	movs	r5, #14
 8007be6:	197b      	adds	r3, r7, r5
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	2388      	movs	r3, #136	; 0x88
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	58d0      	ldr	r0, [r2, r3]
 8007bf4:	19bc      	adds	r4, r7, r6
 8007bf6:	1cbb      	adds	r3, r7, #2
 8007bf8:	781d      	ldrb	r5, [r3, #0]
 8007bfa:	003b      	movs	r3, r7
 8007bfc:	881a      	ldrh	r2, [r3, #0]
 8007bfe:	1cfb      	adds	r3, r7, #3
 8007c00:	7819      	ldrb	r1, [r3, #0]
 8007c02:	002b      	movs	r3, r5
 8007c04:	f7f9 fe66 	bl	80018d4 <HAL_PCD_EP_Open>
 8007c08:	0003      	movs	r3, r0
 8007c0a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c0c:	250e      	movs	r5, #14
 8007c0e:	197c      	adds	r4, r7, r5
 8007c10:	19bb      	adds	r3, r7, r6
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	0018      	movs	r0, r3
 8007c16:	f000 f98a 	bl	8007f2e <USBD_Get_USB_Status>
 8007c1a:	0003      	movs	r3, r0
 8007c1c:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 8007c1e:	197b      	adds	r3, r7, r5
 8007c20:	781b      	ldrb	r3, [r3, #0]
}
 8007c22:	0018      	movs	r0, r3
 8007c24:	46bd      	mov	sp, r7
 8007c26:	b005      	add	sp, #20
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	000a      	movs	r2, r1
 8007c34:	1cfb      	adds	r3, r7, #3
 8007c36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c38:	210f      	movs	r1, #15
 8007c3a:	187b      	adds	r3, r7, r1
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c40:	260e      	movs	r6, #14
 8007c42:	19bb      	adds	r3, r7, r6
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	2388      	movs	r3, #136	; 0x88
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	58d2      	ldr	r2, [r2, r3]
 8007c50:	000d      	movs	r5, r1
 8007c52:	187c      	adds	r4, r7, r1
 8007c54:	1cfb      	adds	r3, r7, #3
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	0019      	movs	r1, r3
 8007c5a:	0010      	movs	r0, r2
 8007c5c:	f7fa f9d6 	bl	800200c <HAL_PCD_EP_Close>
 8007c60:	0003      	movs	r3, r0
 8007c62:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c64:	19bc      	adds	r4, r7, r6
 8007c66:	0029      	movs	r1, r5
 8007c68:	187b      	adds	r3, r7, r1
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	f000 f95e 	bl	8007f2e <USBD_Get_USB_Status>
 8007c72:	0003      	movs	r3, r0
 8007c74:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 8007c76:	19bb      	adds	r3, r7, r6
 8007c78:	781b      	ldrb	r3, [r3, #0]
}
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b005      	add	sp, #20
 8007c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c82 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	000a      	movs	r2, r1
 8007c8c:	1cfb      	adds	r3, r7, #3
 8007c8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c90:	210f      	movs	r1, #15
 8007c92:	187b      	adds	r3, r7, r1
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c98:	260e      	movs	r6, #14
 8007c9a:	19bb      	adds	r3, r7, r6
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	2388      	movs	r3, #136	; 0x88
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	58d2      	ldr	r2, [r2, r3]
 8007ca8:	000d      	movs	r5, r1
 8007caa:	187c      	adds	r4, r7, r1
 8007cac:	1cfb      	adds	r3, r7, #3
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	0019      	movs	r1, r3
 8007cb2:	0010      	movs	r0, r2
 8007cb4:	f7fa fefa 	bl	8002aac <HAL_PCD_EP_SetStall>
 8007cb8:	0003      	movs	r3, r0
 8007cba:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cbc:	19bc      	adds	r4, r7, r6
 8007cbe:	0029      	movs	r1, r5
 8007cc0:	187b      	adds	r3, r7, r1
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f000 f932 	bl	8007f2e <USBD_Get_USB_Status>
 8007cca:	0003      	movs	r3, r0
 8007ccc:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8007cce:	19bb      	adds	r3, r7, r6
 8007cd0:	781b      	ldrb	r3, [r3, #0]
}
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b005      	add	sp, #20
 8007cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cdc:	b085      	sub	sp, #20
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	000a      	movs	r2, r1
 8007ce4:	1cfb      	adds	r3, r7, #3
 8007ce6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce8:	210f      	movs	r1, #15
 8007cea:	187b      	adds	r3, r7, r1
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf0:	260e      	movs	r6, #14
 8007cf2:	19bb      	adds	r3, r7, r6
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	2388      	movs	r3, #136	; 0x88
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	58d2      	ldr	r2, [r2, r3]
 8007d00:	000d      	movs	r5, r1
 8007d02:	187c      	adds	r4, r7, r1
 8007d04:	1cfb      	adds	r3, r7, #3
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	0019      	movs	r1, r3
 8007d0a:	0010      	movs	r0, r2
 8007d0c:	f7fa ff84 	bl	8002c18 <HAL_PCD_EP_ClrStall>
 8007d10:	0003      	movs	r3, r0
 8007d12:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d14:	19bc      	adds	r4, r7, r6
 8007d16:	0029      	movs	r1, r5
 8007d18:	187b      	adds	r3, r7, r1
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f000 f906 	bl	8007f2e <USBD_Get_USB_Status>
 8007d22:	0003      	movs	r3, r0
 8007d24:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 8007d26:	19bb      	adds	r3, r7, r6
 8007d28:	781b      	ldrb	r3, [r3, #0]
}
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	b005      	add	sp, #20
 8007d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d32 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	000a      	movs	r2, r1
 8007d3c:	1cfb      	adds	r3, r7, #3
 8007d3e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	2388      	movs	r3, #136	; 0x88
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	58d3      	ldr	r3, [r2, r3]
 8007d48:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007d4a:	1cfb      	adds	r3, r7, #3
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	b25b      	sxtb	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	da0d      	bge.n	8007d70 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007d54:	1cfb      	adds	r3, r7, #3
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	227f      	movs	r2, #127	; 0x7f
 8007d5a:	401a      	ands	r2, r3
 8007d5c:	68f9      	ldr	r1, [r7, #12]
 8007d5e:	202a      	movs	r0, #42	; 0x2a
 8007d60:	0013      	movs	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	18cb      	adds	r3, r1, r3
 8007d6a:	181b      	adds	r3, r3, r0
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	e00d      	b.n	8007d8c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007d70:	1cfb      	adds	r3, r7, #3
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	227f      	movs	r2, #127	; 0x7f
 8007d76:	401a      	ands	r2, r3
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	2385      	movs	r3, #133	; 0x85
 8007d7c:	0059      	lsls	r1, r3, #1
 8007d7e:	0013      	movs	r3, r2
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	18c3      	adds	r3, r0, r3
 8007d88:	185b      	adds	r3, r3, r1
 8007d8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d8c:	0018      	movs	r0, r3
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	b004      	add	sp, #16
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	000a      	movs	r2, r1
 8007d9e:	1cfb      	adds	r3, r7, #3
 8007da0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da2:	210f      	movs	r1, #15
 8007da4:	187b      	adds	r3, r7, r1
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007daa:	260e      	movs	r6, #14
 8007dac:	19bb      	adds	r3, r7, r6
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	2388      	movs	r3, #136	; 0x88
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	58d2      	ldr	r2, [r2, r3]
 8007dba:	000d      	movs	r5, r1
 8007dbc:	187c      	adds	r4, r7, r1
 8007dbe:	1cfb      	adds	r3, r7, #3
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	0019      	movs	r1, r3
 8007dc4:	0010      	movs	r0, r2
 8007dc6:	f7f9 fd57 	bl	8001878 <HAL_PCD_SetAddress>
 8007dca:	0003      	movs	r3, r0
 8007dcc:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dce:	19bc      	adds	r4, r7, r6
 8007dd0:	0029      	movs	r1, r5
 8007dd2:	187b      	adds	r3, r7, r1
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	0018      	movs	r0, r3
 8007dd8:	f000 f8a9 	bl	8007f2e <USBD_Get_USB_Status>
 8007ddc:	0003      	movs	r3, r0
 8007dde:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8007de0:	19bb      	adds	r3, r7, r6
 8007de2:	781b      	ldrb	r3, [r3, #0]
}
 8007de4:	0018      	movs	r0, r3
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b005      	add	sp, #20
 8007dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	0008      	movs	r0, r1
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	0019      	movs	r1, r3
 8007dfa:	230b      	movs	r3, #11
 8007dfc:	18fb      	adds	r3, r7, r3
 8007dfe:	1c02      	adds	r2, r0, #0
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	2408      	movs	r4, #8
 8007e04:	193b      	adds	r3, r7, r4
 8007e06:	1c0a      	adds	r2, r1, #0
 8007e08:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e0a:	2117      	movs	r1, #23
 8007e0c:	187b      	adds	r3, r7, r1
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e12:	2516      	movs	r5, #22
 8007e14:	197b      	adds	r3, r7, r5
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	2388      	movs	r3, #136	; 0x88
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	58d0      	ldr	r0, [r2, r3]
 8007e22:	193b      	adds	r3, r7, r4
 8007e24:	881d      	ldrh	r5, [r3, #0]
 8007e26:	000e      	movs	r6, r1
 8007e28:	187c      	adds	r4, r7, r1
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	230b      	movs	r3, #11
 8007e2e:	18fb      	adds	r3, r7, r3
 8007e30:	7819      	ldrb	r1, [r3, #0]
 8007e32:	002b      	movs	r3, r5
 8007e34:	f7fa fc80 	bl	8002738 <HAL_PCD_EP_Transmit>
 8007e38:	0003      	movs	r3, r0
 8007e3a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e3c:	2516      	movs	r5, #22
 8007e3e:	197c      	adds	r4, r7, r5
 8007e40:	0031      	movs	r1, r6
 8007e42:	187b      	adds	r3, r7, r1
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	0018      	movs	r0, r3
 8007e48:	f000 f871 	bl	8007f2e <USBD_Get_USB_Status>
 8007e4c:	0003      	movs	r3, r0
 8007e4e:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8007e50:	197b      	adds	r3, r7, r5
 8007e52:	781b      	ldrb	r3, [r3, #0]
}
 8007e54:	0018      	movs	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	b007      	add	sp, #28
 8007e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	0008      	movs	r0, r1
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	0019      	movs	r1, r3
 8007e6a:	230b      	movs	r3, #11
 8007e6c:	18fb      	adds	r3, r7, r3
 8007e6e:	1c02      	adds	r2, r0, #0
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	2408      	movs	r4, #8
 8007e74:	193b      	adds	r3, r7, r4
 8007e76:	1c0a      	adds	r2, r1, #0
 8007e78:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e7a:	2117      	movs	r1, #23
 8007e7c:	187b      	adds	r3, r7, r1
 8007e7e:	2200      	movs	r2, #0
 8007e80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e82:	2516      	movs	r5, #22
 8007e84:	197b      	adds	r3, r7, r5
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	2388      	movs	r3, #136	; 0x88
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	58d0      	ldr	r0, [r2, r3]
 8007e92:	193b      	adds	r3, r7, r4
 8007e94:	881d      	ldrh	r5, [r3, #0]
 8007e96:	000e      	movs	r6, r1
 8007e98:	187c      	adds	r4, r7, r1
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	230b      	movs	r3, #11
 8007e9e:	18fb      	adds	r3, r7, r3
 8007ea0:	7819      	ldrb	r1, [r3, #0]
 8007ea2:	002b      	movs	r3, r5
 8007ea4:	f7fa fab0 	bl	8002408 <HAL_PCD_EP_Receive>
 8007ea8:	0003      	movs	r3, r0
 8007eaa:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eac:	2516      	movs	r5, #22
 8007eae:	197c      	adds	r4, r7, r5
 8007eb0:	0031      	movs	r1, r6
 8007eb2:	187b      	adds	r3, r7, r1
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	f000 f839 	bl	8007f2e <USBD_Get_USB_Status>
 8007ebc:	0003      	movs	r3, r0
 8007ebe:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8007ec0:	197b      	adds	r3, r7, r5
 8007ec2:	781b      	ldrb	r3, [r3, #0]
}
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	b007      	add	sp, #28
 8007eca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ecc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	000a      	movs	r2, r1
 8007ed6:	1cfb      	adds	r3, r7, #3
 8007ed8:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	2388      	movs	r3, #136	; 0x88
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	58d2      	ldr	r2, [r2, r3]
 8007ee2:	1cfb      	adds	r3, r7, #3
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	0019      	movs	r1, r3
 8007ee8:	0010      	movs	r0, r2
 8007eea:	f7fa fc0b 	bl	8002704 <HAL_PCD_EP_GetRxCount>
 8007eee:	0003      	movs	r3, r0
}
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b002      	add	sp, #8
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <USBD_static_malloc+0x14>)
}
 8007f02:	0018      	movs	r0, r3
 8007f04:	46bd      	mov	sp, r7
 8007f06:	b002      	add	sp, #8
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	46c0      	nop			; (mov r8, r8)
 8007f0c:	200001a8 	.word	0x200001a8

08007f10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]

}
 8007f18:	46c0      	nop			; (mov r8, r8)
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	b002      	add	sp, #8
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007f24:	f7fe fda4 	bl	8006a70 <SystemClock_Config>
}
 8007f28:	46c0      	nop			; (mov r8, r8)
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	0002      	movs	r2, r0
 8007f36:	1dfb      	adds	r3, r7, #7
 8007f38:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3a:	230f      	movs	r3, #15
 8007f3c:	18fb      	adds	r3, r7, r3
 8007f3e:	2200      	movs	r2, #0
 8007f40:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007f42:	1dfb      	adds	r3, r7, #7
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d00d      	beq.n	8007f66 <USBD_Get_USB_Status+0x38>
 8007f4a:	dc02      	bgt.n	8007f52 <USBD_Get_USB_Status+0x24>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <USBD_Get_USB_Status+0x2e>
 8007f50:	e018      	b.n	8007f84 <USBD_Get_USB_Status+0x56>
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d00c      	beq.n	8007f70 <USBD_Get_USB_Status+0x42>
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d00f      	beq.n	8007f7a <USBD_Get_USB_Status+0x4c>
 8007f5a:	e013      	b.n	8007f84 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f5c:	230f      	movs	r3, #15
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	2200      	movs	r2, #0
 8007f62:	701a      	strb	r2, [r3, #0]
    break;
 8007f64:	e013      	b.n	8007f8e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f66:	230f      	movs	r3, #15
 8007f68:	18fb      	adds	r3, r7, r3
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	701a      	strb	r2, [r3, #0]
    break;
 8007f6e:	e00e      	b.n	8007f8e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f70:	230f      	movs	r3, #15
 8007f72:	18fb      	adds	r3, r7, r3
 8007f74:	2201      	movs	r2, #1
 8007f76:	701a      	strb	r2, [r3, #0]
    break;
 8007f78:	e009      	b.n	8007f8e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f7a:	230f      	movs	r3, #15
 8007f7c:	18fb      	adds	r3, r7, r3
 8007f7e:	2202      	movs	r2, #2
 8007f80:	701a      	strb	r2, [r3, #0]
    break;
 8007f82:	e004      	b.n	8007f8e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007f84:	230f      	movs	r3, #15
 8007f86:	18fb      	adds	r3, r7, r3
 8007f88:	2202      	movs	r2, #2
 8007f8a:	701a      	strb	r2, [r3, #0]
    break;
 8007f8c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007f8e:	230f      	movs	r3, #15
 8007f90:	18fb      	adds	r3, r7, r3
 8007f92:	781b      	ldrb	r3, [r3, #0]
}
 8007f94:	0018      	movs	r0, r3
 8007f96:	46bd      	mov	sp, r7
 8007f98:	b004      	add	sp, #16
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	0002      	movs	r2, r0
 8007fa4:	6039      	str	r1, [r7, #0]
 8007fa6:	1dfb      	adds	r3, r7, #7
 8007fa8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2212      	movs	r2, #18
 8007fae:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	b002      	add	sp, #8
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	46c0      	nop			; (mov r8, r8)
 8007fbc:	20000154 	.word	0x20000154

08007fc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	0002      	movs	r2, r0
 8007fc8:	6039      	str	r1, [r7, #0]
 8007fca:	1dfb      	adds	r3, r7, #7
 8007fcc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fd4:	4b02      	ldr	r3, [pc, #8]	; (8007fe0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	b002      	add	sp, #8
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	46c0      	nop			; (mov r8, r8)
 8007fe0:	20000168 	.word	0x20000168

08007fe4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	0002      	movs	r2, r0
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	1dfb      	adds	r3, r7, #7
 8007ff0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007ff2:	1dfb      	adds	r3, r7, #7
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	4908      	ldr	r1, [pc, #32]	; (8008020 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007ffe:	4b09      	ldr	r3, [pc, #36]	; (8008024 <USBD_FS_ProductStrDescriptor+0x40>)
 8008000:	0018      	movs	r0, r3
 8008002:	f7fe f946 	bl	8006292 <USBD_GetString>
 8008006:	e005      	b.n	8008014 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	4905      	ldr	r1, [pc, #20]	; (8008020 <USBD_FS_ProductStrDescriptor+0x3c>)
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <USBD_FS_ProductStrDescriptor+0x40>)
 800800e:	0018      	movs	r0, r3
 8008010:	f7fe f93f 	bl	8006292 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008014:	4b02      	ldr	r3, [pc, #8]	; (8008020 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8008016:	0018      	movs	r0, r3
 8008018:	46bd      	mov	sp, r7
 800801a:	b002      	add	sp, #8
 800801c:	bd80      	pop	{r7, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	20001178 	.word	0x20001178
 8008024:	080082ec 	.word	0x080082ec

08008028 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	0002      	movs	r2, r0
 8008030:	6039      	str	r1, [r7, #0]
 8008032:	1dfb      	adds	r3, r7, #7
 8008034:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	4904      	ldr	r1, [pc, #16]	; (800804c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800803a:	4b05      	ldr	r3, [pc, #20]	; (8008050 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800803c:	0018      	movs	r0, r3
 800803e:	f7fe f928 	bl	8006292 <USBD_GetString>
  return USBD_StrDesc;
 8008042:	4b02      	ldr	r3, [pc, #8]	; (800804c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8008044:	0018      	movs	r0, r3
 8008046:	46bd      	mov	sp, r7
 8008048:	b002      	add	sp, #8
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20001178 	.word	0x20001178
 8008050:	08008304 	.word	0x08008304

08008054 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	0002      	movs	r2, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	1dfb      	adds	r3, r7, #7
 8008060:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	221a      	movs	r2, #26
 8008066:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008068:	f000 f84c 	bl	8008104 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800806e:	0018      	movs	r0, r3
 8008070:	46bd      	mov	sp, r7
 8008072:	b002      	add	sp, #8
 8008074:	bd80      	pop	{r7, pc}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	2000016c 	.word	0x2000016c

0800807c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	0002      	movs	r2, r0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	1dfb      	adds	r3, r7, #7
 8008088:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800808a:	1dfb      	adds	r3, r7, #7
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	4908      	ldr	r1, [pc, #32]	; (80080b8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008096:	4b09      	ldr	r3, [pc, #36]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x40>)
 8008098:	0018      	movs	r0, r3
 800809a:	f7fe f8fa 	bl	8006292 <USBD_GetString>
 800809e:	e005      	b.n	80080ac <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	4905      	ldr	r1, [pc, #20]	; (80080b8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x40>)
 80080a6:	0018      	movs	r0, r3
 80080a8:	f7fe f8f3 	bl	8006292 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080ac:	4b02      	ldr	r3, [pc, #8]	; (80080b8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80080ae:	0018      	movs	r0, r3
 80080b0:	46bd      	mov	sp, r7
 80080b2:	b002      	add	sp, #8
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	20001178 	.word	0x20001178
 80080bc:	08008318 	.word	0x08008318

080080c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	0002      	movs	r2, r0
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	1dfb      	adds	r3, r7, #7
 80080cc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80080ce:	1dfb      	adds	r3, r7, #7
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	4908      	ldr	r1, [pc, #32]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80080da:	4b09      	ldr	r3, [pc, #36]	; (8008100 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80080dc:	0018      	movs	r0, r3
 80080de:	f7fe f8d8 	bl	8006292 <USBD_GetString>
 80080e2:	e005      	b.n	80080f0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	4905      	ldr	r1, [pc, #20]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80080ea:	0018      	movs	r0, r3
 80080ec:	f7fe f8d1 	bl	8006292 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f0:	4b02      	ldr	r3, [pc, #8]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80080f2:	0018      	movs	r0, r3
 80080f4:	46bd      	mov	sp, r7
 80080f6:	b002      	add	sp, #8
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	20001178 	.word	0x20001178
 8008100:	08008324 	.word	0x08008324

08008104 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800810a:	4b10      	ldr	r3, [pc, #64]	; (800814c <Get_SerialNum+0x48>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008110:	4b0f      	ldr	r3, [pc, #60]	; (8008150 <Get_SerialNum+0x4c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008116:	4b0f      	ldr	r3, [pc, #60]	; (8008154 <Get_SerialNum+0x50>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	18d3      	adds	r3, r2, r3
 8008122:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00b      	beq.n	8008142 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800812a:	490b      	ldr	r1, [pc, #44]	; (8008158 <Get_SerialNum+0x54>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2208      	movs	r2, #8
 8008130:	0018      	movs	r0, r3
 8008132:	f000 f815 	bl	8008160 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008136:	4909      	ldr	r1, [pc, #36]	; (800815c <Get_SerialNum+0x58>)
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2204      	movs	r2, #4
 800813c:	0018      	movs	r0, r3
 800813e:	f000 f80f 	bl	8008160 <IntToUnicode>
  }
}
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	46bd      	mov	sp, r7
 8008146:	b004      	add	sp, #16
 8008148:	bd80      	pop	{r7, pc}
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	1ffff7ac 	.word	0x1ffff7ac
 8008150:	1ffff7b0 	.word	0x1ffff7b0
 8008154:	1ffff7b4 	.word	0x1ffff7b4
 8008158:	2000016e 	.word	0x2000016e
 800815c:	2000017e 	.word	0x2000017e

08008160 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	1dfb      	adds	r3, r7, #7
 800816c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800816e:	2117      	movs	r1, #23
 8008170:	187b      	adds	r3, r7, r1
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8008176:	187b      	adds	r3, r7, r1
 8008178:	2200      	movs	r2, #0
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	e02f      	b.n	80081de <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	0f1b      	lsrs	r3, r3, #28
 8008182:	2b09      	cmp	r3, #9
 8008184:	d80d      	bhi.n	80081a2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	0f1b      	lsrs	r3, r3, #28
 800818a:	b2da      	uxtb	r2, r3
 800818c:	2317      	movs	r3, #23
 800818e:	18fb      	adds	r3, r7, r3
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	0019      	movs	r1, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	185b      	adds	r3, r3, r1
 800819a:	3230      	adds	r2, #48	; 0x30
 800819c:	b2d2      	uxtb	r2, r2
 800819e:	701a      	strb	r2, [r3, #0]
 80081a0:	e00c      	b.n	80081bc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	0f1b      	lsrs	r3, r3, #28
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	2317      	movs	r3, #23
 80081aa:	18fb      	adds	r3, r7, r3
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	0019      	movs	r1, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	185b      	adds	r3, r3, r1
 80081b6:	3237      	adds	r2, #55	; 0x37
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081c2:	2117      	movs	r1, #23
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	3301      	adds	r3, #1
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	18d3      	adds	r3, r2, r3
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081d4:	187b      	adds	r3, r7, r1
 80081d6:	781a      	ldrb	r2, [r3, #0]
 80081d8:	187b      	adds	r3, r7, r1
 80081da:	3201      	adds	r2, #1
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	2317      	movs	r3, #23
 80081e0:	18fa      	adds	r2, r7, r3
 80081e2:	1dfb      	adds	r3, r7, #7
 80081e4:	7812      	ldrb	r2, [r2, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d3c8      	bcc.n	800817e <IntToUnicode+0x1e>
  }
}
 80081ec:	46c0      	nop			; (mov r8, r8)
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b006      	add	sp, #24
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80081f4:	480d      	ldr	r0, [pc, #52]	; (800822c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80081f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80081f8:	480d      	ldr	r0, [pc, #52]	; (8008230 <LoopForever+0x6>)
  ldr r1, =_edata
 80081fa:	490e      	ldr	r1, [pc, #56]	; (8008234 <LoopForever+0xa>)
  ldr r2, =_sidata
 80081fc:	4a0e      	ldr	r2, [pc, #56]	; (8008238 <LoopForever+0xe>)
  movs r3, #0
 80081fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008200:	e002      	b.n	8008208 <LoopCopyDataInit>

08008202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008206:	3304      	adds	r3, #4

08008208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800820a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800820c:	d3f9      	bcc.n	8008202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800820e:	4a0b      	ldr	r2, [pc, #44]	; (800823c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008210:	4c0b      	ldr	r4, [pc, #44]	; (8008240 <LoopForever+0x16>)
  movs r3, #0
 8008212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008214:	e001      	b.n	800821a <LoopFillZerobss>

08008216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008218:	3204      	adds	r2, #4

0800821a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800821a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800821c:	d3fb      	bcc.n	8008216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800821e:	f7ff f9fd 	bl	800761c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8008222:	f000 f811 	bl	8008248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008226:	f7fe faab 	bl	8006780 <main>

0800822a <LoopForever>:

LoopForever:
    b LoopForever
 800822a:	e7fe      	b.n	800822a <LoopForever>
  ldr   r0, =_estack
 800822c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8008230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008234:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8008238:	08008444 	.word	0x08008444
  ldr r2, =_sbss
 800823c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8008240:	20001378 	.word	0x20001378

08008244 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008244:	e7fe      	b.n	8008244 <ADC1_COMP_IRQHandler>
	...

08008248 <__libc_init_array>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	2600      	movs	r6, #0
 800824c:	4d0c      	ldr	r5, [pc, #48]	; (8008280 <__libc_init_array+0x38>)
 800824e:	4c0d      	ldr	r4, [pc, #52]	; (8008284 <__libc_init_array+0x3c>)
 8008250:	1b64      	subs	r4, r4, r5
 8008252:	10a4      	asrs	r4, r4, #2
 8008254:	42a6      	cmp	r6, r4
 8008256:	d109      	bne.n	800826c <__libc_init_array+0x24>
 8008258:	2600      	movs	r6, #0
 800825a:	f000 f82b 	bl	80082b4 <_init>
 800825e:	4d0a      	ldr	r5, [pc, #40]	; (8008288 <__libc_init_array+0x40>)
 8008260:	4c0a      	ldr	r4, [pc, #40]	; (800828c <__libc_init_array+0x44>)
 8008262:	1b64      	subs	r4, r4, r5
 8008264:	10a4      	asrs	r4, r4, #2
 8008266:	42a6      	cmp	r6, r4
 8008268:	d105      	bne.n	8008276 <__libc_init_array+0x2e>
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	00b3      	lsls	r3, r6, #2
 800826e:	58eb      	ldr	r3, [r5, r3]
 8008270:	4798      	blx	r3
 8008272:	3601      	adds	r6, #1
 8008274:	e7ee      	b.n	8008254 <__libc_init_array+0xc>
 8008276:	00b3      	lsls	r3, r6, #2
 8008278:	58eb      	ldr	r3, [r5, r3]
 800827a:	4798      	blx	r3
 800827c:	3601      	adds	r6, #1
 800827e:	e7f2      	b.n	8008266 <__libc_init_array+0x1e>
 8008280:	0800843c 	.word	0x0800843c
 8008284:	0800843c 	.word	0x0800843c
 8008288:	0800843c 	.word	0x0800843c
 800828c:	08008440 	.word	0x08008440

08008290 <memcpy>:
 8008290:	2300      	movs	r3, #0
 8008292:	b510      	push	{r4, lr}
 8008294:	429a      	cmp	r2, r3
 8008296:	d100      	bne.n	800829a <memcpy+0xa>
 8008298:	bd10      	pop	{r4, pc}
 800829a:	5ccc      	ldrb	r4, [r1, r3]
 800829c:	54c4      	strb	r4, [r0, r3]
 800829e:	3301      	adds	r3, #1
 80082a0:	e7f8      	b.n	8008294 <memcpy+0x4>

080082a2 <memset>:
 80082a2:	0003      	movs	r3, r0
 80082a4:	1812      	adds	r2, r2, r0
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d100      	bne.n	80082ac <memset+0xa>
 80082aa:	4770      	bx	lr
 80082ac:	7019      	strb	r1, [r3, #0]
 80082ae:	3301      	adds	r3, #1
 80082b0:	e7f9      	b.n	80082a6 <memset+0x4>
	...

080082b4 <_init>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr

080082c0 <_fini>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c6:	bc08      	pop	{r3}
 80082c8:	469e      	mov	lr, r3
 80082ca:	4770      	bx	lr
